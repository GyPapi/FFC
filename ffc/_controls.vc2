*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_controls.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _folder AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lblProjectName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtProjectName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblProjectFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtProjectFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdProjectFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCreateProjDir" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: release		&& Releases a FormSet or Form from memory.
		*m: trimfile
		*p: cext
		*p: clastprojectfile
		*p: lrelease
	*</DefinedPropArrayMethod>

	BorderWidth = 0
	cext = .pjx
	clastprojectfile = 
	Height = 125
	Name = "_folder"
	Width = 336

	ADD OBJECT 'chkCreateProjDir' AS checkbox WITH ;
		Caption = "\<Create project directory structure", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 10, ;
		Name = "chkCreateProjDir", ;
		TabIndex = 6, ;
		Top = 98, ;
		Value = .T., ;
		Width = 218
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdProjectFile' AS commandbutton WITH ;
		Caption = "Bro\<wse...", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 260, ;
		Name = "cmdProjectFile", ;
		TabIndex = 5, ;
		Top = 68, ;
		Width = 66
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lblProjectFile' AS label WITH ;
		Caption = "Proj\<ect file:", ;
		FontExtend = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 10, ;
		Name = "lblProjectFile", ;
		TabIndex = 3, ;
		Top = 53, ;
		Width = 86
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblProjectName' AS label WITH ;
		Caption = "P\<roject name:", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 10, ;
		Name = "lblProjectName", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 98
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'txtProjectFile' AS textbox WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",128)), ;
		Left = 10, ;
		Name = "txtProjectFile", ;
		TabIndex = 4, ;
		Top = 68, ;
		Width = 243
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtProjectName' AS textbox WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",128)), ;
		Left = 10, ;
		Name = "txtProjectName", ;
		TabIndex = 2, ;
		Top = 23, ;
		Width = 315
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE release		&& Releases a FormSet or Form from memory.
		IF this.lRelease
			NODEFAULT
			RETURN .F.
		ENDIF
		this.lRelease=.T.
		RELEASE this
		
	ENDPROC

	PROCEDURE trimfile
		LPARAMETERS tcFileName
		LOCAL lcFileName,lnAtPos
		lnAtPos=RATC("\",tcFileName)
		lcFileName=ALLTRIM(IIF(lnAtPos=0,tcFileName,LEFTC(tcFileName,lnAtPos)))
		RETURN LOWER(lcFileName)
		
	ENDPROC

	PROCEDURE cmdProjectFile.Click
		LOCAL lcDirectory,lcProjectFile
		
		lcDirectory=LOWER(GETDIR())
		IF EMPTY(lcDirectory)
			RETURN
		ENDIF
		lcProjectFile=JustStem(ALLTRIM(this.parent.txtProjectFile.Value))
		IF EMPTY(lcProjectFile)
			lcProjectFile=JustStem(ALLTRIM(this.parent.txtProjectName.Value))
		ENDIF
		IF NOT LOWER(RIGHTC(lcProjectFile,4))==THIS.PARENT.cExt
			lcProjectFile=lcProjectFile+THIS.PARENT.cExt
		ENDIF
		this.parent.txtProjectFile.Value=lcDirectory+lcProjectFile
		
	ENDPROC

	PROCEDURE cmdProjectFile.Refresh
		this.Enabled=(NOT EMPTY(this.parent.txtProjectName.Value))
		
	ENDPROC

	PROCEDURE cmdProjectFile.Valid
		LOCAL lcProjectFile
		
		lcProjectFile=ALLTRIM(this.parent.txtProjectFile.Value)
		IF NOT EMPTY(lcProjectFile) AND NOT LOWER(RIGHTC(lcProjectFile,4))==THIS.PARENT.cExt
			lcProjectFile=lcProjectFile+THIS.PARENT.cExt
			this.parent.txtProjectFile.Value=lcProjectFile
		ENDIF
		
	ENDPROC

	PROCEDURE txtProjectFile.InteractiveChange
		LOCAL lcValue,lcProjectFile,lcBadChars,lnSelStart
		
		lnSelStart=this.SelStart
		lcBadChars="?/,=;{}[]!@#$%^&*<>()+|"+CHR(34)+CHR(39)
		lcValue=this.Value
		lcProjectFile=CHRTRANC(lcValue,lcBadChars,"")
		
		IF NOT lcValue=lcProjectFile
			this.Value=lcProjectFile
			this.SelStart=MAX(lnSelStart-1,0)
		ENDIF
		
	ENDPROC

	PROCEDURE txtProjectFile.Refresh
		this.Enabled=(NOT EMPTY(this.parent.txtProjectName.Value))
		
	ENDPROC

	PROCEDURE txtProjectFile.Valid
		LOCAL lcValue,lcExt,lcProjectFile,lcProjectPath
		
		lcValue=ALLTRIM(this.Value)
		lcExt = IIF(EMPTY(THIS.PARENT.cExt),"PJX",ALLTRIM(THIS.PARENT.cExt))
		IF EMPTY(lcValue)
			this.parent.txtProjectName.InteractiveChange
			RETURN (NOT EMPTY(this.Value))
		ENDIF
		IF lcValue=="\" OR lcValue==":" OR RIGHTC(lcValue,1)=="\"
			RETURN .F.
		ENDIF
		
		lcProjectFile=FORCEEXT(ALLTRIM(LEFTC(JUSTSTEM(lcValue),16)),lcExt)
		lcProjectPath=ADDBS(ALLTRIM(JUSTPATH(lcValue)))
		
		* check for invalid path (also handle network drives)
		IF RATC("\\",lcProjectPath)>1
			lcProjectPath=STRTRAN(lcProjectPath,"\\","\",IIF(LEFTC(lcValue,2)="\\",2,1))
		ENDIF
		lcProjectFile=LOWER(FORCEPATH(lcProjectFile,lcProjectPath))
		IF NOT lcValue==lcProjectFile
			this.Value=lcProjectFile
		ENDIF
		
		RETURN NOT EMPTY(JustStem(lcValue))
		
	ENDPROC

	PROCEDURE txtProjectName.GotFocus
		LOCAL lcProjectFile
		
		lcProjectFile=ALLTRIM(this.parent.txtProjectFile.Value)
		IF LOWER(JustStem(lcProjectFile))=LOWER(ALLTRIM(this.Value))
			lcProjectFile=""
		ENDIF
		this.parent.cLastProjectFile=lcProjectFile
		
	ENDPROC

	PROCEDURE txtProjectName.InteractiveChange
		LOCAL lcProjectDir,lcProjectDir2,lcProjectDir3,lcProjectFile,lcProjectFile2
		LOCAL lcBadChars,lnAtPos
		
		lcBadChars=" ?/\,=:;{}[]!@#$%^&*.<>()+|"+CHR(34)+CHR(39)
		IF EMPTY(this.parent.cLastProjectFile)
			lcProjectDir=THIS.Parent.TrimFile(ALLTRIM(this.parent.txtProjectFile.Value))
			lcProjectDir3=lcProjectDir
			lcProjectFile2=JustStem(ALLTRIM(this.parent.txtProjectFile.Value))
			IF EMPTY(lcProjectDir)
				lcProjectDir=LOWER(SYS(5)+CURDIR())
				IF lcProjectDir==LOWER(HOME())
					lcProjectDir=LOWER(SYS(5)+"\")
				ENDIF
			ENDIF
			IF NOT "\"$lcProjectDir
				lcProjectDir="\"+lcProjectDir
			ENDIF
			lcProjectFile=ALLTRIM(CHRTRANC(LEFTC(ALLTRIM(this.Value),16),lcBadChars,""))
			lnAtPos=AT_C("\",lcProjectDir)
			IF lnAtPos>0
				lcProjectDir2=ALLTRIM(SUBSTRC(lcProjectDir,MIN(lnAtPos+1,LENC(lcProjectDir))))
				IF RIGHTC(lcProjectDir2,1)=="\"
					lcProjectDir2=ALLTRIM(LEFTC(lcProjectDir2,LENC(lcProjectDir2)-1))
				ENDIF
				IF LOWER(lcProjectDir2)==LOWER(lcProjectFile2)
					lnAtPos=AT_C("\",lcProjectDir3)
					lcProjectDir=ALLTRIM(LEFTC(lcProjectDir3,lnAtPos-1))+"\"+lcProjectFile+"\"
				ENDIF
			ENDIF
			IF NOT ":"$lcProjectDir AND LEFTC(lcProjectDir,2)#"\\"
				lcProjectDir=LOWER(SYS(5))+lcProjectDir
			ENDIF
			IF RIGHTC(lcProjectDir,2)==":\"
				lcProjectDir=lcProjectDir+lcProjectFile+"\"
			ENDIF
			IF NOT LOWER(RIGHTC(lcProjectFile,4))==THIS.PARENT.cExt
				lcProjectFile=lcProjectFile+THIS.PARENT.cExt
			ENDIF
			this.parent.txtProjectFile.Value=lcProjectDir+lcProjectFile
		ENDIF
		this.parent.txtProjectFile.Refresh
		this.parent.cmdProjectFile.Refresh
		
	ENDPROC

	PROCEDURE txtProjectName.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF AT(CHR(nKeyCode),"?/\,=:;{}[]!@#$%^&*.<>()+|"+CHR(34)+CHR(39))>0
			NODEFAULT
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE txtProjectName.ProgrammaticChange
		this.InteractiveChange
		
	ENDPROC

	PROCEDURE txtProjectName.Valid
		LOCAL lcValue
		
		lcValue=ALLTRIM(this.Value)
		IF ":"$lcValue OR "\"$lcValue OR "."$lcValue
			this.Value=JustStem(ALLTRIM(lcValue))
		ENDIF
		IF EMPTY(lcValue) AND NOT EMPTY(this.parent.txtProjectFile.Value)
			this.parent.txtProjectFile.Value=THIS.Parent.cLastProjectFile
		ENDIF
		THIS.Parent.cLastProjectFile=""
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _moverlists AS _container OF "_base.vcx" 		&& mover list boxes
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="lstSource" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstSelected" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAddAll" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemove" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdRemoveAll" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: selectall		&& Selects all items in the listbox passed in as a parameter.
		*p: candropicon		&& Cursor when dropping is okay.
		*p: dragthreshold		&& Number of pixels a user has to move the mouse with the left mouse button down for the drag method to be called.
		*p: mousex		&& Stores x coordinate of mouse pointer position.
		*p: mousey		&& Stores y coordinate of mouse pointer position.
		*p: nodropicon		&& Cursor when dropping is not okay.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	candropicon = DRAGMOVE.CUR		&& Cursor when dropping is okay.
	dragthreshold = 8		&& Number of pixels a user has to move the mouse with the left mouse button down for the drag method to be called.
	Height = 132
	mousex = 0		&& Stores x coordinate of mouse pointer position.
	mousey = 0		&& Stores y coordinate of mouse pointer position.
	Name = "_moverlists"
	nodropicon = NODROP01.CUR		&& Cursor when dropping is not okay.
	Width = 409

	ADD OBJECT 'cmdAdd' AS _commandbutton WITH ;
		Caption = ">", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 25, ;
		Left = 186, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		ToolTipText = "Add Selected Items", ;
		Top = 2, ;
		Width = 37
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdAddAll' AS _commandbutton WITH ;
		Caption = ">>", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 25, ;
		Left = 186, ;
		Name = "cmdAddAll", ;
		TabIndex = 4, ;
		ToolTipText = "Add All Items", ;
		Top = 33, ;
		Width = 37
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemove' AS _commandbutton WITH ;
		Caption = "<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 25, ;
		Left = 186, ;
		Name = "cmdRemove", ;
		TabIndex = 5, ;
		ToolTipText = "Remove Selected Items", ;
		Top = 71, ;
		Width = 37
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdRemoveAll' AS _commandbutton WITH ;
		Caption = "<<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 25, ;
		Left = 186, ;
		Name = "cmdRemoveAll", ;
		TabIndex = 6, ;
		ToolTipText = "Remove All Items", ;
		Top = 102, ;
		Width = 37
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lstSelected' AS _listbox WITH ;
		ColumnCount = 0, ;
		ColumnWidths = "", ;
		ControlSource = "", ;
		DragIcon = grid\, ;
		DragMode = 0, ;
		FirstElement = 1, ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 132, ;
		Left = 240, ;
		MoverBars = .T., ;
		MultiSelect = .T., ;
		Name = "lstSelected", ;
		NumberOfElements = 0, ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 2, ;
		Top = 0, ;
		Width = 169
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="listbox" />

	ADD OBJECT 'lstSource' AS _listbox WITH ;
		ColumnCount = 0, ;
		ColumnWidths = "", ;
		ControlSource = "", ;
		DragIcon = grid\, ;
		DragMode = 0, ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 132, ;
		Left = 0, ;
		MultiSelect = .T., ;
		Name = "lstSource", ;
		NumberOfElements = 0, ;
		RowSource = "", ;
		RowSourceType = 0, ;
		TabIndex = 1, ;
		Top = 0, ;
		Width = 169
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="listbox" />
	
	PROCEDURE Init
		This.lstSource.DragIcon = This.CanDropIcon
		This.lstSelected.DragIcon = This.CanDropIcon
		
	ENDPROC

	PROCEDURE selectall		&& Selects all items in the listbox passed in as a parameter.
		LPARAMETERS oList
		LOCAL lnCnt
		FOR lnCnt = 1 to oList.ListCount
			oList.Selected(lnCnt) = .T.
		ENDFOR
	ENDPROC

	PROCEDURE cmdAdd.Click
		LOCAL nCnt
		THISFORM.LockScreen = .T.
		* The ListCount value changes whenever the RemoveItem method is called
		nCnt = 1
		DO WHILE m.nCnt <= THIS.Parent.lstSource.ListCount
			IF THIS.Parent.lstSource.Selected(m.nCnt)
				THIS.Parent.lstSelected.AddItem(THIS.Parent.lstSource.List(m.nCnt))
				THIS.Parent.lstSource.RemoveItem(m.nCnt)
			ELSE
				nCnt = m.nCnt + 1
			ENDIF
		ENDDO
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdAddAll.Click
		LOCAL i
		THISFORM.LockScreen = .T.
		FOR i = 1 to THIS.Parent.lstSource.ListCount
			THIS.Parent.lstSelected.AddItem(THIS.Parent.lstSource.List(m.i))
		ENDFOR
		THIS.Parent.lstSource.Clear
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdRemove.Click
		LOCAL nCnt
		THISFORM.LockScreen = .T.
		nCnt = 1
		DO WHILE m.nCnt <= THIS.Parent.lstSelected.ListCount
			IF THIS.Parent.lstSelected.Selected(m.nCnt)
				THIS.Parent.lstSource.AddItem(THIS.Parent.lstSelected.List(m.nCnt))
				THIS.Parent.lstSelected.RemoveItem(m.nCnt)
			ELSE
				nCnt = m.nCnt + 1
			ENDIF
		ENDDO
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdRemoveAll.Click
		LOCAL i
		THISFORM.LockScreen = .T.
		FOR i = 1 to THIS.Parent.lstSelected.ListCount
			THIS.Parent.lstSource.AddItem(THIS.Parent.lstSelected.List(m.i))
		ENDFOR
		THIS.Parent.lstSelected.Clear
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE lstSelected.DblClick
		THIS.Parent.lstSource.AddItem(This.List(This.ListIndex))
		This.RemoveItem(This.ListIndex)
		
	ENDPROC

	PROCEDURE lstSelected.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		IF oSource.Name != THIS.Name
			THIS.Parent.cmdAdd.Click
		ENDIF
		
	ENDPROC

	PROCEDURE lstSelected.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		DO CASE
			CASE nState = 0 && Enter
				oSource.DragIcon = THIS.Parent.CanDropIcon
			CASE nState = 1 && Leave
				oSource.DragIcon = THIS.Parent.NoDropIcon
		ENDCASE
		
	ENDPROC

	PROCEDURE lstSelected.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 63 AND nShiftAltCtrl = 1
			THIS.Parent.SelectAll(THIS)
		ENDIF
	ENDPROC

	PROCEDURE lstSelected.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		THIS.Parent.MouseX = nXCoord
		THIS.Parent.MouseY = nYCoord
		
	ENDPROC

	PROCEDURE lstSelected.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF nButton = 1 && Left Mouse
			IF ABS(nXCoord - THIS.Parent.MouseX) > THIS.Parent.DragThreshold OR ;
					ABS(nYCoord - THIS.Parent.MouseY) > THIS.Parent.DragThreshold
				THIS.Drag
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE lstSource.DblClick
		THIS.Parent.lstSelected.AddItem(This.List(This.ListIndex))
		This.RemoveItem(This.ListIndex)
		
	ENDPROC

	PROCEDURE lstSource.DragDrop
		LPARAMETERS oSource, nXCoord, nYCoord
		IF oSource.Name != THIS.Name
			THIS.Parent.cmdRemove.Click
		ENDIF
		
	ENDPROC

	PROCEDURE lstSource.DragOver
		LPARAMETERS oSource, nXCoord, nYCoord, nState
		DO CASE
			CASE nState = 0 && Enter
				oSource.DragIcon = THIS.Parent.CanDropIcon
			CASE nState = 1 && Leave
				oSource.DragIcon = THIS.Parent.NoDropIcon
		ENDCASE
		
		
	ENDPROC

	PROCEDURE lstSource.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode = 63 AND nShiftAltCtrl = 1
			THIS.Parent.SelectAll(THIS)
		ENDIF
	ENDPROC

	PROCEDURE lstSource.MouseDown
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		THIS.Parent.MouseX = nXCoord
		THIS.Parent.MouseY = nYCoord
		
	ENDPROC

	PROCEDURE lstSource.MouseMove
		LPARAMETERS nButton, nShift, nXCoord, nYCoord
		IF nButton = 1 && Left Mouse
			IF ABS(nXCoord - THIS.Parent.MouseX) > THIS.Parent.DragThreshold OR ;
					ABS(nYCoord - THIS.Parent.MouseY) > THIS.Parent.DragThreshold
				THIS.Drag
			ENDIF
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _resizable AS _custom OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addtoarray
		*m: adjustcontrols		&& Call from resize event of a form to adjust the placement and size of contained objects.
		*m: loopthroughcontrols
		*m: reset		&& Resets the Timer control so that it starts counting from 0.
		*m: setsize
		*p: initialformheight
		*p: initialformwidth
		*p: initialresize		&& Is this the first time the controls are being adjusted?
		*a: acontrolstats[1,5]
	*</DefinedPropArrayMethod>

	PROTECTED acontrolstats,initialformheight,initialformwidth,initialresize
	Height = 19
	initialformheight = 0
	initialformwidth = 0
	initialresize = .T.		&& Is this the first time the controls are being adjusted?
	Name = "_resizable"
	Width = 27
	
	PROTECTED PROCEDURE addtoarray
		LPARAMETERS oControl
		LOCAL nLen
		nLen = ALEN(THIS.aControlStats,1)
		THIS.aControlStats[nLen,1] = oControl.Top / THIS.InitialFormHeight
		THIS.aControlStats[nLen,2] = oControl.Left / THIS.InitialFormWidth
		THIS.aControlStats[nLen,3] = oControl.Height / THIS.InitialFormHeight
		THIS.aControlStats[nLen,4] = oControl.Width / THIS.InitialFormWidth
		THIS.aControlStats[nLen,5] = IIF(TYPE("oControl.FontSize") = 'U', 0, oControl.FontSize)
		DIMENSION THIS.aControlStats[nLen+1, 5]
		
	ENDPROC

	PROCEDURE adjustcontrols		&& Call from resize event of a form to adjust the placement and size of contained objects.
		IF THIS.InitialResize
			THIS.LoopThroughControls("INITIALIZE_AND_ADJUST")
			THIS.InitialResize = .F.
		ELSE
			THIS.LoopThroughControls("ADJUST")
		ENDIF
	ENDPROC

	PROCEDURE Init
		THIS.InitialFormHeight = THISFORM.Height
		THIS.InitialFormWidth = THISFORM.Width
	ENDPROC

	PROTECTED PROCEDURE loopthroughcontrols
		LPARAMETERS cTask
		* Valid parameters for cTask are 'Initialize_And_Adjust' and 'Adjust'
		
		LOCAL nOldDecimal, nPos, i, j, k, oControl 
		
		cTask = UPPER(cTask)
		
		nOldDecimal = SET("DECIMAL")
		SET DECIMAL TO 4
		
		#define BASE_CLASS "Commandbutton Combobox Checkbox Listbox Form Grid Textbox Label Shape Editbox Olecontrol Pageframe Image Spinner"
		
		nPos = 0
		THISFORM.LockScreen = .T.
		FOR m.i = 1 TO THISFORM.ControlCount
			oControl = THISFORM.Controls[m.i]
			IF oControl.Baseclass$BASE_CLASS
				nPos = nPos + 1
				DO CASE
					CASE cTask = 'INITIALIZE_AND_ADJUST'
						THIS.AddToArray(oControl)
						THIS.SetSize(oControl, nPos)
					CASE cTask = 'ADJUST'
						THIS.SetSize(oControl, nPos)
				ENDCASE
			ENDIF
			*A pageframe can contain only pages
			IF THISFORM.Controls[m.i].Baseclass$"Pageframe"
				*Loop through each page of the pageframe
				FOR m.j = 1 TO THISFORM.Controls[m.i].PageCount
					WITH THISFORM.Controls[m.i].pages[m.j]
						*loop through all the controls on the page
						FOR m.k = 1 TO .ControlCount
							IF .Controls[m.k].Baseclass$BASE_CLASS
								nPos = nPos + 1
								DO CASE
									CASE cTask = 'INITIALIZE_AND_ADJUST'
										THIS.AddToArray(.Controls[m.k])
										THIS.SetSize(.Controls[m.k], nPos)
									CASE cTask = 'ADJUST'
										THIS.SetSize(.Controls[m.k], nPos)
								ENDCASE
							ENDIF
						ENDFOR
					ENDWITH
				ENDFOR
			ENDIF			
		ENDFOR
		
		THISFORM.LockScreen = .F.
		SET DECIMAL TO nOldDecimal
	ENDPROC

	PROCEDURE reset		&& Resets the Timer control so that it starts counting from 0.
		THIS.InitialResize = .T.
		DIMENSION THIS.aControlStats[1,5]
	ENDPROC

	PROTECTED PROCEDURE setsize
		LPARAMETERS oControl, nPos
		oControl.Top = THISFORM.Height * THIS.aControlStats[nPos,1]
		oControl.Left = THISFORM.Width * THIS.aControlStats[nPos,2]
		oControl.Width = THISFORM.Width * THIS.aControlStats[nPos,4]
		IF !oControl.Baseclass $ "Textbox Spinner"
			oControl.Height = THISFORM.Height * THIS.aControlStats[nPos,3]
		ENDIF
		
	ENDPROC

ENDDEFINE
