*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_regexp.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _regexp AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: clear		&& Clears all values
		*m: execute		&& Tests the pattern against the string
		*p: pattern		&& Contains the pattern (regular expression)
		*a: matches[1,0]		&& Array containing the results of the string test
	*</DefinedPropArrayMethod>

	HIDDEN AddObject,ClassLibrary,CloneObject,Comment,ControlCount,Controls,Destroy,NewObject,Objects,ParentClass,Picture,ReadExpression,ReadMethod,RemoveObject,ResetToDefault,SaveAsClass,ShowWhatsThis,WriteExpression,WriteMethod
	Height = 25
	Name = "_regexp"
	pattern = *		&& Contains the pattern (regular expression)
	Width = 28
	
	PROCEDURE clear		&& Clears all values
		this.pattern = "*"
		this.matches = .f.
	ENDPROC

	PROCEDURE execute		&& Tests the pattern against the string
		LParameters tcStr, tlCaseMatters
		
		Local loRegEx, loMatch, loMatches, i
		
		loRegEx = CreateObject("VBScript.RegExp")
		loRegEx.pattern = this.pattern
		loRegEx.ignoreCase = !tlCaseMatters
		loRegEx.global = .T.
		
		loMatches = loRegEx.execute(tcStr)
		Dimension this.matches[Max(loMatches.count,1),2]
		taMatchInfo = .F.
		
		i = 1
		For Each loMatch In loMatches
			this.matches[i, 1] = loMatch.firstIndex + 1   && fox strings are not zero-based
			this.matches[i, 2] = loMatch.value
			i = i + 1
		EndFor
		
		loMatches = .F.
		loRegEx = .F.
		
		Return i -1
	ENDPROC

ENDDEFINE
