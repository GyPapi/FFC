*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_datanav.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _basicnavbtns AS _container OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\vcr.bmp" ClassIcon="graphics\vcr.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Vcrprevious" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Vcrnext" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setdefault
		*p: lastselect		&& Last selected alias.
		*p: manyalias		&& Alias of child table in 1-Many form.
		*p: manykey		&& Key of child table in 1-Many form.
		*p: tablealias		&& Table alias to move record pointer.
	*</DefinedPropArrayMethod>

	Height = 25
	Name = "_basicnavbtns"
	Width = 48

	ADD OBJECT 'Vcrnext' AS _cmdnext WITH ;
		Height = 24, ;
		Left = 24, ;
		Name = "Vcrnext", ;
		Picture = graphics\next.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Vcrprevious' AS _cmdprevious WITH ;
		Height = 24, ;
		Left = 0, ;
		Name = "Vcrprevious", ;
		Picture = graphics\previous.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Init
		this.SetDefault(this.VCRPrevious)
		this.SetDefault(this.VCRNext)
		IF TYPE('thisform')=='O'
			thisform.ShowTips=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE setdefault
		LPARAMETERS oBtn
		oBtn.LastSelect=this.LastSelect
		oBtn.TableAlias=this.TableAlias
		oBtn.ManyAlias=this.ManyAlias
		oBtn.ManyKey=this.ManyKey
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _cmdbottom AS _cmdnavbtn OF "_datanav.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\bottom.bmp" ClassIcon="graphics\bottom.bmp" />

	Height = 24
	Name = "vcrbottom"
	Picture = graphics\bottom.bmp
	ToolTipText = "Bottom"
	Width = 29
	
	PROCEDURE Click
		IF NOT this.SetSession()
			RETURN .F.
		ENDIF
		GO BOTTOM
		this.RefreshForm()
		RETURN
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _cmdnavbtn AS _commandbutton OF "_base.vcx" 		&& Abstract VCR command button.
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: refreshform		&& Refreshes current form.
		*m: setsession
		*m: updatemany
		*p: lastselect		&& Last selected alias.
		*p: manyalias		&& Alias of child table in 1-Many form.
		*p: manykey		&& Key of child table in 1-Many form.
		*p: tablealias		&& Table alias to move record pointer.
	*</DefinedPropArrayMethod>

	Caption = ""
	FontSize = 10
	ForeColor = 0,0,0
	Height = 24
	lastselect = 1		&& Last selected alias.
	manyalias = 		&& Alias of child table in 1-Many form.
	manykey = 		&& Key of child table in 1-Many form.
	Name = "_cmdnavbtn"
	tablealias = 		&& Table alias to move record pointer.
	Width = 29
	
	PROCEDURE refreshform		&& Refreshes current form.
		IF NOT EMPTY(this.ManyAlias) AND NOT EMPTY(this.ManyKey)
			THIS.UpdateMany()	&&special handling for 1-Many side if needed.
		ENDIF
		DO CASE
			CASE TYPE('thisformset')=='O'
				thisformset.Refresh()
			CASE TYPE('_screen.ActiveForm')=='O'
				_screen.ActiveForm.Refresh()
		ENDCASE
		SELECT (this.LastSelect)
		RETURN
		
	ENDPROC

	PROCEDURE setsession
		IF TYPE('_screen.ActiveForm')#'O'
			RETURN .F.
		ENDIF
		IF NOT TYPE('thisformset')=='O'
			***	SET SESSION TO (_screen.ActiveForm.DataSessionID)
		ENDIF
		this.LastSelect=SELECT()
		IF NOT EMPTY(this.TableAlias)
			IF NOT USED(this.TableAlias)
				RETURN .F.
			ENDIF
			SELECT (this.TableAlias)
		ENDIF
		IF NOT USED()
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE updatemany
	ENDPROC

ENDDEFINE

DEFINE CLASS _cmdnext AS _cmdnavbtn OF "_datanav.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\next.bmp" ClassIcon="graphics\next.bmp" />

	Height = 24
	Name = "_cmdnext"
	Picture = graphics\next.bmp
	ToolTipText = "Next"
	Width = 29
	
	PROCEDURE Click
		IF NOT this.SetSession()
			RETURN .F.
		ENDIF
		IF NOT EOF()
			SKIP
		ENDIF
		IF EOF()
			SKIP -1
		ENDIF
		this.RefreshForm()
		RETURN
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _cmdprevious AS _cmdnavbtn OF "_datanav.vcx" 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\previous.bmp" ClassIcon="graphics\previous.bmp" />

	Height = 24
	Name = "_cmdprevious"
	Picture = graphics\previous.bmp
	ToolTipText = "Previous"
	Width = 29
	
	PROCEDURE Click
		IF NOT this.SetSession()
			RETURN .F.
		ENDIF
		IF NOT BOF()
			SKIP -1
		ENDIF
		this.RefreshForm()
		RETURN
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _cmdtop AS _cmdnavbtn OF "_datanav.vcx" 		&& VCR Top.
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\top.bmp" ClassIcon="graphics\top.bmp" />

	Caption = ""
	Height = 24
	Name = "_cmdtop"
	Picture = graphics\top.bmp
	TabIndex = 1
	ToolTipText = "Top"
	Width = 29
	
	PROCEDURE Click
		IF NOT this.SetSession()
			RETURN .F.
		ENDIF
		GO TOP
		this.RefreshForm()
		RETURN
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _datachecker AS _custom OF "_base.vcx" 		&& manages conflicts
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\checker.bmp" ClassIcon="graphics\checker.bmp" />

	#INCLUDE "_data.h"
	*<DefinedPropArrayMethod>
		*m: checkconflicts		&& Notifies a user if someone else has changed the data in the table after he or she began editing a record.
		*m: handlerecord		&& Compares the current value, old value, and original value of each field, displaying a messagebox if a change or conflict is detected.
		*m: string		&& Returns type 'c' equivalent of passed value
		*m: verifychanges		&& Prompts a user to save all changes made to a table or record.
		*m: verifyeachchange		&& Prompts a user to confirm each change he or she made.
	*</DefinedPropArrayMethod>

	Height = 15
	Name = "_datachecker"
	Width = 23
	
	PROCEDURE checkconflicts		&& Notifies a user if someone else has changed the data in the table after he or she began editing a record.
		*---------------------------------------------------------------*
		*  Checks to see whether another user has changed the value 
		*  stored in a table.  If so, calls HandleRecord to display
		*  the new value and allow the user to decide what to do.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made User-Specified Changes
		*	 2 -- Unable to Make Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		LOCAL lnSuccess, llnRec
		m.lnSuccess = 0  
		
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)				 && Data has changed
					m.lnSuccess = THIS.HandleRecord(0)
				ENDIF	
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				m.llnRec = GETNEXTMODIFIED(0)
				DO WHILE m.llnRec > 0
					GO m.llnRec
					m.lnSuccess = IIF(m.lnSuccess != 2, THIS.HandleRecord(0), 2)
					m.llnRec = GETNEXTMODIFIED(m.llnRec)	
				ENDDO
			OTHERWISE									 && no buffering
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		RETURN m.lnSuccess
	ENDPROC

	PROCEDURE handlerecord		&& Compares the current value, old value, and original value of each field, displaying a messagebox if a change or conflict is detected.
		*---------------------------------------------------------------*
		*  This method is called from the CheckConflicts method and the 
		*  VerifyEachChange method.  It loops through each field in the
		*  current record and compares the current value with the value
		*  stored in the table. If a value of 1 is passed to this method,
		*  the method also compares the current value with the value in
		*  the field before user made any edits.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Change Made to the Current Value
		*    1 -- Successfully Made User-Specified Change
		*	 2 -- Unable to Make User-Specifed Change
		*---------------------------------------------------------------*
		
		LPARAMETERS lnScope
		
		*--Valid values for lnScope:
		* 	0 - Only manage conflicts   && default
		*   1 - Also prompt for changed values
		
		* Verify parameter
		IF TYPE("m.lnScope") != "N"
			m.lnScope = 0 
		ENDIF
		IF !BETWEEN(m.lnScope, 0, 1)
			WAIT WINDOW WINDMSG_LOC
		ENDIF
		
		LOCAL lnChoice, lnField, lcField, luOldVal, luCurVal, luField, llMadeChange, llSuccess
		m.llMadeChange = .F.
		m.llSuccess = .T.
		
		* refresh current record in views before checking for conflicts
		IF CURSORGETPROP('SourceType') != 3 && not a local table
			=REFRESH()
		ENDIF
		
		* Check each field in the record for conflict or value change
		FOR m.lnField = 1 to FCOUNT()
			m.lnChoice = 0
			
			m.lcField = FIELD(m.lnField)
			IF TYPE(m.lcField) = "G"
				LOOP && Can't check general fields
			ENDIF
			m.luOldVal = OLDVAL(m.lcField)
			m.luCurVal = CURVAL(m.lcField)
			
			DO CASE
				* -----< check for conflicts only >--------
				CASE m.lnScope = 0
					IF m.luOldVal != m.luCurVal
						m.llMadeChange = .T.  
						m.lnChoice = MESSAGEBOX(VALCHG1_LOC + CR_LOC + FIELD_LOC + lcField + CR_LOC + ;
						RECORD_LOC + ALLTRIM(STR(RECNO())) + ;
							IIF(TYPE("m.lcField") != "M", CR_LOC + CR_LOC + ORG_LOC + THIS.String(m.luOldVal) + ;
							CR_LOC + CUR_LOC + THIS.String(m.luCurVal) + ;
							CR_LOC + CHG_LOC + THIS.String(EVAL(m.lcField)), CR_LOC + CR_LOC + m.lcField + MEMO_LOC) + ;
							CR_LOC + CR_LOC + SAVE_LOC, + 3+48+0, CONFLICT_LOC)					
					ENDIF
				* -----< check for conflicts and verify all changes >--------
				CASE m.lnScope = 1 && Verify all changes
					m.luField = EVAL(m.lcField)
					IF m.luOldVal != m.luField OR m.luCurVal != m.luField
						m.llMadeChange = .T.  
						m.lnChoice = MESSAGEBOX(VALCHG2_LOC + CR_LOC + FIELD_LOC + m.lcField + CR_LOC + ;
						RECORD_LOC + ALLTRIM(STR(RECNO())) + ;
							IIF(TYPE("m.lcField") != "M", CR_LOC + CR_LOC + ORG_LOC + THIS.String(m.luOldVal) + ;
							CR_LOC + CUR_LOC + THIS.String(m.luCurVal) + ;
							CR_LOC + CHG_LOC + THIS.String(EVAL(m.lcField)), CR_LOC  + CR_LOC + m.lcField + MEMO_LOC) + ;
						CR_LOC + CR_LOC + SAVE_LOC, + 3+48+0, VERIFY_LOC)
					ENDIF
			ENDCASE
			DO CASE
			CASE m.lnChoice = 7 && No, don't save changes
				REPLACE (m.lcField) WITH m.luCurVal
			CASE m.lnChoice = 2 && Cancel, restore original value
				REPLACE (m.lcField) WITH m.luOldVal
			ENDCASE
		ENDFOR
		IF m.llMadeChange
			m.llSuccess = TABLEUPDATE(.F., .T.)
			RETURN IIF(m.llSuccess, 1, 2)
		ELSE
			RETURN 0 
		ENDIF
		
	ENDPROC

	PROCEDURE string		&& Returns type 'c' equivalent of passed value
		*---------------------------------------------------------------*
		*  This method is called from the HandleRecord method.  It 
		*  returns the character equivalent of the value passed in as a
		*  parameter.  If a memo field is passed in, a notice to this
		*  effect is returned rather than the value in the memo field so
		*  that potentially large amounts of text aren't displayed in the 
		*  messagebox.
		*---------------------------------------------------------------*
		
		LPARAMETERS luValue
		LOCAL uType
		
		m.uType = TYPE('m.luValue')
		DO CASE
			CASE m.uType = 'C'
				RETURN ALLTRIM(m.luValue)
			CASE INLIST(m.uType, 'N', 'Y')
				RETURN ALLTRIM(STR(m.luValue))
			CASE m.uType = 'D'
				RETURN DTOC(m.luValue)
			CASE m.uType = 'T'
				RETURN TTOC('m.luValue')
			CASE m.uType = 'L'
				RETURN IIF(m.luValue, '.T.', '.F.')
			CASE uType = 'M'
				RETURN 'Memo field'
		ENDCASE
	ENDPROC

	PROCEDURE verifychanges		&& Prompts a user to save all changes made to a table or record.
		*---------------------------------------------------------------*
		*  If any changes have been made to the table or record, prompt the
		*  user to save the changes.  If the user says 'yes,' all changes
		*  are saved.  Any changes made to the data by other users after
		*  this user made the change and before the change was committed
		*  will be lost.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made All User Changes
		*	 2 -- Unable to Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		LOCAL lnChoice, llMadeChange, lnSuccess
		m.llMadeChange = .F.
		m.lnSuccess = 0
		
		* If the user has changed anything, prompt to save or discard changes
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)
					m.llMadeChange = .T.
				ENDIF
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				IF GETNEXTMODIFIED(0) > 0
					m.llMadeChange = .T.
				ENDIF
			OTHERWISE
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		
		IF m.llMadeChange
			m.lnChoice = MESSAGEBOX(SAVECHG_LOC, 4+32, SAVECHG2_LOC)
			IF m.lnChoice = 6 && Yes
				m.lnSuccess = IIF(TABLEUPDATE(.T.,.T.), 1, 2)
			ELSE
				=TABLEREVERT(.T.)
			ENDIF
		ENDIF	
		RETURN m.lnSuccess
	ENDPROC

	PROCEDURE verifyeachchange		&& Prompts a user to confirm each change he or she made.
		*--------------------------------------------------------------------
		*  If any changes have been made to the table or record, for each
		*  change, display the old value and the new value, prompting the
		*  user to save or discard the change.  Conflict management is also
		*  included in the HandleRecord method.
		*
		*  RETURNS NUMERIC VALUES:
		*    0 -- No Changes Made to the Current Values
		*    1 -- Successfully Made User-Specified Changes
		*	 2 -- Unable to Write One or More User-Specifed Changes to Table
		*---------------------------------------------------------------*
		
		LOCAL lnSuccess, lnRec
		m.lnSuccess = 0
		
		DO CASE
			CASE INLIST(CURSORGETPROP('Buffering'), 2,3) && Row Buffering
				IF '2' $ GETFLDSTATE(-1)				 && Data has changed
					m.lnSuccess = THIS.HandleRecord(1)
				ENDIF	
			CASE INLIST(CURSORGETPROP('Buffering'), 4,5) && Table Buffering
				m.lnRec = GETNEXTMODIFIED(0)
				DO WHILE m.lnRec > 0
					GO m.lnRec
					m.lnSuccess = IIF(m.lnSuccess != 2, THIS.HandleRecord(1), 2)
					m.lnRec = GETNEXTMODIFIED(m.lnRec)	
				ENDDO
			OTHERWISE									 && No Buffering
				WAIT WINDOW NOBUFF_LOC NOWAIT
		ENDCASE
		RETURN m.lnSuccess
	ENDPROC

ENDDEFINE

DEFINE CLASS _datanavbtns AS _container OF "_base.vcx" 		&& VCR Buttons with Data Checker
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\vcr.bmp" ClassIcon="graphics\vcr.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdTop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdPrior" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBottom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Datachecker1" UniqueID="" Timestamp="" />

	#INCLUDE "_data.h"
	*<DefinedPropArrayMethod>
		*m: beforerecordpointermoved		&& Called before record pointer is moved.
		*m: enabledisablebuttons		&& Enables/disables buttons based on record pointer location.
		*m: recordpointermoved		&& Called each time the record pointer is moved, basically providing a new event for the class.
		*p: enabledisableoninit		&& Whether to enable/disable buttons when first loaded.
		*p: skiptable		&& The table to move the record pointer in .
	*</DefinedPropArrayMethod>

	BackColor = 192,192,192
	BorderWidth = 1
	enabledisableoninit = .T.		&& Whether to enable/disable buttons when first loaded.
	Height = 24
	Name = "_datanavbtns"
	skiptable = 		&& The table to move the record pointer in .
	Width = 104

	ADD OBJECT 'cmdBottom' AS _commandbutton WITH ;
		Caption = ">|", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 78, ;
		Name = "cmdBottom", ;
		TabIndex = 4, ;
		ToolTipText = "Bottom", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdNext' AS _commandbutton WITH ;
		Caption = ">", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 52, ;
		Name = "cmdNext", ;
		TabIndex = 3, ;
		ToolTipText = "Next", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdPrior' AS _commandbutton WITH ;
		Caption = "<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 26, ;
		Name = "cmdPrior", ;
		TabIndex = 2, ;
		ToolTipText = "Prior", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdTop' AS _commandbutton WITH ;
		Caption = "|<", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		FontSize = 11, ;
		Height = 24, ;
		Left = 0, ;
		Name = "cmdTop", ;
		TabIndex = 1, ;
		ToolTipText = "Top", ;
		Top = 0, ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Datachecker1' AS _datachecker WITH ;
		Height = 15, ;
		Left = 44, ;
		Name = "Datachecker1", ;
		Top = 6, ;
		Width = 23
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="custom" />
	
	PROCEDURE beforerecordpointermoved		&& Called before record pointer is moved.
		IF !EMPTY(This.SkipTable)
			SELECT (This.SkipTable)
		ENDIF
		
	ENDPROC

	PROCEDURE enabledisablebuttons		&& Enables/disables buttons based on record pointer location.
		LOCAL nRec, nTop, nBottom
		IF EMPTY(ALIAS()) OR EOF() && Table empty or no records match a filter
			THIS.SetAll("Enabled", .F.)
			RETURN
		ENDIF
		
		nRec = RECNO()
		GO TOP
		nTop = RECNO()
		GO BOTTOM
		nBottom = RECNO()
		GO nRec
		
		DO CASE
			CASE nRec = nTop
				THIS.cmdTop.Enabled = .F.
				THIS.cmdPrior.Enabled = .F.
				THIS.cmdNext.Enabled = .T.
				THIS.cmdBottom.Enabled = .T.
			CASE nRec = nBottom
				THIS.cmdTop.Enabled = .T.
				THIS.cmdPrior.Enabled = .T.
				THIS.cmdNext.Enabled = .F.
				THIS.cmdBottom.Enabled = .F.
			OTHERWISE
				THIS.SetAll("Enabled", .T.)
		ENDCASE
	ENDPROC

	PROCEDURE Error
		Parameters nError, cMethod, nLine
		
		LOCAL cNewTable, nConflictStatus, lcMsg, lnAnswer 
		
		DO CASE
			CASE nError = 13 && Alias not found
			*-----------------------------------------------------------
			* If the user tries to move the record pointer when no
			* table is open or when an invalid SkipTable property has been
			* specified, prompt the user for a table to open.
			*-----------------------------------------------------------
				cNewTable = GETFILE('DBF', SELTABLE_LOC, OPEN_LOC)
				IF FILE(cNewTable)
					SELECT 0
					USE (cNewTable)
					This.SkipTable = ALIAS()
				ELSE
					This.SkipTable = ""
				ENDIF
			CASE nError = 1585 
			*-----------------------------------------------------------
			* Update conflict handled by datachecker class.
			*-----------------------------------------------------------
				nConflictStatus = THIS.DataChecker1.CheckConflicts()
				IF nConflictStatus = 2
					WAIT WINDOW CONFLICT_LOC
				ENDIF
			OTHERWISE
			*-----------------------------------------------------------
			* Display information about an unanticipated error.
			*-----------------------------------------------------------
				lcMsg = NUM_LOC + ALLTRIM(STR(nError)) + CR_LOC + CR_LOC + ;
						MSG_LOC + MESSAGE( )+ CR_LOC + CR_LOC + ;
						PROG_LOC + PROGRAM(1)
				lnAnswer = MESSAGEBOX(lcMsg, 2+48+512)
				DO CASE
					CASE lnAnswer = 3 &&Abort
						CANCEL
					CASE lnAnswer = 4 &&Retry
						RETRY
					OTHERWISE
						RETURN
				ENDCASE
		ENDCASE
		
	ENDPROC

	PROCEDURE Init
		IF THIS.EnableDisableOnInit
			THIS.EnableDisableButtons
		ENDIF
	ENDPROC

	PROCEDURE recordpointermoved		&& Called each time the record pointer is moved, basically providing a new event for the class.
		IF TYPE('_VFP.ActiveForm') = 'O'
			_VFP.ActiveForm.Refresh
		ENDIF
		
	ENDPROC

	PROCEDURE cmdBottom.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		GO BOTTOM
		
		THIS.Parent.EnableDisableButtons
		THIS.Parent.RecordPointerMoved
	ENDPROC

	PROCEDURE cmdBottom.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdNext.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		SKIP 1
		IF EOF()
			GO BOTTOM
		ENDIF
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdNext.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdPrior.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		SKIP -1
		IF BOF()
			GO TOP
		ENDIF
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdPrior.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE cmdTop.Click
		THIS.Parent.BeforeRecordPointerMoved
		
		GO TOP
		
		THIS.Parent.RecordPointerMoved
		THIS.Parent.EnableDisableButtons
		
	ENDPROC

	PROCEDURE cmdTop.Error
		Parameters nError, cMethod, nLine
		This.Parent.Error(nError, cMethod, nLine)
	ENDPROC

ENDDEFINE

DEFINE CLASS _navbtns AS _container OF "_base.vcx" 		&& Standard VCR Buttons
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="graphics\vcr.bmp" ClassIcon="graphics\vcr.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Vcrtop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Vcrprevious" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Vcrnext" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Vcrbottom" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setdefault
		*p: lastselect		&& Last selected work area.
		*p: manyalias		&& Alias
		*p: manykey
		*p: tablealias		&& Alias of workarea.
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 0
	builder = vcrtlbrb.scx
	Height = 25
	lastselect = 1		&& Last selected work area.
	manyalias = 		&& Alias
	manykey = 
	Name = "_navbtns"
	tablealias = 		&& Alias of workarea.
	Width = 97

	ADD OBJECT 'Vcrbottom' AS _cmdbottom WITH ;
		Height = 24, ;
		Left = 72, ;
		Name = "Vcrbottom", ;
		Picture = graphics\bottom.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Vcrnext' AS _cmdnext WITH ;
		Height = 24, ;
		Left = 48, ;
		Name = "Vcrnext", ;
		Picture = graphics\next.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Vcrprevious' AS _cmdprevious WITH ;
		Height = 24, ;
		Left = 24, ;
		Name = "Vcrprevious", ;
		Picture = graphics\previous.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'Vcrtop' AS _cmdtop WITH ;
		Height = 24, ;
		Left = 0, ;
		Name = "Vcrtop", ;
		Picture = graphics\top.bmp, ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_datanav.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Init
		this.SetDefault(this.VCRTop)
		this.SetDefault(this.VCRPrevious)
		this.SetDefault(this.VCRNext)
		this.SetDefault(this.VCRBottom)
		IF TYPE('thisform')=='O'
			thisform.ShowTips=.T.
		ENDIF
		
		
	ENDPROC

	PROCEDURE setdefault
		LPARAMETERS oBtn
		oBtn.LastSelect=this.LastSelect
		oBtn.TableAlias=this.TableAlias
		oBtn.ManyAlias=this.ManyAlias
		oBtn.ManyKey=this.ManyKey
	ENDPROC

ENDDEFINE
