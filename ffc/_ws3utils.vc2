*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_ws3utils.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _webservices AS _custom OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: addfoxcode		&& Adds web service IntelliSense registration records.
		*m: alert		&& Displays alert messagebox.
		*m: autows		&& Creates automatic defaults for web service to be published.
		*m: checkvdirmap		&& Check for  Virtual Directory mappings for ISAPI.
		*m: checkwsdbf		&& Checks and creates if necessary the FOXWS web service table.
		*m: createvirdir		&& Creates a virtual directory for web service.
		*m: genasp		&& Generates an ASP for web service to be published (VBScript or JScript). Default is to use ISAPI and not ASP.
		*m: genws		&& Main routine to generate all the components necessary for a web service being published.
		*m: genwsdl		&& Generates WSDL and WSML files for web service being published.
		*m: getasp_js		&& Creates ASP using JScript.
		*m: getasp_vbs		&& Creates ASP using VBScript.
		*m: getports		&& Gets collection of ports (classes) in a WSDL file.
		*m: getprefs		&& Gets value of a preference stored in FOXWS web service table.
		*m: getproject		&& Locates project for specified COM server used as published web service.
		*m: getvirdirs		&& Gets collection of Virtual Directories in your IIS web server.
		*m: loadprefs		&& Loads saved preferences for a published web service.
		*m: loopvirdirs		&& Iterates through collection of virtual directories in IIS web server.
		*m: saveprefs		&& Saves preferences for a published web service to FOXWS.
		*m: updateprefs		&& Updates the FOXWS web services table with a default setting.
		*m: vartypetostring		&& Returns data type (string) from numeric reference.
		*p: cappname		&& Application name used in ASP file.
		*p: caspfile		&& ASP file name.
		*p: casplistener		&& ASP listener as URL.
		*p: cclass		&& Name of class.
		*p: ccomfile		&& Name of COM file being published as web service.
		*p: cdeflocation		&& Name of default virdir location.
		*p: cerrormessage		&& Error message.
		*p: cisense		&& Name of type reference used for subscribed web service.
		*p: cproject		&& Name of project for published web service.
		*p: cservice		&& Name of service.
		*p: cserviceport		&& Service and port name for registered web service.
		*p: curi1		&& WSDL Namespace URI
		*p: curi2		&& Schema Type Definition Namespace URI
		*p: curi3		&& Message Namespace URI
		*p: curi4		&& Base SOAP Action URI
		*p: cwsalias		&& Alias of FOXWS table.
		*p: cwsdlfile		&& File name of FOXWS table.
		*p: cwsdllistener		&& WSDL file as URL reference.
		*p: cwsname		&& Web service name.
		*p: lchangephook		&& Whether project hook option was changed.
		*p: lgenasp		&& Whether to generate an ASP file.
		*p: lgenintellisense		&& Whether to generate IntelliSense records.
		*p: lgenwsdl		&& Whether to generate WSDL files.
		*p: lhaderror		&& Whether an error has happened.
		*p: lisensefailed		&& If IntelliSense failed.
		*p: lprefsexist		&& Whether preferences exist already for selected web service to be published.
		*p: lprefsloaded		&& Whether preferences are loaded for web service to be published.
		*p: lskipalerts		&& Whether to skip alerts.
		*p: lunicode		&& Whether to generate WSDL with Unicode (UTF-16) option.
		*p: luseisapi		&& Whether to use ISAPI or ASP as web service listener.
		*p: lusejscript		&& Whether to use JScript for ASP listener.
		*p: luselongtname		&& Whether to use long naming convention for filenames used for web service.
		*p: lusephook		&& Whether to use project hook for web service project.
		*p: lusingwizard		&& Whether the web service is used within the Wizard.
		*a: aints[1,0]		&& Array of interfaces.
		*a: amethods[1,0]		&& Array of methods.
		*a: aports[1,0]		&& Array of ports (classes).
		*a: avirdirs[1,2]		&& Array of virtual directories in IIS web server.
	*</DefinedPropArrayMethod>

	cappname = 		&& Application name used in ASP file.
	caspfile = 		&& ASP file name.
	casplistener = 		&& ASP listener as URL.
	cclass = 		&& Name of class.
	ccomfile = 		&& Name of COM file being published as web service.
	cdeflocation = 		&& Name of default virdir location.
	cerrormessage = 		&& Error message.
	cisense = 		&& Name of type reference used for subscribed web service.
	cproject = 		&& Name of project for published web service.
	cservice = 		&& Name of service.
	cserviceport = 		&& Service and port name for registered web service.
	curi1 = 		&& WSDL Namespace URI
	curi2 = 		&& Schema Type Definition Namespace URI
	curi3 = 		&& Message Namespace URI
	curi4 = 		&& Base SOAP Action URI
	cwsalias = 		&& Alias of FOXWS table.
	cwsdlfile = 		&& File name of FOXWS table.
	cwsdllistener = 		&& WSDL file as URL reference.
	cwsname = 		&& Web service name.
	Height = 23
	Name = "_webservices"
	Width = 111
	
	PROCEDURE addfoxcode		&& Adds web service IntelliSense registration records.
		LPARAMETERS tcWSDL, tlRefresh, tcWSML
		
		* Registers XML Web service for consumption in VFP
		LOCAL i, j, lcMethodStr,lcTipsStr,lcTips2Str, lcWSMLGTM
		LOCAL lcWSName,lcServicePort, lcService, lcPort, lcServiceDoc 
		LOCAL lcWSDL,lcWSML,lcID,ldDateTime,lnSaveArea, loXMLDOM, lcClass
		LOCAL oGen,loParts,loEnumParts,loMethod,loEnumMethods,loPort,loEnumPorts,loService,loEnumServices
		LOCAL lcDocStr, lcDocXPath, loNodes, lcMethodStr2, lFailXPath, lcGetType 
		
		STORE 0 TO loParts,loEnumParts,loMethod,loEnumMethods,loPort,loEnumPorts,loService,loEnumServices
		STORE "" TO lcURI,cMethodStr,lcTipsStr
		STORE "" TO lcWSDL_XML, lcWSML_XML, lcWSMLGTM
		
		THIS.lISenseFailed = .F.
		DIMENSION THIS.aPorts[1]
		THIS.aPorts=""
		
		lnSaveArea = SELECT()
		IF EMPTY(tcWSDL)
			RETURN .F.
		ENDIF
		
		lcWSDL = tcWSDL
		IF EMPTY(tcWSML)
			lcWSML = FORCEEXT(lcWSDL,"WSML")
		ENDIF
		
		* Load in class using XMLDOM Object
		loXMLDOM = CREATEOBJECT(MSXML4_CLASS)
		loXMLDOM.Async = .F.
		IF loXMLDOM.load(lcWSML)
			lcWSML_XML = loXMLDOM.XML
			IF ATC("GenericCustomTypeMapper",lcWSML_XML)#0
				lcWSMLGTM=lcWSML
			ENDIF
		ENDIF
		IF loXMLDOM.load(lcWSDL)
			lcWSDL_XML = loXMLDOM.XML
			* Need to use XPATH to get Documentation properties
			TRY
				loXMLDOM.setProperty("SelectionNamespaces", [xmlns:wsdl="] + loXMLDOM.documentElement.namespaceURI + ["])
			CATCH
				lFailXPath = .T.
			ENDTRY
		ENDIF
		
		* Iterate thru all Services, Ports and Methods
		oGen = CREATEOBJECTEX(WSDLREADER_CLASS,"","")
		
		* Retry several times in case this is in use.
		THIS.lIgnoreErrors = .T.
		FOR i = 1 TO 3
			THIS.lHaderror = .F.
			oGen.Load(lcWSDL,"") 		&& should not assume that all web services have a WSML file.
			IF !THIS.lHadError
				EXIT
			ENDIF
		ENDFOR
		THIS.lIgnoreErrors = .F.
		IF THIS.lHadError
			THIS.lHadError = .F.
			RETURN .F.
		ENDIF
		
		* Check Web Service table
		IF !THIS.CheckWSdbf()
			SELECT (lnSaveArea)
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		
		* Get Service object
		ogen.GetSoapServices(@loEnumServices)
		
		DO WHILE .T.
			loEnumServices.Next(1,@loService,1)
			IF VARTYPE(loService)#"O"
				EXIT
			ENDIF
			
			lcServiceDoc = ""
			THIS.cWSname = loService.Name
			lcWSName = THIS.cWSname
			lcServiceDoc = loService.Documentation
			
			* Add WSDL record to WS table
			lcID = SYS(2015)
			ldDateTime = DATETIME()
			LOCATE FOR UPPER(ALLTRIM(Name))==UPPER(ALLTRIM(lcWSName)) AND UPPER(TYPE)="W" AND; 
				UPPER(ALLTRIM(URI))==UPPER(ALLTRIM(lcWSDL)) AND !DELETED()
				
			IF FOUND()
				IF tlRefresh
					REPLACE Name WITH lcWSName,	;
						URI WITH lcWSDL, ;
						WSDL WITH lcWSDL_XML, ;
						WSML WITH lcWSML_XML, ;
						Timestamp WITH ldDateTime, ;
						UniqueID WITH lcID
				ENDIF
			ELSE
				INSERT INTO (THIS.cWSAlias) ;
					(Type,Name,URI,WSDL,WSML,TimeStamp,UniqueID) ;
					VALUES("W",lcWSName,lcWSDL,lcWSDL_XML,lcWSML_XML,ldDateTime,lcID)
			ENDIF
		
			* Get ports
			loEnumPorts=0
			loService.GetSoapPorts(@loEnumPorts)
			DO WHILE .T.
				loEnumPorts.Next(1,@loPort,1)
				IF VARTYPE(loPort)#"O"
					EXIT
				ENDIF
		
				lcServicePort = loPort.name
				* Let's get class name -- typically it is same as port name, however
				* with SOAP Toolkit. Note: the class name is used primarily as 
				* friendly name for display purposes
				lcClass = lcServicePort
				DO CASE
				CASE ATC(".asmx?wsdl",lcWSDL)#0 AND UPPER(RIGHT(lcClass,4))="SOAP"  && VS .NET service
					lcClass = LEFT(lcClass,LEN(lcClass)-4)
				CASE UPPER(RIGHT(lcClass,8))="SOAPPORT"								&& SOAP3 Toolkit
					lcClass = LEFT(lcClass,LEN(lcClass)-8)
				ENDCASE
		
				lcTipsStr=""
				lcMethodStr=""
				lcMethodStr2=""
		
				* Get Methods
				loPort.GetSoapOperations(@loEnumMethods)
				DO WHILE .T.
					STORE 0 TO loMethod,loEnumParts,loParts
					loEnumMethods.Next(1,@loMethod,1)
					IF VARTYPE(loMethod)#"O"
						EXIT
					ENDIF
					* Get method name
					IF ATC("UpdateSingleTable", loMethod.Name)#0
					ENDIF
					lcMethodStr = lcMethodStr + loMethod.Name + CRLF
					
					* Get documentation if any (need to use XPATH since STK3 doesn't support this)
					lcDocStr=""
					TRY
						IF !lFailXPath
							lcDocXPath = "//wsdl:portType[@name='" + lcServicePort + "']/wsdl:operation[@name='" + loMethod.Name + "']/wsdl:documentation"
							loNodes = loXMLDOM.selectNodes(lcDocXPath)
							IF loNodes.Length>0
								lcDocStr = loNodes.item(0).text
							ENDIF
						ENDIF
					CATCH
					ENDTRY
					lcMethodStr2 = lcMethodStr2 + loMethod.Name + " " + lcDocStr + CRLF
					
					loMethod.GetOperationParts(@loEnumParts)
					lcTips2Str = ""
					lcRetType = "VOID"
					DO WHILE .T.
						* Get parms
						loParts = 0
						loEnumParts.Next(1,@loParts,1)
						IF VARTYPE(loParts)#"O"
							EXIT
						ENDIF			
		
						* Check if parameter or return type is complex object
						IF EMPTY(loParts.elementType) AND VARTYPE(loParts.SchemaNode)="O"
							IF ATC(":schema", loparts.SchemaNode.xml)#0
								lcGetType = "Dataset"
							ELSE
								lcGetType = "XMLDOMNodeList"
							ENDIF
						ELSE
							lcGetType = loParts.elementType	
						ENDIF
		
						IF loParts.parameterOrder = -1  &&check for return value
							lcRetType = lcGetType 
						ELSE
							lcTips2Str = lcTips2Str + loParts.elementName + " AS "
							lcTips2Str = lcTips2Str + lcGetType
							IF loParts.IsInput = 1	&&byref call
								lcTips2Str = lcTips2Str + " @"
							ENDIF
							lcTips2Str = lcTips2Str + ", "
						ENDIF
					ENDDO
					lcTips2Str=ALLTRIM(lcTips2Str)
					IF RIGHT(lcTips2Str,1)=","
						lcTips2Str = SUBSTR(lcTips2Str,1,LEN(lcTips2Str)-1)
					ENDIF
					lcTipsStr = lcTipsStr + loMethod.Name + "(" + lcTips2Str + ")"
					lcTipsStr = lcTipsStr + " AS " + lcRetType + CRLF
		
				ENDDO	&&SoapOperations (Methods)
		
				* Add Class record to WS table
				lcID = SYS(2015)
				ldDateTime = DATETIME()
		
				LOCATE FOR UPPER(ALLTRIM(Name))==UPPER(ALLTRIM(lcWSName)) AND UPPER(TYPE)="C" AND ; 
					UPPER(ALLTRIM(URI))==UPPER(ALLTRIM(lcWSDL)) AND ;
					UPPER(ALLTRIM(Port))==UPPER(ALLTRIM(lcServicePort)) AND !DELETED()
				IF FOUND()
					IF tlRefresh
						REPLACE Name WITH lcWSName,	 ;
							Menu WITH lcMethodStr, ;
							Tips WITH lcTipsStr, ;
							URI WITH lcWSDL, ;
							WSML WITH lcWSMLGTM, ;
							Class WITH lcClass, ;
							Port WITH lcServicePort, ;
							Timestamp WITH ldDateTime, ;
							UniqueID WITH lcID,;
							Comfile WITH lcServiceDoc,;
							Prefs WITH lcMethodStr2 
					ENDIF
				ELSE
					INSERT INTO (THIS.cWSAlias) (Type, Name, Menu, Tips, URI, WSML, Class, Port, TimeStamp, UniqueID, Toolbox, Comfile, Prefs);
						VALUES("C", lcWSName, lcMethodStr, lcTipsStr, lcWSDL, lcWSMLGTM, lcClass, lcServicePort, ldDateTime, lcID, .T., lcServiceDoc, lcMethodStr2)
				ENDIF
				loEnumParts = 0
				loParts = 0
				loEnumMethods = 0
				loMethod = 0
				loPort = 0
			ENDDO	&&Ports
			loEnumPorts = 0
			loService = 0
		ENDDO	&&Service
		
		* Write out preferences
		THIS.Updateprefs("MENU",lcWSName,.T.)
		
		SELECT (lnSaveArea)
		
	ENDPROC

	PROCEDURE alert		&& Displays alert messagebox.
		LPARAMETERS tcMessage
		IF _VFP.StartMode#0 OR THIS.lSkipAlerts
			THIS.cErrorMessage = tcMessage
		ELSE
			MESSAGEBOX(tcMessage,16)
		ENDIF
		
	ENDPROC

	PROCEDURE autows		&& Creates automatic defaults for web service to be published.
		LPARAMETERS tcCOMFile, tcClass
		
		PRIVATE lcRetVal,lcRetVal2
		
		LOCAL lRetval, lnPos, loConfig, lcName, lcDefPath, lcName2
		LOCAL oTypelib, i, lnCount, laMethods, lcDefURI
		
		IF THIS.lPrefsLoaded
			RETURN
		ENDIF
		
		THIS.cClass = tcClass
		THIS.cCOMFile = tcCOMFile
		
		* Try to load prefs
		THIS.lPrefsExist = .F.
		IF THIS.LoadPrefs()
			THIS.lPrefsExist = .T.
			THIS.lPrefsLoaded = .T.
		ENDIF
		
		* Try to find project
		IF EMPTY(THIS.cProject)
			THIS.GetProject()
		ENDIF
		
		IF THIS.lPrefsLoaded
			RETURN
		ENDIF
		
		* Get methods
		DIMENSION laMethods[1]
		lnCount = 0
		oTypelib = NEWOBJECT("_typelib", ADDBS(JUSTPATH(THIS.ClassLibrary))+"_utility.vcx")
		oTypelib.cTypelib = THIS.cCOMFile
		lnCount = oTypelib.GetMethods(@laMethods, THIS.cClass,.F. ,.F. ,.T.)
		IF lnCount > 0
			DIMENSION THIS.aMethods[lnCount]
			FOR i = 1 TO lnCount
				THIS.aMethods[m.i] = laMethods[m.i,1]
			ENDFOR
		ENDIF
		
		* Get URI locations
		lcDefURI = THIS.cDeflocation
		lcDefPath=""
		
		IF EMPTY(lcDefURI)
			lRetval = THIS.GetPrefs("URI",@lcDefURI)
			IF !lRetval OR EMPTY(lcDefURI) OR ALLTRIM(lcDefURI)="*"
				* No default location selected, so prompt for one:
				lcRetval=""
				lcRetval2=""
				loConfig = NEWOBJECT("wsconfig",THIS.ClassLibrary,"","lcRetVal","lcRetVal2")
				loConfig.lDefaultMode = .F.
				loConfig.Show()
				lcDefURI = ALLTRIM(lcRetVal)
				lcDefPath = ALLTRIM(lcRetVal2)
				IF EMPTY(lcDefURI)
					RETURN .F.
				ENDIF
				* Need to recreate aVirDirs
				THIS.GetVirDirs()
			ELSE
				lcDefPath =  ALLTRIM(GETWORDNUM(lcDefURI, 2, CHR(13)))
				lcDefURI	 =  ALLTRIM(GETWORDNUM(lcDefURI, 1, CHR(13)))
			ENDIF
		ENDIF
		
		IF EMPTY(THIS.aVirDirs)
			THIS.GetVirDirs()
		ENDIF
		
		lnPos = ASCAN(THIS.aVirDirs,lcDefURI)
		IF lnPos = 0
			* Check for Localhost in default URI
			IF ATC("http://localhost/",lcDefURI)#0
				lnPos = ASCAN(THIS.aVirDirs, "http://" + ALLTRIM(GETWORDNUM(SYS(0),1)) + ;
					"/" + STREXTRACT(lcDefURI,"http://localhost/","",1,1))
			ELSE
				* User specified a different location and path.
			ENDIF
		ENDIF
		
		* Determine name here
		lcName = JUSTSTEM(tcCOMFile)
		IF !EMPTY(THIS.cClass)
			* Specify default naming convention for filenames. You usually want to avoid 
			* using long names since the naming convention is <<Server>> + "_" + <<Class>>. 
			* This is essentially the same as the ProgID which is hidden in the WSML file for
			* security purposes.
			IF VARTYPE(THIS.lUseLongtName)="L" AND THIS.lUseLongtName
				lcName = JUSTSTEM(tcCOMFile)+"_"+THIS.cClass
			ELSE
				lcName = THIS.cClass
			ENDIF
		ENDIF
		
		THIS.lPrefsLoaded = .T.
		
		* Set defaults
		THIS.lGenWSDL = .T.
		THIS.lUseIsapi = .T.
		THIS.lGenASP = .T.
		THIS.lGenIntelliSense = .T.
		IF VAL(OS(3))=4 AND INLIST(VAL(OS(4)),10,90)
			THIS.lGenIntelliSense = .F.
		ENDIF
		lcName2 = CHRTRAN(lcName," 	","_")   &&avoid URL names with space, tabs
		THIS.cASPListener = lcDefURI + lcName2 + ".ASP"
		THIS.cWSDLListener = lcDefURI + lcName2 + ".WSDL"
		IF lnPos=0
			*Could not find VDir on local machine so use specified one.
			THIS.cWSDLfile = ADDBS(lcDefPath) + lcName2 + ".WSDL"
			THIS.cASPfile = ADDBS(lcDefPath) + lcName2 + ".ASP"
		ELSE
			THIS.cWSDLfile = ADDBS(THIS.aVirDirs[lnPos+1]) + lcName2 + ".WSDL"
			THIS.cASPfile = ADDBS(THIS.aVirDirs[lnPos+1]) + lcName2 + ".ASP"
		ENDIF
		THIS.cAppName = lcName + APPNAME_SUFFIX
		THIS.lUseJScript = .F.
		THIS.cService = JUSTSTEM(THIS.cWSDLfile)
		
		* Limit to 24 chars (FOXCODE field)
		DO CASE
		CASE LEN(lcName) > 21
			THIS.cISense = LEFT(lcName,24)
		CASE LEN(lcName) + LEN(WS_LOC) + 1 <= 24
			THIS.cISense = lcName + " " + WS_LOC
		OTHERWISE
			THIS.cISense = lcName + "_WS"
		ENDCASE
		
		* Get Namespaces
		THIS.cURI1 = "http://tempuri.org/" + lcName + "/wsdl/"
		THIS.cURI2 = "http://tempuri.org/" + lcName + "/type/"
		THIS.cURI3 = "http://tempuri.org/" + lcName + "/message/"
		THIS.cURI4 = "http://tempuri.org/" + lcName + "/action/"
		
		RETURN
		
	ENDPROC

	PROCEDURE checkvdirmap		&& Check for  Virtual Directory mappings for ISAPI.
		LPARAMETERS tcVirDir
		* Vdir = "IIS://LocalHost/w3svc/1/Root/" + name...
		
		LOCAL oVdirObj, oShell, lcFile, lnPos, loErr
		LOCAL laMaps
		DIMENSION laMaps[1]
		
		IF VARTYPE(tcVirDir)#"C" OR EMPTY(tcVirDir)
			RETURN
		ENDIF
		
		TRY
			oVDirObj = GetObject(tcVirDir)
			
			* Add SOAP Toolkit 3.0 ISAPI Extension mapping
			laMaps = oVdirObj.ScriptMaps
		
			oShell = CreateObject("WScript.Shell")
			lcFile = oShell.RegRead(ISAPIKEY)
			IF FILE(lcFile) AND VARTYPE(oVDirObj)="O"
				* Check if extension is there
				lnPos = ASCAN(laMaps,".wsdl",-1,-1,-1,5)
				
				* Add SOAP Toolkit 3.0 ISAPI Extension mapping if not already registered or has different one.
				DO CASE
				CASE lnPos=0
					IF MESSAGEBOX(MB_UPDATEVDIR_LOC,36)=6
						DIMENSION laMaps[ALEN(laMaps)+1]
						laMaps[ALEN(laMaps)] = ".wsdl," + lcFile + ",1,GET,POST"
						COMARRAY(oVdirObj,10)
						oVdirObj.Put("ScriptMaps", @laMaps)
						oVdirObj.SetInfo()
					ENDIF
				CASE ATC(lcFile, laMaps[lnPos])=0
					IF MESSAGEBOX(MB_UPDATEVDIR2_LOC,36)=6
						laMaps[lnPos] = ".wsdl," + lcFile + ",1,GET,POST"
						COMARRAY(oVdirObj,10)
						oVdirObj.Put("ScriptMaps", @laMaps)
						oVdirObj.SetInfo()
					ENDIF
				ENDCASE		
			ENDIF
		CATCH TO loErr
		
			* Eat errors here since we do not need to detect for non-local vdirs.
		ENDTRY
	ENDPROC

	PROCEDURE checkwsdbf		&& Checks and creates if necessary the FOXWS web service table.
		* Add WS record to WS table
		LOCAL lcVFPWSDBF, lSafety, lnSaveArea, lcHomeFoxCode, lnFoxCodeVer
		
		lnFoxCodeVer=1
		lnSaveArea = SELECT()
		
		IF !EMPTY(THIS.cWSAlias) AND SELECT(THIS.cWSAlias)#0
			RETURN
		ENDIF
		lcVFPWSDBF = ADDBS(JUSTPATH(_FOXCODE)) + FOXWSDBF
		SELECT 0
		IF FILE(lcVFPWSDBF)
			USE (lcVFPWSDBF) SHARED AGAIN
			IF THIS.lHadError OR EMPTY(ALIAS())
				THIS.lHadError = .F.
				SELECT (lnSaveArea)
				RETURN .F.
			ENDIF
			* Check for valid format (allow for users to add extra fields
			IF FCOUNT() >= 15
				THIS.cWSAlias = ALIAS()
				RETURN
			ENDIF
			USE
		ENDIF
		
		* First time or bad format
		lSafety = SET("Safety")
		SET SAFETY OFF
		
		CREATE TABLE (lcVFPWSDBF) (;
		    TYPE c(1),;
		    Name m,;
		    Menu m,;
		    Tips m,;
		    URI m,;
		    WSDL m,;
		    WSML m,;
		    Prefs m,;
		    COMFile m,;
		    ASPFile m,;
		    Project m,;
		    UsePHook l,;
		    Toolbox l,;
		    Class m,;
		    Port m,;
		    Timestamp t,;
		    UniqueID c(10),;
		    User m )
		
		USE (lcVFPWSDBF) SHARED AGAIN
		SET SAFETY &lSafety
		 
		IF EMPTY(ALIAS())
			SELECT (lnSaveArea)
			RETURN .F.
		ENDIF
		THIS.cWSAlias = ALIAS()
		
		SELECT 0
		lcHomeFoxCode =ADDBS(HOME(1))+"foxcode.dbf"
		IF !FILE(lcHomeFoxCode)
			lcHomeFoxCode = HOME()+"foxcode.dbf"
		ENDIF
		IF FILE(lcHomeFoxCode)
			USE (lcHomeFoxCode) AGAIN SHARED
			IF !EMPTY(ALIAS())
				GO TOP
				lnFoxCodeVer = VAL(expanded)
			ENDIF
			USE
		ENDIF
		
		SELECT (THIS.cWSAlias)
		
		INSERT INTO (lcVFPWSDBF) (type,name) ;
			VALUES("V",TRANSFORM(lnFoxCodeVer))
		
	ENDPROC

	PROCEDURE createvirdir		&& Creates a virtual directory for web service.
		LPARAMETERS tcNewVirDir, tcPath, tcParent
		
		LOCAL oServObj, VdirObj, lHadError, lcParent
		LOCAL laMaps, oShell, lcFile
		
		TRY
		
			lcParent = IIF(EMPTY(tcParent), "IIS://LocalHost/w3svc/1/Root", tcParent)
			oServObj = GetObject(lcParent)
			VdirObj = oServObj.Create("IIsWebVirtualDir", tcNewVirDir)
			VdirObj.AccessRead = .F.
			VdirObj.AccessScript = .T.	&& required
			VdirObj.AccessExecute = .F.	&& can be set to .T., but is not needed (less secure)
			VdirObj.AspBufferingOn= .T.
			
			VdirObj.AppIsolated = 2		
			* 0 - Low (IIS Process), 1 - High (Isolated), 2 - Medium (Pooled)
			* Using 0 is best performance, but not as secure. By setting the Application Protection to 
			* 1 or 2, you will be running inside an instance of dllhost.exe process, which runs under 
			* a COM+ account (usually IWAM_MACHINENAME). And any error in your server COM dll   
			* will affect only web application related to the virtual root. Configuring the virtual directory 
			* to work under Low isolation level will run the web service within inetinfo.exe process 
			* running under system account. The only advantage of Low isolation level is performance.
			
			VdirObj.AspAllowSessionState = .F.
			VdirObj.ContentIndexed = .f.
			VdirObj.Put("Path", tcPath)
			VdirObj.AppCreate2(0)
			VdirObj.AppFriendlyName = tcNewVirDir
			VdirObj.SetInfo()
		
			* Add SOAP Toolkit 3.0 ISAPI Extension mapping
			laMaps = VdirObj.ScriptMaps
			oShell = CreateObject("WScript.Shell")
			lcFile = oShell.RegRead(ISAPIKEY)
			IF FILE(lcFile)
				DIMENSION laMaps[ALEN(laMaps)+1]
				laMaps[ALEN(laMaps)] = ".wsdl," + lcFile + ",1,GET,POST"
				COMARRAY(VdirObj,10)
				VdirObj.Put("ScriptMaps", @laMaps)
				VdirObj.SetInfo()
			ENDIF
		
		CATCH
		
			lHadError=.T.
		
		ENDTRY
		
		RETURN !lHadError
		
	ENDPROC

	PROCEDURE Destroy
		IF !EMPTY(THIS.cwsalias) AND SELECT(THIS.cwsalias)#0
			SELECT (THIS.cwsalias)
			USE
		ENDIF
		
		THIS.aInts = null
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lcErrorMsg
		THIS.lhaderror = .T.
		IF THIS.lIgnoreErrors OR INLIST(nError,1113,1426,2012) OR _VFP.StartMode>0
			RETURN
		ENDIF
		
		TEXT TO lcErrorMsg NOSHOW TEXTMERGE
		<<MESSAGE()>>
		
		ERR_LOCATION_LOC <<THIS.Name>>
		ERR_NUMBER_LOC <<TRANSFORM(nError)>>
		ERR_METHOD_LOC <<cMethod>>
		ERR_MESSAGE_LOC <<MESSAGE(1)>>
		ERR_LINE_LOC <<TRANSFORM(nline)>>
		<<REPLICATE("_",30)>>
		ERR_MSG1_LOC
		ERR_MSG2_LOC
		
		ENDTEXT
				
		IF MESSAGEBOX(lcErrorMsg,17,MB_ERRTITLE_LOC)#1
			IF TYPE("THISFORM")="O"
				RELEASE THISFORM
				CANCEL
			ELSE
				RELEASE THIS
			ENDIF
			IF lUsingWizard
				CANCEL
			ENDIF
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE genasp		&& Generates an ASP for web service to be published (VBScript or JScript). Default is to use ISAPI and not ASP.
		LPARAMETERS tcASP, tcWSDL, tcWSML, tcAppName
		
		* Generates a listener ASP file (high-level) for web service
		* Parameters:
		* tcASP - name of ASP file
		* tcWSDL - name of WSDL file
		* tcWSML - name of WSDML file (optional - if not provided, then look for same name as WSDL)
		* tcAppName - name of application for ASP
		
		LOCAL lcFileStr, lcWSDL, lcWSML, lcAppName, lcSafety, lcASP
		
		* Check for valid parms
		IF EMPTY(tcASP) OR EMPTY(tcWSDL)
			THIS.Alert(INVALIDPARM_LOC)
			RETURN .F.
		ENDIF
		IF !FILE(tcWSDL)
			THIS.Alert(NOWSDLFILE_LOC)
			RETURN .F.
		ENDIF
		IF EMPTY(tcWSML)
			tcWSML = FORCEEXT(tcWSDL,"WSML")
		ENDIF
		IF !FILE(tcWSML)
			THIS.Alert(NOWSDLFILE_LOC)
			RETURN .F.
		ENDIF
		IF EMPTY(tcAppName)
			tcAppName = JUSTSTEM(tcWSDL)+"Server"
		ENDIF
		lcAppName = tcAppName
		lcASP = tcASP
		lcWSDL = SYS(2014,tcWSDL, lcASP)
		lcWSML = SYS(2014,tcWSML, lcASP)
		
		lcFileStr = IIF(THIS.lUseJScript, THIS.GetASP_JS(lcAppName, lcWSDL, lcWSML),THIS.GetASP_VBS(lcAppName, lcWSDL, lcWSML))
		
		lcSafety = SET("SAFETY")
		SET SAFETY OFF
		STRTOFILE(lcFileStr,tcASP)
		SET SAFETY &lcSafety.
		
	ENDPROC

	PROCEDURE genws		&& Main routine to generate all the components necessary for a web service being published.
		LOCAL lcWSMLFile, lResult, lcListener
		
		* Generate WSDL/WSML files
		IF THIS.lGenWSDL
		
			DO CASE
			CASE !FILE(THIS.cCOMFile)
				THIS.Alert(NODLL_LOC)
				RETURN .F.
			CASE EMPTY(THIS.cWSDLFile)
				THIS.Alert(NOWSDL_LOC)
				RETURN .F.
			CASE EMPTY(THIS.cClass)
				THIS.Alert(NOCLASS_LOC)
				RETURN .F.
			CASE !THIS.lUseIsapi AND EMPTY(THIS.cASPListener)
				THIS.Alert(NOURL_LOC)
				RETURN .F.
			ENDCASE
			lcListener = IIF(THIS.lUseIsapi, THIS.cWSDLListener, THIS.cASPListener)
		
			lResult = THIS.GenWSDL()
			IF !lResult
				THIS.Alert(NOGENFILE_LOC+WSDLFILES_LOC)
				RETURN .F.
			ENDIF
		ENDIF
		
		* Generate ASP files
		IF !THIS.lUseIsapi AND THIS.lGenASP
			IF EMPTY(THIS.cASPFile)
				THIS.Alert(NOASP_LOC)
				RETURN .F.
			ENDIF
			IF EMPTY(THIS.cWSDLFile)
				THIS.Alert(NOWSDL_LOC)
				RETURN .F.
			ENDIF
			lcWSMLFile = FORCEEXT(THIS.cWSDLFile,"WSML")
			IF EMPTY(THIS.cAppName)
				THIS.Alert(NOAPPNAME_LOC)
				RETURN .F.
			ENDIF
			lResult = THIS.GenASP(THIS.cASPFile, THIS.cWSDLFile, lcWSMLFile, THIS.cAppName)
			IF !lResult
				THIS.Alert(NOGENFILE_LOC+ASPFILES_LOC)
				RETURN .F.
			ENDIF
		ENDIF
		
		* Register XML Web service - for use with IntelliSense too
		IF THIS.lGenIntellisense
			IF !THIS.AddFoxCode(THIS.cWSDLListener, .T.)
				THIS.lISenseFailed=.T.
			ENDIF
		ENDIF
		
		THIS.SavePrefs()
	ENDPROC

	PROCEDURE genwsdl		&& Generates WSDL and WSML files for web service being published.
		LOCAL loGen, loGen2, loDOM, lSuccess, lnSaveArea, lcXML
		lSuccess = .T.
		lnSaveArea = SELECT()
		IF !THIS.CheckWSdbf()
			SELECT (lnSaveArea)
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		LOCATE FOR UPPER(TYPE)="P" AND ;
			UPPER(ALLTRIM(COMfile))== UPPER(THIS.cCOMFile) AND ;
			UPPER(ALLTRIM(Class)) == UPPER(THIS.cClass) AND !DELETED()
		IF !FOUND() OR EMPTY(ALLTRIM(Menu))
			* Try again to save prefs
			THIS.Saveprefs()
			LOCATE FOR UPPER(TYPE)="P" AND ;
				UPPER(ALLTRIM(COMfile))== UPPER(THIS.cCOMFile) AND ;
				UPPER(ALLTRIM(Class)) == UPPER(THIS.cClass) AND !DELETED()
			IF !FOUND() OR EMPTY(ALLTRIM(Menu))
				SELECT (lnSaveArea)
				RETURN .F.
			ENDIF
		ENDIF
		
		lcXML = ALLTRIM(Menu)
		SELECT (lnSaveArea)
		
		TRY
			loGen=CREATEOBJECT(WSDLGEN_CLASS)
			loDOM=CREATEOBJECT(MSXML4_CLASS)
			loDOM.LoadXML(lcXML)
			loGen.Init(loDOM)
			loGen2=GETINTERFACE(loGen)
			loGen2.GenerateFile(0)
		CATCH
			lSuccess = .F.
		FINALLY
			THIS.Updateprefs("COMFILE", THIS.cCOMFile, .T.)	
		ENDTRY
		
		RETURN lSuccess
		
	ENDPROC

	PROCEDURE getasp_js		&& Creates ASP using JScript.
		LPARAMETERS lcAppName, lcWSDL, lcWSML
		
		LOCAL lcTempStr
		
		* Begin textmerge here
		TEXT TO lcTempStr NOSHOW TEXTMERGE
		<%@ LANGUAGE=JScript %>
		<%
		
		  Response.ContentType = "text/xml";
		  
		  if( Application("<<lcAppName>>") == void 0 )
		  {
		  
		    Application.Lock();
		    if( Application("<<lcAppName>>") == void 0 )
		    {
		    
		      var SoapServer;
		      var WSDLFilePath;
		      var WSMLFilePath;
		      
		      WSDLFilePath = Server.MapPath("<<lcWSDL>>");
		      WSMLFilePath = Server.MapPath("<<lcWSML>>");
		      
		      try
		      {
		        SoapServer = Server.CreateObject(SOAPSERVER_CLASS);
		      }
		      catch(err)
		      {
		        SendFault("Cannot create SoapServer object. " + err.description + " (" + err.number + ")");
		      }
		    
		      try
		      {
		        SoapServer.Init(WSDLFilePath, WSMLFilePath);
		      }
		      catch(err)
		      {
		        SendFault("SoapServer.Init failed. " & err.description);
		      }
		    
		      Application("<<lcAppName>>") = SoapServer;
		      
		    }
		    Application.UnLock();
		    
		  }
		
		  SoapServer = Application("<<lcAppName>>");
		  
		  try
		  {
		    SoapServer.SoapInvoke(Request, Response, "");
		  }
		  catch(err)
		  {
		    SendFault("SoapServer.SoapInvoke failed. " & err.description);
		  }
		  
		  function SendFault(LogMessage)
		  {
		    
		    var Serializer;
		    
		    // "URI Query" logging must be enabled for AppendToLog to work
		    
		    Response.AppendToLog(" SOAP ERROR: " & LogMessage);
		    
		    try
		    {
		      Serializer = Server.CreateObject(SOAPSERIAL_CLASS);
		    }
		    catch(err)
		    {  
		      Response.AppendToLog("Could not create SoapSerializer object. " & err.description);
		      Response.Status = "500 Internal Server Error";
		      Response.End();
		    }
		
		    try
		    {    
		      Serializer.Init(Response);
		    }
		    catch(err)
		    {
		      Response.AppendToLog("SoapSerializer.Init failed. " & err.description);
		      Response.Status = "500 Internal Server Error";
		      Response.End();
		    }
		
		    try
		    {      
		      Serializer.startEnvelope("", "", "");
		      Serializer.startBody("");
		      Serializer.startFault("Server", "The request could not be processed due to a problem in the server. Please contact the system admistrator. " + LogMessage, "");
		      Serializer.endFault();
		      Serializer.endBody();
		      Serializer.endEnvelope();
		    }
		    catch(err)
		    {
		      Response.AppendToLog("SoapSerializer failed. " & err.description);
		      Response.Status = "500 Internal Server Error";
		      Response.End();
		    }          
		      
		    Response.End();
		    
		  }  
		  
		%>
		ENDTEXT
		
		RETURN lcTempStr
		
	ENDPROC

	PROCEDURE getasp_vbs		&& Creates ASP using VBScript.
		LPARAMETERS lcAppName, lcWSDL, lcWSML
		
		LOCAL lcTempStr,lcWSName
		lcWSName = PROPER(JUSTSTEM(lcWSDL))
		
		* Begin textmerge here
		TEXT TO lcTempStr NOSHOW TEXTMERGE
		<%@ LANGUAGE=VBScript %>
		<%
		Option Explicit
		On Error Resume Next
		Response.ContentType = "text/xml"
		Dim SoapServer
		If Not Application("<<lcWSName>>Initialized") Then
		  Application.Lock
		  If Not Application("<<lcWSName>>Initialized") Then
		    Dim WSDLFilePath
		    Dim WSMLFilePath
		    WSDLFilePath = Server.MapPath("<<lcWSDL>>")
		    WSMLFilePath = Server.MapPath("<<lcWSML>>")
		    Set SoapServer = Server.CreateObject(SOAPSERVER_CLASS)
		    If Err Then SendFault "Cannot create SoapServer object. " & Err.Description
		    SoapServer.Init WSDLFilePath, WSMLFilePath
		    If Err Then SendFault "SoapServer.Init failed. " & Err.Description
		    Set Application("<<lcAppName>>") = SoapServer
		    Application("<<lcWSName>>Initialized") = True
		  End If
		  Application.UnLock
		End If
		Set SoapServer = Application("<<lcAppName>>")
		SoapServer.SoapInvoke Request, Response, ""
		If Err Then SendFault "SoapServer.SoapInvoke failed. " & Err.Description
		Sub SendFault(ByVal LogMessage)
		  Dim Serializer
		  On Error Resume Next
		  ' "URI Query" logging must be enabled for AppendToLog to work
		  Response.AppendToLog " SOAP ERROR: " & LogMessage
		  Set Serializer = Server.CreateObject(SOAPSERIAL_CLASS)
		  If Err Then
		    Response.AppendToLog "Could not create SoapSerializer object. " & Err.Description
		    Response.Status = "500 Internal Server Error"
		  Else
		    Serializer.Init Response
		    If Err Then
		      Response.AppendToLog "SoapSerializer.Init failed. " & Err.Description
		      Response.Status = "500 Internal Server Error"
		    Else
		      Serializer.startEnvelope
		      Serializer.startBody
		      Serializer.startFault "Server", "The request could not be processed due to a problem in the server. Please contact the system admistrator. " & LogMessage
		      Serializer.endFault
		      Serializer.endBody
		      Serializer.endEnvelope
		      If Err Then
		        Response.AppendToLog "SoapSerializer failed. " & Err.Description
		        Response.Status = "500 Internal Server Error"
		      End If
		    End If
		  End If
		  Response.End
		End Sub
		%>
		ENDTEXT
		
		RETURN lcTempStr
		
	ENDPROC

	PROCEDURE getports		&& Gets collection of ports (classes) in a WSDL file.
		LPARAMETERS tcWSDL
		
		* VFP7 Intellisense support for Web Service
		LOCAL lcServicePort,lcWSDL
		LOCAL oGen,loPort,loEnumPorts,loService,loEnumServices
		STORE 0 TO loPort,loEnumPorts,loService,loEnumServices
		THIS.lIgnoreErrors = .T.
		THIS.lHaderror = .F.
		DIMENSION THIS.aPorts[1]
		THIS.aPorts=""
		
		IF EMPTY(tcWSDL)
			RETURN .F.
		ENDIF
		lcWSDL = tcWSDL
		
		* Iterate thru all Services, Ports and Methods
		oGen = CREATEOBJECTEX(WSDLREADER_CLASS,"","")
		oGen.Load(lcWSDL,"") 		&& should not assume that all web services have a WSML file.
		
		THIS.lIgnoreErrors = .F.
		IF THIS.lHadError
			THIS.lHadError = .F.
			RETURN .F.
		ENDIF
		
		* Get Services
		ogen.GetSoapServices(@loEnumServices)
		DO WHILE .T.
			loEnumServices.next(1,@loService,1)
			IF VARTYPE(loService)#"O"
				EXIT
			ENDIF
			THIS.cWSname=loService.Name
			* Get ports
			loEnumPorts=0
			loService.GetSoapPorts(@loEnumPorts)
			DO WHILE .T.
				loEnumPorts.Next(1,@loPort,1)
				IF VARTYPE(loPort)#"O"
					EXIT
				ENDIF
				lcServicePort = loService.name+"."+loPort.name
				IF !EMPTY(THIS.aPorts[ALEN(THIS.aPorts)])
					DIMENSION THIS.aPorts[ALEN(THIS.aPorts)+1]
				ENDIF
				THIS.aPorts[ALEN(THIS.aPorts)]= lcServicePort
				loPort = 0
			ENDDO	&&Ports
			loService = 0
		ENDDO	&&Services
		
	ENDPROC

	PROCEDURE getprefs		&& Gets value of a preference stored in FOXWS web service table.
		LPARAMETERS tcField, tcValue
		LOCAL lnSaveArea
		lnSaveArea = SELECT()
		* Gets a default pref
		IF EMPTY(tcField)
			RETURN .F.
		ENDIF
		IF !THIS.CheckWSdbf()
			THIS.lhaderror = .T.
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		LOCATE FOR UPPER(TYPE)="V"
		IF !FOUND()
			SELECT (lnSaveArea)
			RETURN .F.
		ENDIF
		tcValue = ALLTRIM(&tcField.)
		SELECT (lnSaveArea)
		
	ENDPROC

	PROCEDURE getproject		&& Locates project for specified COM server used as published web service.
		* Checks to find if project for web service is opened.
		LOCAL laInts, lnCount, i, lcGuid, j, oTypelib 
		DIMENSION laInts[1]
		lcGuid=""
		
		IF _VFP.Projects.Count = 0
			RETURN
		ENDIF
		
		* Try to find and set project
		oTypelib = NEWOBJECT("_typelib", ADDBS(JUSTPATH(THIS.ClassLibrary))+"_utility.vcx")
		lnCount = oTypelib.Getclasses(@laInts,THIS.cComfile)
		FOR i = 1 TO lnCount
			IF laInts[m.i,1]==THIS.cClass
				lcGuid = laInts[m.i,2]
				EXIT
			ENDIF
		ENDFOR
		
		IF EMPTY(lcGuid)
			RETURN
		ENDIF
		
		FOR i = 1 TO _VFP.Projects.Count
			FOR j = 1 TO _VFP.Projects(m.i).Servers.Count
				IF _VFP.Projects(m.i).Servers(m.j).CLSID=lcGuid
					THIS.cProject = _VFP.Projects(m.i).Name
					EXIT
				ENDIF
			ENDFOR
		ENDFOR
		
	ENDPROC

	PROCEDURE getvirdirs		&& Gets collection of Virtual Directories in your IIS web server.
		LOCAL oServObj, lcMachine, lcVirDir
		THIS.lignoreerrors=.T.
		oServObj= GetObject("IIS://localhost")
		THIS.lignoreerrors=.F.
		IF THIS.lhaderror
			THIS.lhaderror=.F.
			RETURN .F.
		ENDIF
		lcMachine = GETWORDNUM(SYS(0),1)
		lcVirDir="http://"+lcMachine+"/"
		DIMENSION THIS.aVirDirs[1,2]
		STORE "" TO THIS.aVirDirs
		THIS.LoopVirDirs(oServObj, lcVirDir, 1)
		IF THIS.lhaderror
			THIS.lhaderror=.F.
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE loadprefs		&& Loads saved preferences for a published web service.
		* Load project DLL prefs
		LOCAL lnSaveArea
		lnSaveArea = SELECT()
		IF !THIS.CheckWSdbf()
			THIS.Alert(FILENOTOPEN_LOC + " ("+ ADDBS(JUSTPATH(_FOXCODE)) + FOXWSDBF + ")")
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		LOCATE FOR UPPER(TYPE)="P" AND ;
			UPPER(ALLTRIM(COMfile))== UPPER(THIS.cCOMFile) AND ;
			UPPER(ALLTRIM(Class)) == UPPER(THIS.cClass) AND !DELETED()
		
		IF !FOUND() OR EMPTY(ALLTRIM(prefs))
			SELECT (lnSaveArea)
			RETURN .F.
		ENDI
		EXECSCRIPT(prefs,THIS)
		SELECT (lnSaveArea)
		
	ENDPROC

	PROCEDURE loopvirdirs		&& Iterates through collection of virtual directories in IIS web server.
		LPARAMETERS oParent, tcVirDir, tnLevel
		LOCAL nLevel, cVirDir, oChild, loTmpParent, loTmpChild, lcPath, lAddVDir
		cVirDir = tcVirDir
		
		FOR EACH oChild IN oParent
			lAddVDir=.F.
			IF INLIST(UPPER(oChild.class),"IISWEBSERVICE","IISWEBSERVER", "IISWEBVIRTUALDIR", "IISWEBDIRECTORY")
		
				DO CASE
				CASE INLIST(UPPER(oChild.Name),"IISADMIN","IISHELP","PRINTERS","MSADC")
					LOOP
				CASE ATC("_vti_", oChild.Name)#0
					LOOP
				CASE ATC(".",oChild.Name)#0
					LOOP
				CASE oChild.AccessScript=.F.
					* LOOP
				CASE UPPER(oChild.class)="IISWEBVIRTUALDIR"
					* skip for certain common ones
					IF !UPPER(oChild.Name)=="ROOT"
						cVirDir = tcVirDir + oChild.name + "/"
					ENDIF
					lcPath = oChild.Path
					lAddVDir=.T.			
				CASE UPPER(oChild.class)="IISWEBDIRECTORY"
					* VS uses web directories which are directories off of the parent. They do not
					* have a path so we need to traverse up to get paret on.
					lcPath = oChild.Name
					loTmpChild=oChild
					IF !UPPER(oChild.Name)=="ROOT"
						cVirDir = tcVirDir + oChild.name + "/"
					ENDIF
					DO WHILE .T.				
						loTmpParent = GETOBJECT(loTmpChild.Parent)
						IF TYPE("loTmpParent.Path")="C"
							lcPath = ADDBS(loTmpParent.Path)+lcPath
							EXIT
						ELSE
							lcPath = loTmpParent.Name + "\" + lcPath	
						ENDIF
						loTmpChild=loTmpParent
					ENDDO
					lAddVDir=.T.
				ENDCASE
		
				IF lAddVDir
					IF !EMPTY(THIS.aVirDirs)
						DIMENSION THIS.aVirDirs[ALEN(THIS.aVirDirs,1)+1,2]
					ENDIF
					THIS.aVirDirs[ALEN(THIS.aVirDirs,1),1] = cVirDir
					THIS.aVirDirs[ALEN(THIS.aVirDirs,1),2] = ADDBS(lcPath)
				ENDIF
				
				nLevel = tnLevel +1
				THIS.LoopVirDirs(oChild, cVirDir, nLevel)
		
			ENDIF
		ENDFOR
		
	ENDPROC

	PROCEDURE saveprefs		&& Saves preferences for a published web service to FOXWS.
		* Save project DLL prefs
		LOCAL lcPrefs, lnSaveArea, lcPrefs2, i, lcPrefs3, lcMethods
		lcPrefs2=""
		lnSaveArea=SELECT()
		IF !THIS.CheckWSdbf()
			THIS.Alert(FILENOTOPEN_LOC + " ("+ ADDBS(JUSTPATH(_FOXCODE)) + FOXWSDBF + ")")
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		
		TEXT TO lcPrefs TEXTMERGE NOSHOW
		LPARAMETERS toWebS
		
		toWebS.cCOMFile = [<<THIS.cCOMFile>>]
		toWebS.cClass = [<<THIS.cClass>>]
		toWebS.cProject = [<<THIS.cProject>>]
		toWebS.cService = [<<THIS.cService>>]
		
		toWebS.lGenASP = <<THIS.lGenASP>>
		toWebS.lGenWSDL = <<THIS.lGenWSDL>>
		toWebS.lGenIntelliSense = <<THIS.lGenIntelliSense>>
		toWebS.lUsePHook = <<THIS.lUsePHook>>
		toWebS.lUnicode = <<THIS.lUnicode>>
		toWebS.lUseIsapi = <<THIS.lUseIsapi>>
		toWebS.lUseJScript = <<THIS.lUseJScript>>
		
		toWebS.cASPListener = [<<THIS.cASPListener>>]
		toWebS.cWSDLListener = [<<THIS.cWSDLListener>>]
		toWebS.cASPfile = [<<THIS.cASPfile>>]
		toWebS.cWSDLfile = [<<THIS.cWSDLfile>>]
		toWebS.cAppName = [<<THIS.cAppName>>]
		toWebS.cISense = [<<THIS.cISense>>]
		
		toWebS.cURI1 = [<<THIS.cURI1>>]
		toWebS.cURI2 = [<<THIS.cURI2>>]
		toWebS.cURI3 = [<<THIS.cURI3>>]
		toWebS.cURI4 = [<<THIS.cURI4>>]
		
		ENDTEXT
		
		IF !EMPTY(THIS.aMethods[1])
			SET TEXTMERGE ON TO MEMVAR lcPrefs2 NOSHOW
			\DIMENSION toWebS.aMethods[<<ALEN(THIS.amethods)>>]
			FOR i = 1 TO ALEN(THIS.amethods)
				\toWebS.aMethods[<<m.i>>] = "<<THIS.aMethods[m.i]>>"
			ENDFOR
			SET TEXTMERGE OFF
			SET TEXTMERGE TO
			lcPrefs = lcPrefs + CRLF + lcPrefs2
		ENDIF
		
		SET TEXTMERGE ON TO MEMVAR lcMethods NOSHOW
		FOR i = 1 TO ALEN(THIS.aMethods)
			\<<IIF(m.i=1,"",REPLICATE(" ",12))>><method name="<<THIS.aMethods[m.i]>>">	
			\<<REPLICATE(" ",12)>></method>
		ENDFOR
		SET TEXTMERGE TO
		SET TEXTMERGE OFF
		
		*serviceName="<<JUSTSTEM(THIS.cWSDLfile)>>"
		
		TEXT TO lcPrefs3 TEXTMERGE NOSHOW
		<WSDLGenConfig WSDLGenVersion="3.0" 
		serviceName="<<THIS.cService>>"
		COMObjectPath="<<THIS.cCOMFile>>" 
		listenerURI="<<JUSTPATH(THIS.cWSDLListener)>>/" 
		listenerType="<<IIF(THIS.lUseIsapi,[ISAPI],[ASP])>>" 
		XSDSchemaNS="2001" 
		definitionsTNS="<<THIS.cURI1>>" 
		schemaTNS="<<THIS.cURI2>>" 
		soapBodyNS="<<THIS.cURI3>>" 
		soapActionURI="<<THIS.cURI4>>" 
		characterSet="<<IIF(THIS.lUnicode,[UTF-16],[UTF-8])>>" 
		outputPath="<<JUSTPATH(THIS.cWSDLfile)>>" >
		   <selectedInterfaces>
		      <interface name="<<THIS.cClass>>">
		         <selectedMethods>
		            <<lcMethods>>
		         </selectedMethods>
		      </interface>
		   </selectedInterfaces> 
		</WSDLGenConfig>
		ENDTEXT
		
		LOCATE FOR UPPER(TYPE)="P" AND ;
			UPPER(ALLTRIM(COMfile))== UPPER(THIS.cCOMFile) AND ;
			UPPER(ALLTRIM(Class)) == UPPER(THIS.cClass) AND !DELETED()
		
		IF !FOUND()
			INSERT INTO (THIS.cWSAlias) (Type,Name,Menu,Prefs,Comfile,Class,Project,UsePHook,Timestamp,UniqueID) ;
				VALUES("P",THIS.cISense,lcPrefs3,lcPrefs,THIS.cCOMFile,THIS.cClass,THIS.cProject,THIS.lUsePHook,DATETIME(),SYS(2015))
		ELSE
			REPLACE Prefs WITH lcPrefs,;
				Menu WITH lcPrefs3, ;
				Name WITH THIS.cISense, ;
				Project WITH THIS.cProject, ;
				UsePHook WITH THIS.lUsePHook, ;
				Timestamp WITH DATETIME(), ;
				UniqueID WITH SYS(2015)
		ENDIF
		
		SELECT (lnSaveArea)
	ENDPROC

	PROCEDURE updateprefs		&& Updates the FOXWS web services table with a default setting.
		LPARAMETERS tcField, tcValue, tlAppend
		
		* Updates the Version record with default prefs
		LOCAL laItems, lnCount, i, lcTmpStr, lIsFile, lnSaveArea
		lnSaveArea=SELECT()
		IF EMPTY(tcField) OR EMPTY(tcValue)
			RETURN .F.
		ENDIF
		IF !THIS.CheckWSdbf()
			THIS.Alert(FILENOTOPEN_LOC + " ("+ ADDBS(JUSTPATH(_FOXCODE)) + FOXWSDBF + ")")
			RETURN .F.
		ENDIF
		SELECT (THIS.cWSAlias)
		LOCATE FOR UPPER(TYPE)="V" AND !DELETED()
		IF !FOUND()
			INSERT INTO (THIS.cWSAlias) (type,name,&tcField.) ;
				VALUES("V","1",tcValue)
		ELSE
			IF tlAppend
				DIMENSION laItems[1]
				lnCount = ALINES(laItems, &tcField.)
				lcTmpStr = ALLTRIM(tcValue)
				lIsFile = FILE(tcValue)
				FOR i = 1 TO lnCount
					IF EMPTY(laItems[m.i]) OR ;
						(lIsFile AND !FILE(laItems[m.i])) OR;
						UPPER(laItems[m.i]) == UPPER(tcValue)
						LOOP
					ENDIF
					lcTmpStr = lcTmpStr + CRLF + laItems[m.i]
				ENDFOR
				tcValue = lcTmpStr
			ENDIF
			REPLACE &tcField. WITH tcValue
		ENDIF
		SELECT (lnSaveArea)
		
	ENDPROC

	PROCEDURE vartypetostring		&& Returns data type (string) from numeric reference.
		LPARAMETERS nType
		
		DO CASE
		CASE ntype = 0		&& VT_EMPTY
			RETURN "variant"
		CASE ntype = 1		&& VT_NULL
			RETURN "NULL"
		CASE ntype = 2		&& VT_I2
			RETURN "integer"
		CASE nType = 3		&& VT_I4
			RETURN "integer"
		CASE nType = 4		&& VT_R4
			RETURN "number"
		CASE nType = 5		&& VT_R8
			RETURN "double"
		CASE nType = 6		&& VT_CT
			RETURN "currency"
		CASE ntype = 7
			RETURN "date"
		CASE ntype = 8
			RETURN "string"
		CASE ntype = 9		&& VT_DISPATCH
			RETURN "VARIANT"
		CASE nType = 11
			RETURN "boolean"
		CASE nType = 12		&& VT_VARIANT
			RETURN "variant"
		CASE nType = 16 	&& VT_I1
			RETURN "number"
		CASE nType = 17 	&& VT_UI1
			RETURN "number"
		CASE nType = 18 	&& VT_UI2
			RETURN "number"
		CASE nType = 19 	&& VT_UI4
			RETURN "number"
		CASE nType = 22		&& VT_INT
			RETURN "integer"
		CASE nType = 23		&& VT_UINT
			RETURN "integer"
		CASE nType = 24		&& VT_VOID
			RETURN "VOID"
		CASE nType = 25		&& VT_HRESULT
			RETURN "VOID"
		OTHERWISE
			RETURN "variant"
		ENDCASE
		
	ENDPROC

ENDDEFINE

DEFINE CLASS olecontrols AS olecontrol 
 	*< CLASSDATA: Baseclass="olecontrol" Timestamp="" Scale="Pixels" Uniqueid="" Nombre="olecontrols" Parent="" ObjName="olecontrols" OLEObject="C:\WINDOWS\System32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgAAAAEAAAD+////AAAAAAAAAAD////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////9/////v////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKB4dOIQjsIBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAAoBAAAAAAAABAAAAAIAAAD+////BQAAAAkAAAAGAAAABwAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAAANFAAARAsAALE8wWoBAAYAIgAAAD0AAADtAwAACQAAAHmtGQAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAEivGQAGAAAAAAAAAAUAAICY7RIAAQAAAC4AH97svQEABQCh7RIAA1LjC5GPzhGd4wCqAEu4UQEAAACQAQAAQ0AKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAALgwAAABPTEVEcmFnTW9kZQAJAAAASQoAAAAAAAAADAAAAE9MRURyb3BNb2RlAAkAAABJCgAAAAAAAAALAAAAQ2hlY2tib3hlcwAFAAAATAEAAAB1AG0AbgBIAGUAYQBkAGUAcgBzAO/9IABwAHIAbwBwAGUAcgB0AHkALgAgAFQAaABlAHkAIABEQgEABlRhaG9tYQAgAGEAZABkAGUAZAAgAGEAdAAgAGIAbwB0AGgAIABkAGUAcwBpAGcAbgAgAGEAbgBkACAAcgB1AG4AIAB0AGkAbQBlAC4AIABBAHQAIABkAGUAcwBpAGcAbgAgAHQAaQBtAGUALAAgAHkAbwB1ACAAYwBhAG4AIAB1AHMAZQAgAHQAaABlACAAQwBvAGwAdQBtAG4AIABIAGUAYQBkAGUAcgBzACAAdABhAGIAIABvAGYAIAB0AGgAZQAgAO/9TABpAHMAdABWAGkAZQB3AO/9IABDAG8AbgB0AHIAbwBsACAAUAByAG8AcABlAHIAdABpAGUAcwAgAGQAaQBhAGwAbwBnACAAYgBvAHgALgAgAEEAdAAgAHIAdQBuACAAdABpAG0AZQAsACAAdQBzAGUAIAB0AGgAZQAgAO/9QQBkAGQA7/0gAG0AZQB0AGgAbwBkACAAdABvACAAYQBkAGQAIABhACAA7/1DAG8AbAB1AG0AbgBIAGUAYQBkAGUAcgDv/SAAbwBiAGoAZQBjAHQAIAB0AG8AIAB0AGgAZQAgAO/9QwBvAGwAdQBtAG4ASABlAGEA" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: getcontrols
		*m: isindataenv
		*p: ccheckedkey
		*p: ccontrolname
		*p: ccontrolpath
		*p: dekey
		*p: ldataenv
		*p: lincludede
		*p: ocontainer		&& Reference to outer most container.
		*p: odataenv
		*p: parentkey
	*</DefinedPropArrayMethod>

	ccheckedkey = 
	ccontrolname = 
	ccontrolpath = 
	dekey = 
	Height = 109
	Name = "olecontrols"
	parentkey = 
	Width = 194
	
	PROCEDURE Destroy
		THIS.oContainer=""
		THIS.oDataEnv = ""
	ENDPROC

	PROCEDURE getcontrols
		LPARAMETERS loControl, lcParentKey
		
		LOCAL laParent, laObjs, i, lnObjs, lcKey, lHadError
		LOCAL loTreeViewObj, lnParent, loTmpObject 
		LOCAL lcDEClassLib, lcDEClass
		
		DIMENSION laObjs[1]
		DIMENSION laParent[1]
		
		lcKey = SYS(2015)
		
		IF VARTYPE(loControl) # "O"
			* Called the first time through - passed a number (3 for form/class, 2 for DE)
			IF VARTYPE(loControl)#"N" OR !BETWEEN(loControl, 1, 3)
				RETURN
			ENDIF
		
			lnParent=loControl
			lcKey = SYS(2015)
			loControl=laParent[1]
			ASELOBJ(laParent, lnParent)
			loControl=laParent[1]
		
			DO CASE
			CASE lnParent=2
			
				THIS.dekey = lcKey
				IF ASELOBJ(laParent,3)=0
					RETURN
				ENDIF
				IF ATC(".VCX", laParent[2])#0		
					loControl = laParent[1]
					DO WHILE .T.
						IF UPPER(loControl.BaseClass)=="FORM" AND TYPE("loControl.DEClass")="C" AND !EMPTY(loControl.DEClass)
							lcDEClass = loControl.DEClass
							lcDEClassLib = loControl.DEClassLibrary
							EXIT
						ENDIF
						IF TYPE("loControl.Parent")#"O"
							EXIT
						ENDIF
						loControl = loControl.Parent
					ENDDO
					IF EMPTY(lcDEClass)
						RETURN
					ENDIF
					TRY
						lHadError=.T.
						IF MESSAGEBOX(PROMPTFORMCLASSDE_LOC,36)=6
							THIS.oDataEnv = NEWOBJECT(lcDEClass, lcDEClassLib)
							loControl = THIS.oDataEnv
							lHadError=.F.
						ENDIF
					CATCH
					ENDTRY
				ENDIF
				IF lHadError
					RETURN
				ENDIF
				
			CASE lnParent=2
				THIS.dekey = lcKey
		
			CASE lnParent=3 AND ATC(".TMP", laParent[2])#0
				* User has temp form name here
				MESSAGEBOX(SAVEFORMFIRST_LOC)
				RETURN .F.
			CASE lnParent=3 AND ATC(".VCX", laParent[2])#0
				* Need to find true top-level container since it could be a VCX. We
				* do this by traversing upward until we have a parent w/o a classlib.
				loTmpObject = loControl
				DO WHILE .T.
					DO CASE
					CASE UPPER(loTmpObject.BaseClass)=="FORM" AND !EMPTY(loTmpObject.ClassLibrary)
						loControl = loTmpObject
						EXIT
					CASE TYPE("loTmpObject.Parent")="O" AND UPPER(loTmpObject.Parent.BaseClass)=="FORMSET" 
						IF !EMPTY(loTmpObject.Parent.ClassLibrary)
							loControl = loTmpObject
						ENDIF
						EXIT
					OTHERWISE
						loControl = loTmpObject
						loTmpObject = loControl.Parent
					ENDCASE
				ENDDO
				THIS.oContainer=loControl
				THIS.parentkey = lcKey
			OTHERWISE
				DO WHILE .T.
					IF UPPER(loControl.BaseClass)="FORM" OR TYPE("loControl.Parent")#"O"
						EXIT
					ELSE
						loControl=loControl.Parent
					ENDIF
				ENDDO
				THIS.oContainer=loControl
				THIS.parentkey = lcKey
			ENDCASE
		ENDIF
		
		IF VARTYPE(lcParentKey)="C"
			loTreeViewObj=THIS.Nodes.Add(lcParentKey,4, lcKey, loControl.Name)
		ELSE
			loTreeViewObj=THIS.Nodes.Add(,, lcKey, loControl.Name)
		ENDIF
		
		* Add objects to Objects Listbox
		lnObjs = AMEMBERS(laObjs, loControl, 2)
		FOR i = 1 TO lnObjs
			IF UPPER(loControl.&laObjs[m.i]..Class)="WSHANDLER"
				LOOP
			ENDIF
			THIS.GetControls(loControl.&laObjs[m.i]., lcKey)
		ENDFOR
		
	ENDPROC

	PROCEDURE Init
		THIS.Getcontrols(3)
		IF THIS.lIncludeDE
			THIS.Getcontrols(2)
		ENDIF
	ENDPROC

	PROCEDURE isindataenv
		LPARAMETERS toNode
		LOCAL loParent
		loParent = toNode
		DO WHILE .T.
			IF TYPE("loParent.Parent")#"O" OR ISNULL(loParent.Parent)
				EXIT
			ENDIF
			loParent = loParent.Parent
		ENDDO
		THIS.lDataenv= IIF(loParent.Key==THIS.DEKey, .T., .F.)
		loParent=""
		RETURN THIS.lDataenv
		
	ENDPROC

	PROCEDURE NodeCheck
		*** ActiveX Control Event ***
		LPARAMETERS node
		
		LOCAL lcLastKey
		
		lcLastKey = THIS.cCheckedkey
		Node.Selected = .T.
		IF node.Checked
			THIS.cCheckedKey = node.key
			THIS.cControlName = node.text
			THIS.cControlPath = node.fullpath
			IF !EMPTY(lcLastKey) AND !lcLastKey==THIS.cCheckedkey
				THIS.Nodes.Item(lcLastKey).Checked=.F.
			ENDIF
		ELSE
			THIS.cCheckedKey = ""
			THIS.cControlName = ""
			THIS.cControlPath = ""
		ENDIF
		
		IF !THIS.lIncludeDE
			THIS.lDataenv=.F.
		ELSE
			THIS.IsInDataEnv(node)
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbasebuilder AS builderbaseform OF "..\wizards\builderd.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setup
		*m: updatemethod
		*m: updateparms
		*p: port
		*p: service
		*p: wsdl
		*p: wsmethod
		*p: wsml
		*p: wsname
		*p: wsparmnum
		*p: wsparmquery
		*p: wsparms
		*p: wssyntax
	*</DefinedPropArrayMethod>

	BorderStyle = 3
	Caption = "XML Web Service Builder"
	Desktop = .T.
	DoCreate = .T.
	Height = 275
	Icon = ..\
	Left = -1
	MinHeight = 200
	MinWidth = 200
	Name = "wsbasebuilder"
	port = 
	service = 
	Top = 0
	Width = 440
	wsdl = 
	wsmethod = 
	wsml = 
	wsname = 
	wsparmnum = 0
	wsparmquery = 0
	wsparms = 
	wssyntax = 
	
	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine, oObject
		
		#DEFINE DEBUGMODE	.F.
		#DEFINE CR	CHR(13)+CHR(10)
		
		LOCAL lcErrorMsg, lcCodeLineMsg
		
		this.lError=.T.
		WAIT CLEAR
		IF this.lRelease
			this.Release
			RETURN .F.
		ENDIF
		WAIT CLEAR
		IF TYPE("oObject")#"O"
			oObject=this
		ENDIF
		lcErrorMsg=MESSAGE()+CHR(13)+CHR(13)+"Builder:     "+this.Name+CR+ ;
				"Object:      "+oObject.Name+CHR(13)+ ;
				"Method:    "+cMethod
		lcCodeLineMsg=MESSAGE(1)
		
		IF BETWEEN(nLine,1,10000) AND NOT lcCodeLineMsg="..."
			lcErrorMsg=lcErrorMsg+CHR(13)+"Line:         "+ALLTRIM(STR(nLine))
			IF NOT EMPTY(lcCodeLineMsg)
				lcErrorMsg=lcErrorMsg+CHR(13)+CHR(13)+lcCodeLineMsg
			ENDIF
		ENDIF
		
		IF DEBUGMODE
			MESSAGEBOX(lcErrorMsg)
			SET STEP ON 
			RETRY
		ELSE
			IF MESSAGEBOX(lcErrorMsg,17,this.Caption)#1
				this.lRelease=.T.
				this.Release
				RETURN .F.
			ENDIF
		ENDIF
		
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER toObject2, tuSource2, tlSkipSearch2
		
		IF TYPE("toObject2")#"O"
			RETURN .F.
		ENDIF
		
		IF NOT DODEFAULT(toObject2, tuSource2, tlSkipSearch2)
			RETURN .F.
		ENDIF
		
		THIS.Setup()
		
		IF NOT this.lRelease
			this.Show
		ENDIF
	ENDPROC

	PROCEDURE setobject
		LPARAMETERS toObject,tuSource,tlSkipSearch
		LOCAL lnSelObjCount,lcObjectName,lcName,llClass
		LOCAL laSelObj[1]
		IF tlSkipSearch OR PARAMETERS()=1 OR TYPE("toObject")=="O"
			IF TYPE("toObject")=="O" OR ISNULL(toObject)
				laSelObj[1]=toObject
			ELSE
				IF NOT ISNULL(toObject)
					WAIT WINDOW this.Caption+ ;
							" Error Mode:  Object parameter required" NOWAIT
				ENDIF
				RETURN .F.
			ENDIF
		ELSE
			lnSelObjCount=ASELOBJ(laSelObj)
			IF lnSelObjCount=0
				DIMENSION laSelObj[1]
				lnSelObjCount=ASELOBJ(laSelObj,1)
				IF lnSelObjCount=0
					IF ISNULL(toObject) OR TYPE("toObject")#"O"
						WAIT WINDOW this.Caption+ ;
								" Error Mode:  Nothing selected" NOWAIT
						RETURN .F.
					ENDIF
					laSelObj[1]=toObject
				ENDIF
			ENDIF
		ENDIF
		this.uSource=tuSource
		this.oObject=laSelObj[1]
		IF TYPE("this.oObject")#"O" OR ISNULL(this.oObject)
			this.oObject=.NULL.
			this.lClass=.F.
			this.cClass=""
			this.cClassLibrary=""
			this.Release
			RETURN .F.
		ENDIF
		this.lClass=(this.oObject.Name==this.oObject.Class)
		IF this.lClass
			this.cClass=this.oObject.Name
			this.cClassLibrary=SYS(1271,this.oObject)
		ELSE
			this.cClass=this.oObject.Class
			this.cClassLibrary=this.oObject.ClassLibrary
		ENDIF
		lcObjectName=this.oObject.Name
		this.cObjectName=lcObjectName
		laSelObj=.F.
		DIMENSION laSelObj[1]
		lnSelObjCount=ASELOBJ(laSelObj)
		llClass=.F.
		IF NOT llClass AND (lnSelObjCount=0 OR lnSelObjCount=1)
			IF lnSelObjCount=0
				DIMENSION laSelObj[1]
				lnSelObjCount=ASELOBJ(laSelObj,1)
			ENDIF
			IF lnSelObjCount=1
				lcName=LOWER(laSelObj[1].Name)
				IF lcName==LOWER(lcObjectName) AND lcName==LOWER(this.oObject.Class)
					llClass=.T.
				ENDIF
			ENDIF
		ENDIF
		this.lClass=llClass
		laSelObj=.F.
		
		IF NOT this.AddObjects()
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE setup
	ENDPROC

	PROCEDURE updatemethod
	ENDPROC

	PROCEDURE updateparms
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbuilder AS wsbasebuilder OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lstServices" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lblNewWS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lblRefresh" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lblMore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lblMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.cboMethods" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.lblServiceDoc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.edtDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgServices.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdEdit2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdDel2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdDel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdAdd" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.lstOperations" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.cmdAdd2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pfSettings.pgMethods.lstClients" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWSDL" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: displayerror		&& Reserved.
		*m: getcontainer
		*m: loadobject		&& Reserved.
		*m: updateall		&& Reserved.
		*m: updateclients		&& Reserved.
		*m: updateobject		&& Reserved.
		*m: updateservice		&& Reserved.
		*p: csavenotify		&& Reserved.
		*p: lfirsttime		&& Reserved.
		*p: lwsfound		&& Reserved.
		*p: naction		&& Reserved.
		*p: oclient		&& Reserved.
		*p: ooperation		&& Reserved.
		*p: operationclass		&& Reserved.
		*p: operationclasslib		&& Reserved.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "XML Web Service Builder"
	DoCreate = .T.
	Height = 465
	HelpContextID = 1231128
	Left = 16
	lwsfound = .T.		&& Reserved.
	MaxButton = .F.
	MinHeight = -1
	MinWidth = 300
	naction = 0		&& Reserved.
	Name = "wsbuilder"
	operationclass = 		&& Reserved.
	operationclasslib = 		&& Reserved.
	Top = 11
	Width = 433
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 360, ;
		Name = "cmdCancel", ;
		TabIndex = 3, ;
		Top = 436, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 296, ;
		Name = "cmdOK", ;
		TabIndex = 2, ;
		Top = 436, ;
		Width = 60, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lblWSDL' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "View Service Description (WSDL)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		lautotooltip = .T., ;
		Left = 12, ;
		MouseIcon = graphics\h_point.cur, ;
		MousePointer = 15, ;
		Name = "lblWSDL", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 14, ;
		Top = 442, ;
		Width = 157, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 16, ;
		Left = 16, ;
		Name = "oWeb", ;
		Top = 379, ;
		Width = 17
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'pfSettings' AS pageframe WITH ;
		ErasePage = .T., ;
		Height = 420, ;
		Left = 12, ;
		Name = "pfSettings", ;
		PageCount = 2, ;
		TabIndex = 1, ;
		TabStyle = 1, ;
		Top = 12, ;
		Width = 410, ;
		ZOrderSet = 5, ;
		Page1.Caption = "\<1. Services", ;
		Page1.FontName = "Tahoma", ;
		Page1.FontSize = 8, ;
		Page1.HelpContextID = 1231129, ;
		Page1.Name = "pgServices", ;
		Page2.Caption = "\<2. Operations", ;
		Page2.FontName = "Tahoma", ;
		Page2.FontSize = 8, ;
		Page2.HelpContextID = 1231130, ;
		Page2.Name = "pgMethods"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pfSettings.pgMethods.cmdAdd' AS commandbutton WITH ;
		Caption = "\<Add", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdAdd", ;
		TabIndex = 3, ;
		Top = 70, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.cmdAdd2' AS commandbutton WITH ;
		Caption = "A\<dd", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdAdd2", ;
		TabIndex = 8, ;
		Top = 250, ;
		Width = 60, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.cmdDel' AS commandbutton WITH ;
		Caption = "\<Remove", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdDel", ;
		TabIndex = 5, ;
		Top = 118, ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.cmdDel2' AS commandbutton WITH ;
		Caption = "Re\<move", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdDel2", ;
		TabIndex = 10, ;
		Top = 298, ;
		Width = 60, ;
		ZOrderSet = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.cmdEdit' AS commandbutton WITH ;
		Caption = "\<Edit", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdEdit", ;
		TabIndex = 4, ;
		Top = 94, ;
		Width = 60, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.cmdEdit2' AS commandbutton WITH ;
		Caption = "Ed\<it", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 322, ;
		Name = "cmdEdit2", ;
		TabIndex = 9, ;
		Top = 274, ;
		Width = 60, ;
		ZOrderSet = 14
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pfSettings.pgMethods.Label1' AS label WITH ;
		Caption = "\<Operations", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 22, ;
		Name = "Label1", ;
		Style = 3, ;
		TabIndex = 1, ;
		Top = 7, ;
		Width = 55, ;
		ZOrderSet = 17
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgMethods.Label2' AS label WITH ;
		Caption = "\<Clients", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 22, ;
		Name = "Label2", ;
		Style = 3, ;
		TabIndex = 6, ;
		Top = 195, ;
		Width = 34, ;
		ZOrderSet = 15
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgMethods.Label3' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Specify controls (Clients) that will consume your Operation above. You can include detail such as the property to bind to your Web service call.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 22, ;
		Name = "Label3", ;
		TabIndex = 12, ;
		Top = 214, ;
		Width = 360, ;
		WordWrap = .T., ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgMethods.Label5' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Specify operations for your Web service. Operations are method calls for the Web service. You can also provide additional information such as parameters values.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 22, ;
		Name = "Label5", ;
		TabIndex = 11, ;
		Top = 22, ;
		Width = 360, ;
		WordWrap = .T., ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgMethods.lstClients' AS listbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 120, ;
		ItemTips = .T., ;
		Left = 22, ;
		Name = "lstClients", ;
		TabIndex = 7, ;
		Top = 250, ;
		Width = 288, ;
		ZOrderSet = 13
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'pfSettings.pgMethods.lstOperations' AS listbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 108, ;
		ItemTips = .T., ;
		Left = 22, ;
		Name = "lstOperations", ;
		TabIndex = 2, ;
		Top = 70, ;
		Width = 288, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'pfSettings.pgMethods.Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 176, ;
		Left = 10, ;
		Name = "Shape1", ;
		Style = 3, ;
		Top = 14, ;
		Width = 384, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pfSettings.pgMethods.Shape2' AS shape WITH ;
		BackStyle = 0, ;
		Height = 180, ;
		Left = 10, ;
		Name = "Shape2", ;
		Style = 3, ;
		Top = 202, ;
		Width = 384, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pfSettings.pgServices.cboMethods' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 23, ;
		Name = "cboMethods", ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 228, ;
		Width = 360, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pfSettings.pgServices.edtDesc' AS editbox WITH ;
		ControlSource = "", ;
		EnableHyperlinks = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 108, ;
		Left = 23, ;
		Name = "edtDesc", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		Top = 264, ;
		Width = 360
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'pfSettings.pgServices.Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Select an XML Web service for use with your application. You can also specify operations, which are like method calls on the selected service.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 11, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 8, ;
		Width = 384, ;
		WordWrap = .T., ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Description:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label2", ;
		TabIndex = 4, ;
		Top = 154, ;
		Width = 59, ;
		ZOrderSet = 10
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lblMethod' AS label WITH ;
		Caption = "View \<operations", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 23, ;
		Name = "lblMethod", ;
		Style = 3, ;
		TabIndex = 6, ;
		Top = 208, ;
		Width = 78, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lblMore' AS label WITH ;
		BackStyle = 0, ;
		Caption = "Select an \<XML Web service:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "lblMore", ;
		TabIndex = 2, ;
		Top = 41, ;
		Width = 153, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lblNewWS' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Add a new XML Web service...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 246, ;
		MousePointer = 15, ;
		Name = "lblNewWS", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 13, ;
		Top = 41, ;
		Width = 149, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lblRefresh' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Refresh", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 167, ;
		MousePointer = 15, ;
		Name = "lblRefresh", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 13, ;
		Top = 41, ;
		Width = 40, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lblServiceDoc' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 34, ;
		Left = 11, ;
		Name = "lblServiceDoc", ;
		TabIndex = 5, ;
		Top = 170, ;
		Width = 384, ;
		WordWrap = .T., ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pfSettings.pgServices.lstServices' AS listbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 108, ;
		IntegralHeight = .T., ;
		ItemTips = .T., ;
		Left = 10, ;
		Name = "lstServices", ;
		TabIndex = 3, ;
		Top = 56, ;
		Width = 384, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'pfSettings.pgServices.Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 168, ;
		Left = 11, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 216, ;
		Width = 384
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Destroy
		THIS.oObject=""
		IF THIS.cSaveNotify="ON"
			SET NOTIFY CURSOR ON
		ENDIF
	ENDPROC

	PROCEDURE displayerror		&& Reserved.
		LPARAMETERS tcErrMessage
		MESSAGEBOX(tcErrMessage, 0, MB_SOAPERRTITLE_LOC)
	ENDPROC

	PROCEDURE getcontainer
		LOCAL laParent, lcName, loTmpObject , loControl
		
		DIMENSION laParent[1]
		
		IF ASELOBJ(laParent,3)=0
			RETURN
		ENDIF
		IF ATC(".VCX", laParent[2])=0
			RETURN ""
		ENDIF
		
		lcName = ""
		loControl = THIS.oobject 
		loTmpObject = loControl
		
		DO WHILE .T.
			DO CASE
			CASE TYPE("loControl.Parent")#"O"
				EXIT	
			CASE UPPER(loTmpObject.BaseClass)=="FORM" AND !EMPTY(loTmpObject.ClassLibrary)
				loControl = loTmpObject
				lcName = loControl.Name + "." + lcName
				EXIT
			CASE TYPE("loTmpObject.Parent")="O" AND UPPER(loTmpObject.Parent.BaseClass)=="FORMSET" 
				IF !EMPTY(loTmpObject.Parent.ClassLibrary)
					loControl = loTmpObject
					lcName = loControl.Name + "." + lcName
				ENDIF
				EXIT
			OTHERWISE
				loControl = loTmpObject
				loTmpObject = loControl.Parent
				lcName = loControl.Name + IIF(EMPTY(lcName),"",".") + lcName
			ENDCASE
		
		ENDDO
		
		RETURN lcName
		
	ENDPROC

	PROCEDURE loadobject		&& Reserved.
		LOCAL lcStr,i
		* Load property settings
		WITH THIS.oObject
			THIS.WSDL = .WSDL
			THIS.WSML = .WSML
			THIS.Service = .Service
			THIS.Port = .Port
			THIS.wsname = .wsname
			THIS.wsmethod = .wsmethod
			THIS.wssyntax = .wssyntax
		ENDWITH
		
		* Set various builder controls
		WITH THIS.pfSettings.pgServices.lstServices
			.AddItem(THIS.wsname + " (" + THIS.Service + ")")
			.ListIndex=1
			.Enabled=.F.
		ENDWITH
		
		THIS.lblWSDL.cTarget = THIS.WSDL
		
		* See if we have web service registered
		SELECT (THIS.oWeb.cWSAlias)
		
		LOCATE FOR UPPER(ALLTRIM(URI)) == UPPER(ALLTRIM(THIS.WSDL)) AND ;
			UPPER(ALLTRIM(Name)) == UPPER(ALLTRIM(THIS.Service)) AND ;
		  	UPPER(ALLTRIM(Port)) == UPPER(ALLTRIM(THIS.Port)) AND ;
		  	UPPER(Type) = "C" AND !DELETE()
		
		THIS.lwsfound = FOUND()
		THIS.pfSettings.PgServices.lblRefresh.Visible = !THIS.lwsfound
		IF THIS.lwsFound
			THIS.pfSettings.pgServices.lblServiceDoc.Caption = LEFT(ALLTRIM(Comfile),255)
			WITH THIS.pfSettings.pgServices.cboMethods
				FOR i = 1 TO GETWORDCOUNT(Menu)
					.AddItem(ALLTRIM(GETWORDNUM(Menu,m.i,CHR(13)+CHR(10))))
				ENDFOR
				.ListIndex=IIF(.ListCount>0,1,0)
				IF !EMPTY(THIS.wsMethod)
					.Value=THIS.wsMethod
				ENDIF
				THIS.UpdateMethod()
				.Enabled=IIF(.ListCount<2, .F., .T.)
			ENDWITH
		ELSE
			WITH THIS.pfSettings.pgServices.cboMethods
				.Enabled=.F.
				IF !EMPTY(THIS.wsMethod)
					.AddItem(THIS.wsMethod)
					.ListIndex=1
				ENDIF
			ENDWITH
			MESSAGEBOX(REREGSITERWS_LOC)
		ENDIF
		
		lcStr = ALLTRIM(THIS.oObject.ReadMethod("SetupOperations"))
		IF !EMPTY(lcStr)
			EXECSCRIPT(lcStr,THIS)
			IF TYPE("THIS.colOperations")="O" AND THIS.ColOperations.Count>0
				* Popupate the Operations collection
				FOR i = 1 TO THIS.ColOperations.Count
					WITH THISFORM.pfSettings.pgMethods.lstOperations
						.AddListItem(THIS.ColOperations(m.i).wsOperation)
						.AddListItem(THIS.ColOperations.GetKey(m.i), .NewItemId, 2)
					ENDWITH
				ENDFOR
				THISFORM.pfSettings.pgMethods.lstOperations.ListIndex=1
				THIS.UpdateClients()
			ENDIF
		ELSE
			THIS.AddObject("colOperations","collection")
		ENDIF
		
	ENDPROC

	PROCEDURE setup
		
		* Check for form container (VCX only)
		IF .F.
		LOCAL laParent, loControl, lHasFormset
		DIMENSION laParent[1]
		ASELOBJ(laParent,3)
		loControl = laParent[1]
		DO WHILE .T.
			IF UPPER(loControl.BaseClass)=="FORM" AND TYPE("loControl.DEClass")#"C"
				lHasFormset=.T.
				EXIT
			ENDIF
			IF TYPE("loControl.Parent")#"O" 
				EXIT
			ENDIF
			loControl=loControl.Parent	
		ENDDO
		IF lHasFormset
			MESSAGEBOX(NOFORMSET_LOC)	
			THIS.lrelease = .T.
			RETURN
		ENDIF
		ENDIF
		
		THIS.lFirsttime = EMPTY(THIS.oobject.webserviceid)
		THIS.cSaveNotify=SET("Notify",1)
		SET NOTIFY CURSOR OFF
		THIS.oWeb.CheckWSDbf()
		THIS.UpdateAll()
		
	ENDPROC

	PROCEDURE updateall		&& Reserved.
		* Reset defaults
		THIS.pfSettings.pgServices.lstServices.Clear()
		THIS.lblWSDL.cTarget = ""
		THIS.pfSettings.pgServices.cboMethods.Clear()
		
		SELECT (THIS.oWeb.cWSAlias)
		
		* Builder comes in reentrant
		IF !THIS.lFirsttime
			THIS.pfSettings.pgServices.lblNewWS.Caption = CHANGEWS_LOC
			THIS.LoadObject()
			THIS.pfSettings.ActivePage=2
		ELSE
			IF TYPE("THIS.colOperations")#"O"
				THIS.AddObject("colOperations","collection")
			ENDIF
			TRY
				WITH THIS.pfSettings.pgServices.lstServices
					SCAN FOR UPPER(Type)="C"
						.AddListItem(ALLTRIM(Class) + " (" + ALLTRIM(Name) + ")")
						.AddListItem(ALLTRIM(UniqueID), .NewItemId, 2)
						.AddListItem(ALLTRIM(URI), .NewItemId, 3)
					ENDSCAN
					IF .ListCount>0
						GO TOP
						.ListIndex = 1
						.Enabled = .T.
						THIS.WSDL = ALLTRIM(Uri)
						THIS.WSML = ALLTRIM(Wsml)
						THIS.Service =  ALLTRIM(Name)
						THIS.Port =  ALLTRIM(Port)
						THIS.wsname =  ALLTRIM(Class)
						THIS.UpdateService(ALLTRIM(.List(1,2)))
						THIS.lWSfound = .T.
					ENDIF
				ENDWITH
			CATCH
			
			ENDTRY
		ENDIF
		
	ENDPROC

	PROCEDURE updateclients		&& Reserved.
		LOCAL j, lnItem, loOperation
		
		lnItem = THIS.pfSettings.pgMethods.lstOperations.ListIndex
		loOperation = THIS.colOperations(THIS.pfSettings.pgMethods.lstOperations.List(lnItem,2))
		THIS.pfSettings.pgMethods.lstOperations.ToolTipText = loOperation.wsDesc
		THIS.pfSettings.pgMethods.lstClients.Clear()
		FOR j = 1 TO loOperation.ColClients.Count
			WITH THIS.pfSettings.pgMethods.lstClients
				.AddListItem(loOperation.ColClients(m.j).ClientName)
				.AddListItem(loOperation.ColClients.GetKey(m.j), .NewItemId, 2)
			ENDWITH
		ENDFOR
		
	ENDPROC

	PROCEDURE updatemethod
		LOCAL lcSyntax, lcDesc, lcDescPane 
		
		SELECT (THIS.oWeb.cWSalias)
		
		WITH THIS.pfSettings.pgServices
			THIS.wsMethod = .cboMethods.DisplayValue
			.cboMethods.Enabled = IIF(.cboMethods.ListCount=0, .F., .T.)
		
			lcSyntax = ALLTRIM(GETWORDNUM(Tips, .cboMethods.ListIndex, CHR(13)+CHR(10)))
			lcDesc = ""
			IF !EMPTY(ALLTRIM(prefs))
				lcDesc = ALLTRIM(GETWORDNUM(Prefs,.cboMethods.ListIndex, CHR(13)+CHR(10)))
				lcDesc = IIF(GETWORDCOUNT(lcDesc)<2,"",ALLTRIM(SUBSTR(lcDesc,ATC(" ", lcDesc))))
			ENDIF
			
			* Update desc editbox
			lcDescPane = ""
			IF !EMPTY(lcSyntax)
				lcDescPane = lcDescPane + SYNTAX_LOC + lcSyntax + CRLF + CRLF
			ENDIF
			IF !EMPTY(lcDesc)
				lcDescPane = lcDescPane + DESCRIPT_LOC + lcDesc  + CRLF + CRLF
			ENDIF
			lcDescPane = lcDescPane + THIS.WSDl + CRLF
			.edtDesc.Value = lcDescPane
			
		ENDWITH
	ENDPROC

	PROCEDURE updateobject		&& Reserved.
		* Set object properties
		LOCAL lHadMethod, lcStr, i, j, lHasClients, lcClass
		
		lHasMethod = .T.
		lcStr=""
		lcClass=IIF(VARTYPE(THIS.OperationClass)#"C" OR EMPTY(THIS.OperationClass), "colOperations", THIS.OperationClass)
		
		WITH THIS
		
			.oobject.WSDL = .WSDL
			.oobject.WSML = .WSML
			.oobject.Service = .Service
			.oobject.Port = .Port
			.oobject.wsname = .wsname
		
			DO CASE
			CASE EMPTY(.WSDL)
				.oobject.WebServiceID = ""
			CASE EMPTY(.oobject.WebServiceID)
				.oobject.WebServiceID = SYS(2015)
			ENDCASE
		
			IF THIS.colOperations.Count>0
		
				SET TEXTMERGE ON TO MEMVAR lcStr NOSHOW
				IF VARTYPE("THIS.colOperations")#"O"
		
					\LPARAMETERS toObj
					\* This snippet is automatically generated by the XML Web Services Builder.
					\LOCAL lcClasslib, lHadError, loError, lBuilder, loObj
					\lBuilder = (VARTYPE(toObj)="O")
					\loObj=IIF(!lBuilder, THIS, toObj)
					IF VARTYPE(THIS.OperationClasslib)="C" AND FILE(THIS.OperationClasslib)
						\lcClasslib = "<<THIS.OperationClasslib>>"
					ELSE
						\lcClasslib = IIF(!lBuilder, THIS.ClassLibrary, HOME() + "FFC\_ws3Client.vcx")
					ENDIF
					\IF !lBuilder 
					\	loObj.cContainer = "<<THIS.GetContainer()>>"
					\ENDIF
					\
					\TRY
					\
					\  loObj.AddProperty("colOperations", NEWOBJECT("<<lcClass>>", lcClasslib))
					
					FOR i = 1 TO THIS.colOperations.Count
						\
						\  * Operation: <<THIS.colOperations(m.i).wsOperation>>
						\  WITH loObj.colOperations.NewItem([<<THIS.colOperations.GetKey(m.i)>>])
						\
						\    .wsOperation = [<<THIS.colOperations(m.i).wsOperation>>]
						\    .wsDesc = [<<THIS.colOperations(m.i).wsDesc>>]
						\    .wsMethod = [<<THIS.colOperations(m.i).wsmethod>>]
						\    .wsparmnum = <<THIS.colOperations(m.i).wsparmnum>>
						\    .lOffline = <<THIS.colOperations(m.i).lOffline>>
						\    .nParmPrompt = <<THIS.colOperations(m.i).nParmPrompt>>
						
						FOR j = 1 TO THIS.colOperations(m.i).colParms.Count
							\
							\    WITH .colParms.NewItem()
							\      .Parmname = [<<THIS.colOperations(m.i).colParms(m.j).Parmname>>]
							\      .Parmtype = [<<THIS.colOperations(m.i).colParms(m.j).Parmtype>>]
							\      .InputValue = [<<THIS.colOperations(m.i).colParms(m.j).InputValue>>]
							\      .InputControl = [<<THIS.colOperations(m.i).colParms(m.j).InputControl>>]
							\      .InputProperty = [<<THIS.colOperations(m.i).colParms(m.j).InputProperty>>]
							IF THIS.colOperations(m.i).colParms(m.j).IsByRef
								\      .IsByRef = .T.
							ENDIF
							\    ENDWITH
						ENDFOR
						
						FOR j = 1 TO THIS.colOperations(m.i).colClients.Count
							lHasClients=.T.
							\
							\    WITH .colClients.NewItem([<<THIS.colOperations(m.i).colClients.GetKey(m.j)>>])
							\      .ClientName = [<<THIS.colOperations(m.i).colClients(m.j).ClientName>>]
							\      .ObjectRef = [<<THIS.colOperations(m.i).colClients(m.j).ObjectRef>>]				
							\      .BindTarget = [<<THIS.colOperations(m.i).colClients(m.j).BindTarget>>]					
							\      .BindSource = [<<THIS.colOperations(m.i).colClients(m.j).BindSource>>]
							\      .BindProp = [<<THIS.colOperations(m.i).colClients(m.j).BindProp>>]
							\      .lInvokeAtStart = <<THIS.colOperations(m.i).colClients(m.j).lInvokeAtStart>>
							\      .lAlwaysCallWebService = <<THIS.colOperations(m.i).colClients(m.j).lAlwaysCallWebService>>				
							IF !EMPTY(THIS.colOperations(m.i).colClients(m.j).NodeName)
								\      .NodeName = [<<THIS.colOperations(m.i).colClients(m.j).NodeName>>]
							ENDIF
							IF !EMPTY(THIS.colOperations(m.i).colClients(m.j).DSTable)
								\      .DSTable = [<<THIS.colOperations(m.i).colClients(m.j).DSTable>>]
								\      .DSField = [<<THIS.colOperations(m.i).colClients(m.j).DSField>>]
								\      .DSUseExistingCursor = <<THIS.colOperations(m.i).colClients(m.j).DSUseExistingCursor>>
							ENDIF
							\    ENDWITH
						ENDFOR
						\
						\  ENDWITH
					ENDFOR
					\
					\CATCH TO loError
					\
					\  IF !lBuilder
					\    THIS.DisplayError(ACTIONFAIL_LOC+CRLF+CRLF+loError.Message)
					\  ENDIF
					\  lHadError = .T.
					\
					\ENDTRY
					\
					\RETURN !lHadError
				ENDIF
		
				SET TEXTMERGE OFF
				SET TEXTMERGE TO
		
			ENDIF
		
			THIS.oObject.WriteMethod("SetupOperations",lcStr)
			THIS.oObject.lHasClients=lHasClients
		
		ENDWITH
		
	ENDPROC

	PROCEDURE updateservice		&& Reserved.
		LPARAMETERS lcWS
		
		LOCAL i
		
		IF !EMPTY(lcWS)
			SELECT (THIS.oWeb.cWSalias)
			LOCATE FOR UPPER(ALLTRIM(UniqueID)) == UPPER(ALLTRIM(lcWS)) AND;
				UPPER(Type) = "C"
			IF !FOUND()
				RETURN
			ENDIF
		ENDIF
		
		* Set properties
		THIS.WSDL = ALLTRIM(Uri)
		THIS.WSML = ALLTRIM(Wsml)
		THIS.Service = ALLTRIM(Name)
		THIS.Port = ALLTRIM(Port)
		THIS.wsName =  ALLTRIM(Class)
		
		* Set controls
		THIS.lblWSDL.ctarget = THIS.WSDL
		THIS.pfSettings.pgServices.lblServiceDoc.Caption = ALLTRIM(Comfile) 
		
		WITH THIS.pfSettings.pgServices.cboMethods
			.Enabled=.T.
			.Clear()
			FOR i = 1 TO GETWORDCOUNT(Menu)
				.AddItem(ALLTRIM(GETWORDNUM(Menu, m.i, CHR(13)+CHR(10))))
			ENDFOR
			IF .ListCount>0
				.ListIndex=1
			ENDIF
		ENDWITH
		
		THIS.UpdateMethod()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.UpdateObject()
		THISFORM.Release()
	ENDPROC

	PROCEDURE pfSettings.pgMethods.Activate
		THIS.cmdEdit.Enabled = THIS.lstOperations.ListCount>0
		THIS.cmdEdit2.Enabled = THIS.lstClients.ListCount>0
		THIS.cmdDel.Enabled = THIS.lstOperations.ListCount>0
		THIS.cmdDel2.Enabled = THIS.lstClients.ListCount>0
		
		IF THIS.lstOperations.ListIndex = 0 AND THIS.lstOperations.ListCount>0
			THIS.lstOperations.ListIndex = 1
		ENDIF
		
		IF THIS.lstClients.ListIndex = 0 AND THIS.lstClients.ListCount>0
			THIS.lstClients.ListIndex = 1
		ENDIF
		
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdAdd.Click
		LOCAL loDetForm, lcID
		IF !THISFORM.lwsFound
			MESSAGEBOX(REFRESHWS_LOC)
			RETURN
		ENDIF
		
		SELECT (THISFORM.oWeb.cWSalias)
		THISFORM.oOperation = NEWOBJECT("colOperation", HOME()+"FFC\_ws3Client.vcx")
		loDetForm = NEWOBJECT("wsBuilder1", THISFORM.ClassLibrary)
		loDetForm.oCallee = THISFORM
		loDetForm.SetupWS()
		loDetForm.SHOW()
		
		IF VARTYPE(THISFORM.oOperation)#"O" OR THISFORM.nAction=0
			RETURN
		ENDIF
		
		lcID = SYS(2015)
		THISFORM.colOperations.Add(THISFORM.oOperation, lcID)
		THIS.Parent.lstOperations.AddListItem(THISFORM.oOperation.wsOperation)
		THIS.Parent.lstOperations.AddListItem(lcID, THIS.Parent.lstOperations.NewItemId, 2)
		THISFORM.oOperation=""
		THIS.Parent.Activate()
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdAdd2.Click
		LOCAL loDetForm, lnItem, lcID
		
		IF THIS.Parent.lstOperations.ListIndex = 0
			MESSAGEBOX(SELECTWS_LOC)
			RETURN
		ENDIF
		
		lnItem = THIS.Parent.lstOperations.ListIndex
		lcID = THIS.Parent.lstOperations.List(lnItem,2)
		THISFORM.oOperation = THISFORM.colOperations(lcID)
		THISFORM.oClient = NEWOBJECT("colClient", HOME()+"FFC\_ws3Client.vcx")
		
		SELECT (THISFORM.oWeb.cWSalias)
		loDetForm = NEWOBJECT("wsBuilder2", THISFORM.ClassLibrary)
		loDetForm.oCallee = THISFORM
		IF !loDetForm.SetupObjects()
			RELEASE loDetForm
			THISFORM.oOperation=""
			THISFORM.oClient=""
		ELSE
			loDetForm.SHOW()
		ENDIF
		
		IF VARTYPE(THISFORM.oClient)#"O" OR THISFORM.nAction=0
			RETURN
		ENDIF
		
		lcID = SYS(2015)
		THISFORM.oOperation.colClients.Add(THISFORM.oClient, lcID)
		THIS.Parent.lstClients.AddListItem(THISFORM.oClient.ClientName)
		THIS.Parent.lstClients.AddListItem(lcID, THIS.Parent.lstClients.NewItemId, 2)
		
		THISFORM.oOperation=""
		THISFORM.oClient=""
		THIS.Parent.Activate()
		
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdDel.Click
		LOCAL lnItem, lcID
		lnItem = THIS.Parent.lstOperations.ListIndex
		IF lnItem=0 OR THIS.Parent.lstOperations.ListCount = 0
			RETURN
		ENDIF
		IF MESSAGEBOX(DELETEOPERATION_LOC, 36)=7
			RETURN
		ENDIF
		lcID = THIS.Parent.lstOperations.List(lnItem,2)
		THIS.Parent.lstOperations.RemoveItem(lnItem)
		THISFORM.colOperations.Remove(lcID)
		
		IF THIS.Parent.lstOperations.ListCount > 0
			THIS.Parent.lstOperations.ListIndex=1
			THISFORM.Updateclients()
		ENDIF
		THIS.Parent.Activate()
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdDel2.Click
		LOCAL lnItem, lcID, loOperation 
		lnItem = THIS.Parent.lstClients.ListIndex
		IF lnItem=0 OR THIS.Parent.lstClients.ListCount = 0
			RETURN
		ENDIF
		IF MESSAGEBOX(DELETECLIENT_LOC ,36)=7
			RETURN
		ENDIF
		lcID = THIS.Parent.lstClients.List(lnItem,2)
		THIS.Parent.lstClients.RemoveItem(lnItem)
		
		lnItem = THIS.Parent.lstOperations.ListIndex
		loOperation = THISFORM.colOperations(THIS.Parent.lstOperations.List(lnItem,2))
		loOperation.colClients.Remove(lcID)
		
		THIS.Parent.Activate()
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdEdit.Click
		LOCAL lnItem, lcID, loDetForm, lcOldMethod
		lnItem = THIS.Parent.lstOperations.ListIndex
		IF lnItem = 0 OR THIS.Parent.lstOperations.ListCount = 0
			RETURN
		ENDIF
		
		SELECT (THISFORM.oWeb.cWSalias)
		lcID = THIS.Parent.lstOperations.List(lnItem,2)
		THISFORM.oOperation = THISFORM.colOperations.Item(lcID)
		lcOldMethod = THISFORM.oOperation.wsMethod
		THISFORM.nAction = 2
		loDetForm = NEWOBJECT("wsBuilder1", THISFORM.ClassLibrary)
		loDetForm.oCallee = THISFORM
		loDetForm.SetupWS()
		loDetForm.SHOW()
		
		IF VARTYPE(THISFORM.oOperation)#"O"
			RETURN
		ENDIF
		
		* Update name if necessary
		IF !UPPER(ALLTRIM(THISFORM.oOperation.wsOperation)) == ;
			UPPER(THIS.Parent.lstOperations.List(THIS.Parent.lstOperations.ListIndex))
			THIS.Parent.lstOperations.List(THIS.Parent.lstOperations.ListIndex)=ALLTRIM(THISFORM.oOperation.wsOperation)
		ENDIF
		
		IF THIS.Parent.lstClients.ListCount>0 AND !UPPER(THISFORM.oOperation.wsMethod)==UPPER(lcOldMethod) AND MESSAGEBOX(REMOVECLIENTS_LOC,36)=6
			THISFORM.oOperation.colClients.Remove(-1)
			THIS.Parent.lstClients.Clear()
			THIS.Parent.Activate()
		ENDIF
		
		THISFORM.oOperation = ""
	ENDPROC

	PROCEDURE pfSettings.pgMethods.cmdEdit2.Click
		LOCAL loDetForm, lnItem, lcID
		
		IF THIS.Parent.lstClients.ListIndex=0 OR THIS.Parent.lstClients.ListCount = 0
			RETURN
		ENDIF
		
		lnItem = THIS.Parent.lstOperations.ListIndex
		lcID = THIS.Parent.lstOperations.List(lnItem,2)
		THISFORM.oOperation = THISFORM.colOperations(lcID)
		
		lnItem = THIS.Parent.lstClients.ListIndex
		lcID = THIS.Parent.lstClients.List(lnItem,2)
		THISFORM.oClient = THISFORM.oOperation.colClients(lcID)
		
		SELECT (THISFORM.oWeb.cWSalias)
		THISFORM.nAction = 2
		loDetForm = NEWOBJECT("wsBuilder2", THISFORM.ClassLibrary)
		loDetForm.oCallee = THISFORM
		IF !loDetForm.SetupObjects()
			RELEASE loDetForm
		ELSE
			loDetForm.SHOW()
		ENDIF
		
		* Update name if necessary
		IF VARTYPE(THISFORM.oClient)="O" AND !UPPER(ALLTRIM(THISFORM.oClient.ClientName)) == ;
			UPPER(THIS.Parent.lstClients.List(THIS.Parent.lstClients.ListIndex))
			THIS.Parent.lstClients.List(THIS.Parent.lstClients.ListIndex)=ALLTRIM(THISFORM.oClient.ClientName)
		ENDIF
		
		THISFORM.oOperation = ""
		THISFORM.oClient = ""
	ENDPROC

	PROCEDURE pfSettings.pgMethods.lstClients.DblClick
		THIS.Parent.cmdEdit2.Click()
	ENDPROC

	PROCEDURE pfSettings.pgMethods.lstOperations.DblClick
		THIS.Parent.cmdEdit.Click()
		
	ENDPROC

	PROCEDURE pfSettings.pgMethods.lstOperations.InteractiveChange
		THISFORM.Updateclients()
		THIS.Parent.Activate()
	ENDPROC

	PROCEDURE pfSettings.pgServices.cboMethods.InteractiveChange
		THISFORM.UpdateMethod()
	ENDPROC

	PROCEDURE pfSettings.pgServices.lblNewWS.Click
		IF !THISFORM.lFirsttime
			* Enter here if reentrant
			IF THISFORM.colOperations.Count > 0 AND ;
			  MESSAGEBOX(OPENOPS_LOC, 36)=7
				RETURN
			ENDIF
			THIS.Caption = ADDNEWWS_LOC
			THISFORM.colOperations.Remove(-1)
			THISFORM.pfSettings.pgMethods.lstOperations .Clear()
			THISFORM.colClients.Remove(-1)
			THISFORM.pfSettings.pgMethods.lstClients.Clear()
			
			THISFORM.pfSettings.PgServices.lblRefresh.Visible = .F.
			THISFORM.lwsFound = .T.
			
			* Reset core properties
			WITH THISFORM
				.WSDL = ""
				.WSML = ""
				.Service = ""
				.Port = ""
				.wsname = ""
				.wsmethod = ""
				.lFirsttime = .T.
			ENDWITH
		ELSE
			DO (_wizard) WITH "","webservice",,"INTELLISENSE"
		ENDIF
		THISFORM.UpdateAll()
		
	ENDPROC

	PROCEDURE pfSettings.pgServices.lblRefresh.Click
		THIS.Enabled = .F.
		
		IF !THISFORM.oWeb.AddFoxCode(THISFORM.wsdl, .T.)
			MESSAGEBOX(MB_ERRNOWSDL_LOC)
			RETURN .F.
		ENDIF
		SELECT (THISFORM.oWeb.cWSAlias)
		LOCATE FOR UPPER(ALLTRIM(URI)) == UPPER(ALLTRIM(THISFORM.wsdl)) AND ;
			UPPER(ALLTRIM(Name)) == UPPER(ALLTRIM(THISFORM.Service)) AND ;
			UPPER(ALLTRIM(Port)) == UPPER(ALLTRIM(THISFORM.Port)) AND ;
			UPPER(Type)="C" AND !DELETE()
		IF !FOUND()
			MESSAGEBOX(MB_ERRNOWSDL_LOC)
			RETURN
		ENDIF
		THISFORM.UpdateService(ALLTRIM(UniqueID))
	ENDPROC

	PROCEDURE pfSettings.pgServices.lstServices.InteractiveChange
		THISFORM.UpdateService(ALLTRIM(THIS.List(THIS.ListIndex,2)))
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbuilder1 AS wsbasebuilder OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblParm" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtOperation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtOperation" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWSDL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboParms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdParms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Colparms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkOffline" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboMethods" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: setupws		&& Reserved.
		*p: leditmode		&& Reserved.
		*p: naction		&& Reserved.
		*p: ocallee		&& Reserved.
		*p: wsdocumentation		&& Reserved.
		*a: aoperations[1,0]		&& Reserved.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "XML Web Service - Operation Detail"
	DataSession = 1
	DoCreate = .T.
	Height = 437
	HelpContextID = 1231131
	MinWidth = 300
	naction = 0		&& Reserved.
	Name = "wsbuilder1"
	Width = 396
	WindowType = 1
	wsdocumentation = 		&& Reserved.

	ADD OBJECT 'cboMethods' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 12, ;
		Name = "cboMethods", ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 136, ;
		Width = 180, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboParms' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 216, ;
		Name = "cboParms", ;
		Style = 2, ;
		TabIndex = 9, ;
		Top = 136, ;
		Width = 132, ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkOffline' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Allow \<Web service calls to be cached offline", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 24, ;
		Name = "chkOffline", ;
		TabIndex = 13, ;
		Top = 372, ;
		Value = .F., ;
		Width = 226, ;
		ZOrderSet = 22
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 324, ;
		Name = "cmdCancel", ;
		TabIndex = 16, ;
		Top = 408, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 260, ;
		Name = "cmdOK", ;
		TabIndex = 15, ;
		Top = 408, ;
		Width = 60, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdParms' AS commandbutton WITH ;
		Caption = "Set", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 26, ;
		Left = 352, ;
		Name = "cmdParms", ;
		TabIndex = 10, ;
		Top = 135, ;
		Width = 34, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Colparms' AS colparms WITH ;
		Left = 234, ;
		Name = "Colparms", ;
		Top = 408
		*< END OBJECT: ClassLib="_ws3client.vcx" BaseClass="collection" />

	ADD OBJECT 'edtDesc' AS editbox WITH ;
		BorderStyle = 0, ;
		ControlSource = "", ;
		EnableHyperlinks = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 132, ;
		Left = 24, ;
		Name = "edtDesc", ;
		ReadOnly = .T., ;
		ScrollBars = 0, ;
		TabIndex = 17, ;
		Top = 192, ;
		Width = 348
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'edtOperation' AS editbox WITH ;
		AddLineFeeds = .F., ;
		ControlSource = "", ;
		EnableHyperlinks = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 34, ;
		Left = 84, ;
		Name = "edtOperation", ;
		ScrollBars = 2, ;
		TabIndex = 5, ;
		Top = 80, ;
		Width = 300
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Specify a friendly name and select your Web service operation. You can also supply additional information such as parameter settings.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 12, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 347, ;
		WordWrap = .T., ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Syntax", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 20, ;
		Name = "Label2", ;
		Style = 3, ;
		TabIndex = 11, ;
		Top = 172, ;
		Width = 36, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		BackStyle = 0, ;
		Caption = "\<Name:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 2, ;
		Top = 55, ;
		Width = 65, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		BackStyle = 0, ;
		Caption = "\<Description:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label4", ;
		TabIndex = 4, ;
		Top = 84, ;
		Width = 59, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Options", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 20, ;
		Name = "Label5", ;
		Style = 3, ;
		TabIndex = 12, ;
		Top = 349, ;
		Width = 39, ;
		ZOrderSet = 23
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblMethod' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Select an operation (method):", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblMethod", ;
		TabIndex = 6, ;
		Top = 120, ;
		Width = 146, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblParm' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Set \<parameter(s):", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 216, ;
		Name = "lblParm", ;
		TabIndex = 8, ;
		Top = 120, ;
		Width = 88, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblWSDL' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "View Service Description (WSDL)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .T., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 12, ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblWSDL", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 14, ;
		Top = 408, ;
		Width = 157, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 40, ;
		Left = 12, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 356, ;
		Width = 372, ;
		ZOrderSet = 0
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'Shape2' AS shape WITH ;
		BackStyle = 0, ;
		Height = 156, ;
		Left = 12, ;
		Name = "Shape2", ;
		Style = 3, ;
		Top = 180, ;
		Width = 372, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtOperation' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 84, ;
		Name = "txtOperation", ;
		TabIndex = 3, ;
		Top = 52, ;
		Width = 300
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER toObject2, tuSource2, tlSkipSearch2
		RETURN
	ENDPROC

	PROCEDURE setupws		&& Reserved.
		LOCAL i, lnOperations
		
		THIS.lEditMode= (THIS.oCallee.nAction=2)
		
		* Add all methods to dropdown
		WITH THIS.cboMethods
			.Enabled=.T.
			.Clear()
			IF THIS.oCallee.lwsfound
				FOR i = 1 TO GETWORDCOUNT(Menu)
					.AddItem(ALLTRIM(GETWORDNUM(Menu,m.i,CHR(13)+CHR(10))))
				ENDFOR
			ELSE
				.AddItem(THIS.oCallee.oOperation.wsMethod)
			ENDIF
			IF .ListCount>0
				.ListIndex=1
				THIS.txtOperation.Value = .DisplayValue
			ENDIF
		ENDWITH
		
		* Create array of existing Operations for quick lookup later.
		lnOperations=THIS.oCallee.colOperations.Count
		IF lnOperations>0
			DIMENSION THIS.aOperations[lnOperations]
			FOR i = 1 TO lnOperations
				THIS.aOperations[m.i] = THIS.oCallee.colOperations.Item(m.i).wsOperation
			ENDFOR
		ENDIF
		
		THIS.WSDL= THIS.oCallee.WSDL
		THIS.lblWSDL.ctarget = THIS.oCallee.WSDL
		
		* User clicked Edit button
		IF THIS.lEditMode
			WITH THIS.oCallee.oOperation
				THISFORM.txtOperation.Value = TRANSFORM(.wsOperation)
				THISFORM.edtOperation.Value = TRANSFORM(.wsDesc)
				THISFORM.cboMethods.DisplayValue = TRANSFORM(.wsMethod)
				THISFORM.wsparmnum = .wsparmnum
				THISFORM.chkOffline.Value = .lOffline
				THISFORM.cboParms.ListIndex = .nParmPrompt
				THISFORM.colParms.Remove(-1)
				FOR i = 1 TO .colParms.Count
					THISFORM.colParms.Add(.colParms.Item(m.i))
				ENDFOR
			ENDWITH
		ENDIF
		
		THIS.oCallee.nAction = 0
		
		THIS.UpdateMethod(!THIS.lEditMode)
		
	ENDPROC

	PROCEDURE updatemethod
		LPARAMETERS lInterChange
		
		LOCAL lcParms, lcDesc, lcMethod, lnCounter
		lcDesc = ""
		
		SELECT (THISFORM.oCallee.oWeb.cWSAlias)
		
		WITH THIS
		
			IF !THIS.oCallee.lWSFound
				.wsSyntax = ""
				.wsdocumentation = ""
				.wsParmnum = THISFORM.wsparmnum
			ELSE
				.wsSyntax  = ALLTRIM(GETWORDNUM(Tips,.cboMethods.ListIndex,CHR(13)+CHR(10)))
				lcParms = ALLTRIM(STREXTRACT(.wsSyntax, "(", ")"))
				.wsParmnum = IIF(EMPTY(lcParms),0,OCCURS(",",lcParms)+1)
				IF !EMPTY(ALLTRIM(prefs))
					lcDesc = ALLTRIM(GETWORDNUM(Prefs,.cboMethods.ListIndex, CHR(13)+CHR(10)))
					.wsdocumentation = IIF(GETWORDCOUNT(lcDesc)<2,"",ALLTRIM(SUBSTR(lcDesc,ATC(" ", lcDesc))))
				ENDIF
			ENDIF
			
			.wsMethod = .cboMethods.DisplayValue
			.cboMethods.Enabled = .cboMethods.ListCount>0
			IF lInterChange
				* Find next available number
				lcMethod = .wsMethod
				lnCounter = 2
				DO WHILE .T.
					IF ASCAN(THIS.aOperations, lcMethod,-1,-1,-1,7)=0
						EXIT
					ENDIF
					IF THIS.lEditmode AND UPPER(THIS.oCallee.oOperation.wsOperation)==UPPER(lcMethod)
						EXIT
					ENDIF
					lcMethod = .wsMethod +  " (#" + TRANSFORM(lnCounter) + ")"
					lnCounter = lnCounter + 1
				ENDDO
				.txtOperation.Value = lcMethod		
				.coLParms.wsSyntax = .wsSyntax
				.coLParms.GenParms()
			ENDIF
		
		ENDWITH
		
		THIS.UpdateParms()
	ENDPROC

	PROCEDURE updateparms
		LOCAL lcParmExpr, loItem, lcDescPane, lcDesc
		
		WITH THIS
			.cboParms.Enabled = .wsParmnum>0
			.cmdParms.Enabled = IIF(!.cboParms.Enabled, .F., .cboParms.ListIndex=1)
			lcParmExpr = ""
			IF .colParms.Count#0
				FOR EACH loItem IN .colParms
					IF !EMPTY(loItem.InputControl)
						lcParmExpr = lcParmExpr + GETWORDNUM(loItem.InputControl,GETWORDCOUNT(loItem.InputControl,"."),".") + "." + loItem.InputProperty + ","
					ELSE
						lcParmExpr = lcParmExpr + TRANSFORM(loItem.InputValue) + ","
					ENDIF
				ENDFOR
				lcParmExpr =LEFT(lcParmExpr , LEN(lcParmExpr )-1)
			ENDIF
			
			* Update edtDesc
			lcDescPane=""
			IF .cboMethods.ListCount>0 AND !EMPTY(.wsSyntax)
				lcDescPane = lcDescPane + SYNTAX_LOC + .wsSyntax + CRLF + CRLF
			ENDIF
			IF !EMPTY(.wsdocumentation)
				lcDescPane = lcDescPane + DESCRIPT_LOC + .wsdocumentation + CRLF + CRLF
			ENDIF
			IF !EMPTY(lcParmExpr) OR LEFT(lcParmExpr,1)=","
				lcDescPane = lcDescPane + YOURPARMS_LOC + .wsMethod +"(" + lcParmExpr +")" +CRLF + CRLF
			ENDIF
		
			lcDescPane = lcDescPane + .wsdl + CRLF + CRLF
			
			THIS.edtDesc.Value = lcDescPane
		
		ENDWITH
	ENDPROC

	PROCEDURE cboMethods.InteractiveChange
		THISFORM.UpdateMethod(.T.)
	ENDPROC

	PROCEDURE cboParms.Init
		THIS.AddItem(PARMSETTYPE1_LOC)
		THIS.AddItem(PARMSETTYPE2_LOC)
		THIS.AddItem(PARMSETTYPE3_LOC)
		THIS.ListIndex=1
		
	ENDPROC

	PROCEDURE cboParms.InteractiveChange
		THISFORM.UpdateParms()
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.oCallee.oOperation=""
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		LOCAL i
		WITH THISFORM.oCallee.oOperation
		
			.wsOperation = ALLTRIM(THISFORM.txtOperation.Value)
			.wsDesc = ALLTRIM(CHRTRAN(THISFORM.edtOperation.Value,CHR(13)+CHR(10) ,"  "))
			.lOffline = THISFORM.chkOffline.Value
			.nParmPrompt = THISFORM.cboparms.ListIndex	
		
			IF THISFORM.oCallee.lWSFound
				.wsMethod = THISFORM.cboMethods.DisplayValue
				.wsparmnum = THISFORM.wsparmnum
				.colParms.wssyntax = THISFORM.wssyntax
				.colParms.Remove(-1)
				.colParms.GenParms()
			ENDIF
			
			FOR i = 1 TO THISFORM.ColParms.Count
				.ColParms.Item(m.i).AddProperty("InputValue", THISFORM.colParms(m.i).InputValue)
				.ColParms.Item(m.i).AddProperty("InputControl", THISFORM.colParms(m.i).InputControl)
				.ColParms.Item(m.i).AddProperty("InputProperty", THISFORM.colParms(m.i).InputProperty)
			ENDFOR
		
		ENDWITH
		
		THISFORM.oCallee.nAction = 1
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdParms.Click
		LOCAL loParmForm
		
		loParmForm = NEWOBJECT("wsbuilder4", THIS.ClassLibrary)
		loParmForm.oCallee = THISFORM
		loParmForm.SetupWS()
		loParmForm.Show(1)
		
		THISFORM.UpdateParms()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbuilder2 AS wsbasebuilder OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdComplex" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkAlwaysCallWebService" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkStartup" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Olecontrols" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtClient" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPEMS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboBind" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboBindProp" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: getpropnames		&& Reserved.
		*m: setupobjects		&& Reserved.
		*m: updateobject		&& Reserved.
		*p: ccontrol		&& Reserved.
		*p: ccontrolpath		&& Reserved.
		*p: ccontrolprop		&& Reserved.
		*p: dsfield		&& Reserved.
		*p: dstable		&& Reserved.
		*p: dsuseexistingcursor		&& Reserved.
		*p: leditmode		&& Reserved.
		*p: naction		&& Reserved.
		*p: nodename		&& Reserved.
		*p: ocallee		&& Reserved.
		*p: ocontrol		&& Reserved.
		*p: ooperation		&& Reserved.
		*a: aclientprops[1,0]		&& Reserved.
		*a: aclients[1,0]		&& Reserved.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "XML Web Service - Client Detail"
	ccontrol = 		&& Reserved.
	ccontrolpath = 		&& Reserved.
	ccontrolprop = 		&& Reserved.
	DoCreate = .T.
	dsfield = 		&& Reserved.
	dstable = 		&& Reserved.
	dsuseexistingcursor = .T.		&& Reserved.
	Height = 405
	HelpContextID = 1231133
	MinWidth = 400
	naction = 0		&& Reserved.
	Name = "wsbuilder2"
	nodename = 		&& Reserved.
	Width = 516
	WindowType = 1

	ADD OBJECT 'cboBind' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 300, ;
		Name = "cboBind", ;
		Style = 2, ;
		TabIndex = 8, ;
		Top = 284, ;
		Width = 204, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboBindProp' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 384, ;
		Name = "cboBindProp", ;
		TabIndex = 12, ;
		Top = 315, ;
		Width = 120, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboPEMS' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 300, ;
		Name = "cboPEMS", ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 252, ;
		Width = 204, ;
		ZOrderSet = 19
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkAlwaysCallWebService' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Always call Web service", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "chkAlwaysCallWebService", ;
		TabIndex = 14, ;
		Top = 376, ;
		Value = .F., ;
		Width = 132, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkStartup' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Invoke at startup", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "chkStartup", ;
		TabIndex = 13, ;
		Top = 352, ;
		Value = .F., ;
		Width = 102, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 444, ;
		Name = "cmdCancel", ;
		TabIndex = 17, ;
		Top = 372, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdComplex' AS commandbutton WITH ;
		AutoSize = .T., ;
		Caption = "Comple\<x Types...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 203, ;
		Name = "cmdComplex", ;
		TabIndex = 15, ;
		Top = 372, ;
		Width = 101, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 380, ;
		Name = "cmdOK", ;
		TabIndex = 16, ;
		Top = 372, ;
		Width = 60, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Control property used to assign the Web service results:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label1", ;
		TabIndex = 5, ;
		Top = 258, ;
		Width = 272, ;
		WordWrap = .T., ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Specify a client (control) to bind to your Web service operation. Select a property to assign the result of this operation. Include options such as ADO .Net Dataset table and field names.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 12, ;
		Name = "Label2", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 458, ;
		WordWrap = .T., ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Select control:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 3, ;
		Top = 99, ;
		Width = 71, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "At runtime, the binding property gets dynamically added to your control. When the value of this property is set to .T., the Web service is called and the results assigned to the specified control's property.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 12, ;
		Name = "Label4", ;
		TabIndex = 2, ;
		Top = 48, ;
		Width = 467, ;
		WordWrap = .T., ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Name of binding \<property:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 252, ;
		Name = "Label5", ;
		TabIndex = 11, ;
		Top = 320, ;
		Width = 126, ;
		WordWrap = .T., ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Bind control to the Web service return value or parameter:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label7", ;
		TabIndex = 7, ;
		Top = 290, ;
		Width = 282, ;
		WordWrap = .T., ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Client \<description:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label8", ;
		TabIndex = 9, ;
		Top = 320, ;
		Width = 88, ;
		ZOrderSet = 20
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Olecontrols' AS olecontrols WITH ;
		Height = 123, ;
		Left = 12, ;
		lincludede = .T., ;
		Name = "Olecontrols", ;
		TabIndex = 4, ;
		Top = 120, ;
		Width = 492
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALCq3seEnMIBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACYBAAAAAAAABAAAAAIAAAD+////BQAAAAkAAAAGAAAABwAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAADaMgAAtgwAALE8wWoBAAYAIgAAAD0AAADtAwAACQAAAAkzFQAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFANg0FQAGAAAAAAAAAAUAAIBY6hIAAQAAAC4AH97svQEABQBh6hIAA1LjC5GPzhGd4wCqAEu4UQEAAACQAQAAQ0AKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAALgwAAABPTEVEcmFnTW9kZQAJAAAASQoAAAAAAAAADAAAAE9MRURyb3BNb2RlAAkAAABJCgAAAAAAAAALAAAAQXBwZWFyYW5jZQAJAAAASQoAAAABAAAACwAAAENoZWNrYm94ZXMABQAAAEwBAAAAbwBwAGUAcgB0AHkALgAgAFQAaABlAHkAIABEQgEABlRhaG9tYQAgAGEAZABkAGUAZAAgAGEAdAAgAGIAbwB0AGgAIABkAGUAcwBpAGcAbgAgAGEAbgBkACAAcgB1AG4AIAB0AGkAbQBlAC4AIABBAHQAIABkAGUAcwBpAGcAbgAgAHQAaQBtAGUALAAgAHkAbwB1ACAAYwBhAG4AIAB1AHMAZQAgAHQAaABlACAAQwBvAGwAdQBtAG4AIABIAGUAYQBkAGUAcgBzACAAdABhAGIAIABvAGYAIAB0AGgAZQAgAO/9TABpAHMAdABWAGkAZQB3AO/9IABDAG8AbgB0AHIAbwBsACAAUAByAG8AcABlAHIAdABpAGUAcwAgAGQAaQBhAGwAbwBnACAAYgBvAHgALgAgAEEAdAAgAHIAdQBuACAAdABpAG0AZQAsACAAdQBzAGUAIAB0AGgAZQAgAO/9QQBkAGQA7/0gAG0AZQB0AGgAbwBkACAAdABvACAAYQBkAGQAIABhACAA7/1DAG8AbAB1AG0AbgBIAGUAYQBkAGUAcgDv/SAAbwBiAGoAZQBjAHQAIAB0AG8AIAB0AGgAZQAgAO/9QwBvAGwAdQBtAG4ASABlAGEA" />

	ADD OBJECT 'txtClient' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 108, ;
		Name = "txtClient", ;
		TabIndex = 10, ;
		Top = 316, ;
		Width = 132
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Destroy
		THIS.oControl = ""
	ENDPROC

	PROCEDURE getpropnames		&& Reserved.
		LOCAL lcName, lnCount
		
		IF THIS.lEditmode AND THIS.olecontrols.cControlPath==THIS.cControlPath
			RETURN THIS.cControlProp
		ENDIF
		
		IF !EMPTY(ALLTRIM(THIS.cboBindProp.DisplayValue))
			RETURN THIS.cboBindProp.DisplayValue
		ENDIF
		
		lcName=DEF_BINDPROP
		lnCount=1
		DO WHILE .T.
			IF ASCAN(THIS.aClientprops, THIS.olecontrols.cControlPath+ "," + lcName, -1, -1, -1, 7)=0
				EXIT
		 	ENDIF
		 	lnCount=lnCount+1
		 	lcName = DEF_BINDPROP+TRANSFORM(lnCount)
		ENDDO
		
		RETURN lcName
	ENDPROC

	PROCEDURE Init
		LPARAMETER toObject2, tuSource2, tlSkipSearch2
		RETURN
	ENDPROC

	PROCEDURE setupobjects		&& Reserved.
		LOCAL laParent, laObjs, i, lnObjs, lFound, lcObjRef, loNode, lnClients
		LOCAL lnItem, loOperation, loParm, loObj, loClient
		
		DIMENSION laObjs[1]
		DIMENSION laParent[1]
		
		* Check for valid objects on form to bind to
		IF THIS.olecontrols.Nodes.Count=0
			MESSAGEBOX(NOOBJECTS_LOC) 
			RETURN .F.
		ENDIF
		
		* Get list of current clients
		lnClients=THIS.oCallee.oOperation.colClients.Count
		IF lnClients>0
			DIMENSION THIS.aClients[lnClients]
			FOR i = 1 TO lnClients
				THIS.aClients[m.i] = THIS.oCallee.oOperation.colClients.Item(m.i).Clientname
			ENDFOR
		ENDIF
		
		* Get list of current binding properties
		FOR EACH loOperation IN THIS.oCallee.colOperations
			FOR EACH loClient IN loOperation.colClients
				IF !EMPTY(THIS.aClientProps[1])
					DIMENSION THIS.aClientProps[ALEN(THIS.aClientProps,1)+1, 1]
				ENDIF
				THIS.aClientProps[ALEN(THIS.aClientProps,1), 1] = loClient.ObjectRef + "," + loClient.BindProp
			ENDFOR
		ENDFOR
		
		THIS.WSDL = THIS.oCallee.WSDL
		THIS.WSML = THIS.oCallee.WSML
		
		THIS.lEditmode = (THIS.ocallee.nAction = 2)
		
		* Update the Bind Source combo with ReturnValue and operation parameters
		THIS.cboBind.AddItem("ReturnValue")
		THIS.cboBind.ListIndex=1
		lnItem = THIS.ocallee.pfSettings.pgMethods.lstOperations.ListIndex
		THIS.oOperation = THIS.ocallee.colOperations(THIS.ocallee.pfSettings.pgMethods.lstOperations.List(lnItem,2))
		FOR EACH loParm IN THIS.oOperation.colParms
			THIS.cboBind.AddItem(loParm.Parmname)
		ENDFOR
		
		THIS.wsMethod = THIS.oOperation.wsMethod
		
		* Ensure first node always expanded
		IF THIS.olecontrols.Nodes.Count>0
			THIS.olecontrols.Nodes.Item(1).Expanded=.T.
		ENDIF
		
		THIS.ocallee.nAction = 0
		 
		* User clicked Edit button
		IF THIS.lEditMode
			WITH THIS.oCallee.oClient	
				THIS.txtClient.Value=.Clientname
				THIS.olecontrols.cControlpath= .ObjectRef
				* Need to locate this path 
				lcObjRef = .ObjectRef
				FOR EACH loNode IN THIS.olecontrols.Nodes
					IF UPPER(loNode.FullPath)==UPPER(lcObjRef)
						loNode.Checked = .T.
						loNode.Selected = .T.
						loNode.EnsureVisible()
						THIS.oleControls.IsInDataEnv(loNode)
						THIS.olecontrols.cControlname = loNode.Text
						THIS.olecontrols.cCheckedkey = loNode.Key
						lFound=.T.
						EXIT
					ENDIF
				ENDFOR
				IF !lFound
					MESSAGEBOX(MISSINGCLIENT_LOC+CRLF+CRLF+lcObjRef)
				ELSE
					IF THIS.UpdateObject()
						THIS.cboPEMS.Value = .BindTarget
						THIS.cboBindProp.DisplayValue = .BindProp
						THIS.chkStartup.Value = .lInvokeAtStart
						THIS.chkAlwaysCallWebService.Value = .lAlwaysCallWebService
						THIS.cboBind.DisplayValue = .BindSource
						THIS.DStable = .DSTable
						THIS.DSField = .DSField
						THIS.DSUseExistingCursor = .DSUseExistingCursor
						THIS.Nodename = .Nodename
						
						* Save original settings to validate later
						THIS.cControl=.Clientname
						THIS.cControlPath=.ObjectRef
						THIS.cControlProp=.BindProp
						RETURN
					ENDIF
				ENDIF
			ENDWITH
		ENDIF
		
		THIS.lEditMode=.F.
		THIS.cboBind.ListIndex=1
		THIS.cboBindProp.DisplayValue = DEF_BINDPROP
		THIS.UpdateObject()
		
	ENDPROC

	PROCEDURE updateobject		&& Reserved.
		LOCAL laParent, lcObject, loObject, laPEMs, i, lnPEMs, lcObjPath, loErr, lHadError, lcErrMsg
		
		* This routine essentially updates the cboPEMs dropdown with 
		* properties of the selected object.
		
		DIMENSION laParent[1]
		DIMENSION laPEMs[1]
		
		THIS.cboPEMS.Clear()
		IF EMPTY(THIS.olecontrols.cControlPath)
			* User unchecked item
			THIS.cboPEMS.Enabled = .F.
			RETURN
		ELSE
			THIS.cboPEMS.Enabled = .T.
		ENDIF
		
		lcObjPath = THIS.olecontrols.cControlPath
		
		IF THIS.oleControls.lDataenv
			IF VARTYPE(THIS.oleControls.oDataenv)="O"
				loObject = THIS.oleControls.oDataenv
			ELSE
				ASELOBJ(laParent,2)
				loObject = laParent[1]
			ENDIF
		ELSE
			loObject = THIS.oleControls.oContainer
		ENDIF
		
		IF ATC(".", lcObjPath)#0	&& we do not have outer container
			lcObject = SUBSTRC(lcObjPath, ATC(".", lcObjPath)+1)
			* Check if object exists
			TRY
				loObject = loObject.&lcObject.
			CATCH TO loErr
				lHadError=.T.
				lcErrMsg=loErr.Message
			ENDTRY
		ENDIF
		
		IF lHadError
			THIS.olecontrols.cControlPath=""
			THIS.cboPEMS.Enabled = .F.
			RETURN !lHadError
		ENDIF
		
		* Update the Bind Property combo
		THIS.cboBindProp.Clear()
		THIS.cboBindProp.DisplayValue = ""
		lnPEMs = AMEMBERS(laPEMs, loObject, 1, "U")
		FOR i = 1 TO lnPEMs
			IF !PEMSTATUS(loObject, laPEMs[m.i, 1], 1) AND ATC("OBJECT", laPEMs[m.i, 2])=0
				THIS.cboBindProp.AddItem(PROPER(laPEMs[m.i, 1]))
			ENDIF
		ENDFOR
		
		* Update the Bind Target combo
		lnPEMs = AMEMBERS(laPEMs, loObject,0)
		THIS.cboPEMS.AddItem(WSNONE_LOC)
		FOR i = 1 TO lnPEMs
			IF !PEMSTATUS(loObject, laPEMs[m.i],1)
				THIS.cboPEMS.AddItem(PROPER(laPEMs[m.i]))
			ENDIF
		ENDFOR
		
		* Set default values
		DO CASE
		CASE PEMSTATUS(loObject, "CursorFill", 5)
			* Special case for CursorAdapter *
			THIS.cboPEMS.ListIndex=1
			THIS.cboPEMS.Enabled = .F.
			THIS.cboBindProp.AddItem("CursorFill")
			THIS.cboBindProp.DisplayValue = "CursorFill"
		CASE ASCAN(laPEMs,"RECORDSOURCE")#0
			THIS.cboPEMS.DisplayValue = "Recordsource"
		CASE ASCAN(laPEMs,"VALUE")#0
			THIS.cboPEMS.DisplayValue = "Value"
		CASE ASCAN(laPEMs,"CAPTION")#0
			THIS.cboPEMS.DisplayValue = "Caption"
		OTHERWISE
			THIS.cboPEMS.ListIndex = 1
		ENDCASE
		
		THIS.oControl = loObject
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.oCallee.oClient=""
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdComplex.Click
		LOCAL loComplexForm
		loComplexForm = NEWOBJECT("wsBuilder3", THISFORM.ClassLibrary)
		loComplexForm.oCallee = THISFORM
		loComplexForm.SetupObjects()
		loComplexForm.SHOW()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		DO CASE
		CASE EMPTY(THISFORM.OLEcontrols.cControlpath)
			MESSAGEBOX(MB_NOCONTROL_LOC)
			RETURN
		CASE EMPTY(ALLTRIM(THISFORM.cboBindProp.DisplayValue))
			MESSAGEBOX(MB_PROPNAME_LOC)
			RETURN
		CASE EMPTY(ALLTRIM(THISFORM.txtClient.Value))
			MESSAGEBOX(MB_CLIENTNAME_LOC)
			RETURN
		ENDCASE
		
		* Validate property name here
		IF ASCAN(THISFORM.aClientprops, THISFORM.olecontrols.cControlPath+ "," + ALLTRIM(THISFORM.cboBindProp.DisplayValue), -1, -1, -1, 7)#0
			IF !THISFORM.lEditmode OR !THISFORM.olecontrols.cControlPath==THISFORM.cControlPath ;
			  OR !ALLTRIM(THISFORM.cboBindProp.DisplayValue)==THISFORM.cControlprop
				MESSAGEBOX(MB_UNIQUEPEM_LOC)
				RETURN	
			ENDIF
		ENDIF
		
		WITH THISFORM.oCallee.oClient
			.ClientName = ALLTRIM(THISFORM.txtClient.Value)
		 	.ObjectRef = THISFORM.OLEcontrols.cControlpath
		 	.BindTarget = THISFORM.cboPEMS.DisplayValue
			.BindProp = ALLTRIM(THISFORM.cboBindProp.DisplayValue)
			.BindSource = THISFORM.cboBind.DisplayValue
			.lInvokeAtStart = THISFORM.chkStartup.Value
			.lAlwaysCallWebService = THISFORM.chkAlwaysCallWebService.Value
			.DSTable = THISFORM.DSTable
			.DSField = THISFORM.DSField
			.DSUseExistingCursor = THISFORM.DSUseExistingCursor
			.NodeName = THISFORM.Nodename
		ENDWITH
		
		IF ATC("CursorFill", THISFORM.cboBindProp.DisplayValue)#0 AND THISFORM.chkStartup.Value AND;
			TYPE("THISFORM.oleControls.oContainer.BindControls")=="L" AND THISFORM.oleControls.oContainer.BindControls
			MESSAGEBOX(BINDCONTROLS_LOC)
		ENDIF
		
		THISFORM.oCallee.nAction = 1
		
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Olecontrols.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		IF keyascii=27
			THISFORM.cmdCancel.Click()
		ENDIF
	ENDPROC

	PROCEDURE Olecontrols.NodeCheck
		*** ActiveX Control Event ***
		LPARAMETERS node
		
		DODEFAULT(node)
		
		LOCAL lcControl, lnCounter
		THISFORM.UpdateObject()
		
		IF EMPTY(THIS.cControlPath)
			THISFORM.txtClient.Value = ""
			RETURN	
		ENDIF
		
		* Get new Client Name
		lcControl = node.Text
		lnCounter = 2
		DO WHILE .T.
			IF ASCAN(THISFORM.aClients, lcControl,-1,-1,-1,7)=0
				EXIT
			ENDIF
			IF THISFORM.lEditmode AND UPPER(THISFORM.cControl)==UPPER(lcControl)
				EXIT
			ENDIF
			lcControl= node.Text + " (#" + TRANSFORM(lnCounter) + ")"
			lnCounter = lnCounter + 1
		ENDDO
		THISFORM.txtClient.Value = lcControl
		
		* Get unique Property name
		THISFORM.cboBindProp.DisplayValue =THISFORM.GetPropNames()
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbuilder3 AS wsbasebuilder OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Optiongroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboTables" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkExisting" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAttach" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdQuery" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboFields" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboValues" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdReset" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Wshandler" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Colparms" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: attachschema		&& Reserved.
		*m: checkcadapter		&& Reserved.
		*m: setupobjects		&& Reserved.
		*m: updatefields		&& Reserved.
		*p: lhascursoradapter		&& Reserved.
		*p: ocallee		&& Reserved.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "XML Web Service - Complex Types"
	DoCreate = .T.
	Height = 292
	HelpContextID = 1231134
	MinWidth = 390
	Name = "wsbuilder3"
	Width = 399
	WindowType = 1

	ADD OBJECT 'cboFields' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 132, ;
		Name = "cboFields", ;
		TabIndex = 6, ;
		Top = 136, ;
		Width = 240, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboTables' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 132, ;
		Name = "cboTables", ;
		TabIndex = 4, ;
		Top = 108, ;
		Width = 240, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboValues' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 132, ;
		Name = "cboValues", ;
		TabIndex = 9, ;
		Top = 210, ;
		Width = 240, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkExisting' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Use existing cursor if already opened", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 48, ;
		Name = "chkExisting", ;
		TabIndex = 7, ;
		Top = 162, ;
		Value = .T., ;
		Width = 196, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdAttach' AS commandbutton WITH ;
		Caption = "\<Attach Schema", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 157, ;
		Name = "cmdAttach", ;
		TabIndex = 12, ;
		Top = 258, ;
		Width = 84, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 328, ;
		Name = "cmdCancel", ;
		TabIndex = 14, ;
		Top = 258, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 264, ;
		Name = "cmdOK", ;
		TabIndex = 13, ;
		Top = 258, ;
		Width = 60, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdQuery' AS commandbutton WITH ;
		Caption = "\<Query", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 16, ;
		Name = "cmdQuery", ;
		TabIndex = 10, ;
		Top = 258, ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdReset' AS commandbutton WITH ;
		Caption = "\<Reset", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 80, ;
		Name = "cmdReset", ;
		TabIndex = 11, ;
		Top = 258, ;
		Width = 60, ;
		ZOrderSet = 6
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Colparms' AS colparms WITH ;
		Left = 348, ;
		Name = "Colparms", ;
		Top = 78
		*< END OBJECT: ClassLib="_ws3client.vcx" BaseClass="collection" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Dataset \<tables:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 48, ;
		Name = "Label1", ;
		TabIndex = 3, ;
		Top = 112, ;
		Width = 76, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "You can specify advanced options such as ADO.Net Dataset table and field names or property values for your complex types. Type the value in the combo box or click the Query button to call your Web service and retrieve a list of available options.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 54, ;
		Left = 12, ;
		Name = "Label2", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 365, ;
		WordWrap = .T., ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Table \<fields:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 48, ;
		Name = "Label3", ;
		TabIndex = 5, ;
		Top = 140, ;
		Width = 60, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Values:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 48, ;
		Name = "Label4", ;
		TabIndex = 8, ;
		Top = 216, ;
		Width = 37, ;
		ZOrderSet = 5
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Optiongroup1' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 168, ;
		Left = 12, ;
		Name = "Optiongroup1", ;
		TabIndex = 2, ;
		Top = 78, ;
		Value = 1, ;
		Width = 372, ;
		ZOrderSet = 0, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "\<Dataset", ;
		Option1.ControlSource = "", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 15, ;
		Option1.Left = 10, ;
		Option1.Name = "Option1", ;
		Option1.Top = 10, ;
		Option1.Value = 1, ;
		Option1.Width = 56, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "\<Object", ;
		Option2.ControlSource = "", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 15, ;
		Option2.Left = 10, ;
		Option2.Name = "Option2", ;
		Option2.Top = 112, ;
		Option2.Width = 50
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'Wshandler' AS wshandler WITH ;
		Height = 25, ;
		Left = 324, ;
		Name = "Wshandler", ;
		Top = 78, ;
		Width = 24
		*< END OBJECT: ClassLib="_ws3client.vcx" BaseClass="custom" />
	
	PROCEDURE attachschema		&& Reserved.
		LOCAL loTable, loField, lcFieldList, lcFieldExpr, lcType 
		
		IF THIS.cbotables.ListCount = 0
			RETURN
		ENDIF
		
		IF MESSAGEBOX(CONFIRM_ATTACHSCHEMA_LOC,36)#6
			RETURN
		ENDIF
		
		TRY
			lcFieldList=""
			loTable = THISFORM.wshandler.oAdapter.Tables.Item(THIS.cbotables.ListIndex)
		
			FOR EACH loField IN loTable.Fields
				
				lcType = loField.DataType
				DO CASE
				CASE ATC("C", loField.DataType)#0
					lcType= lcType +"(" + TRANSFORM(loField.MaxLength) +")"
				CASE ATC("N", loField.DataType)#0
					lcType= lcType +"(" + TRANSFORM(loField.MaxLength) +","+TRANSFORM(loField.FractionDigits)+")"
				ENDCASE
		
				lcFieldExpr = loField.Alias + " " + lcType
				
				* Limited to 255 chars for Property in Property Sheet
				IF LEN(lcFieldList + "," + lcFieldExpr)>255
					EXIT
				ENDIF
				IF !EMPTY(lcFieldList)
					lcFieldList = lcFieldList + ","
				ENDIF
				lcFieldList = lcFieldList + lcFieldExpr
			ENDFOR
			
			IF !EMPTY(lcFieldList)
				THIS.oCallee.oControl.CursorSchema = lcFieldList
				THIS.oCallee.oControl.Parent.Refresh()
			ENDIF	
		CATCH
		
		ENDTRY
		
	ENDPROC

	PROCEDURE checkcadapter		&& Reserved.
		IF TYPE("THIS.oCallee.oControl")#"O"
			RETURN
		ENDIF
		
		IF ATC("CursorAdapter", THIS.oCallee.oControl.BaseClass)#0 AND;
		  ALLTRIM(UPPER(THIS.oCallee.cboBindProp.DisplayValue))=="CURSORFILL"
			THIS.lHasCursorAdapter=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LPARAMETER toObject2, tuSource2, tlSkipSearch2
		RETURN
	ENDPROC

	PROCEDURE setupobjects		&& Reserved.
		THIS.Checkcadapter()
		
		WITH THIS.oCallee
		
			THIS.wshandler.Wsdl = .Wsdl
			THIS.wshandler.Wsml = .Wsml
			THIS.wsmethod = .wsMethod
			THIS.wsSyntax = .wsSyntax 
			THIS.cboTables.DisplayValue = .DSTable
			THIS.cboFields.DisplayValue = .DSField
			THIS.chkExisting.Value = .DSUseExistingCursor 
			THIS.cboValues.DisplayValue = .NodeName
			
			IF EMPTY(.DSTable) AND !EMPTY(.NodeName) AND !THIS.lHasCursorAdapter
				THIS.Optiongroup1.Value=2
			ENDIF
			
		ENDWITH
		
		IF THIS.lHasCursorAdapter
			THIS.chkExisting.Enabled=.F.
			THIS.Optiongroup1.Option2.Enabled=.F.
		ENDIF
		
	ENDPROC

	PROCEDURE updatefields		&& Reserved.
		LOCAL loTable, loField, lcOldField, i, lFound
		
		IF THIS.cbotables.ListCount = 0 OR VARTYPE(THISFORM.wshandler.oAdapter)#"O"
			RETURN
		ENDIF
		
		lcOldField=ALLTRIM(THISFORM.cboFields.DisplayValue)
		
		TRY
			THIS.cboFields.Clear()
			loTable = THISFORM.wshandler.oAdapter.Tables.Item(THIS.cbotables.ListIndex)
			FOR EACH loField IN loTable.Fields
				THIS.cboFields.AddItem(loField.Alias)
			ENDFOR
		
			* Special handling first time to save original field
			IF THIS.cmdquery.Enabled AND !EMPTY(lcOldField)
				FOR i = 1 TO THIS.cboFields.ListCount
					IF UPPER(THIS.cboFields.List(m.i))==UPPER(lcOldField)
						THIS.cboFields.ListIndex=m.i
						lFound=.T.
						EXIT
					ENDIF
				ENDFOR
			ENDIF
			IF THIS.cboFields.ListCount>0 AND !lFound
				THIS.cboFields.ListIndex=1
			ENDIF
		CATCH
		ENDTRY
		
	ENDPROC

	PROCEDURE cboTables.InteractiveChange
		THISFORM.Updatefields()
	ENDPROC

	PROCEDURE cmdAttach.Click
		THISFORM.AttachSchema()
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		WITH THISFORM.oCallee
			IF THISFORM.Optiongroup1.Value=1
				.DSTable = ALLTRIM(THISFORM.cboTables.DisplayValue)
				.DSField = ALLTRIM(THISFORM.cboFields.DisplayValue)
				.NodeName = ""
			ELSE
				.DSTable = ""
				.DSField = ""
				.NodeName = ALLTRIM(THISFORM.cboValues.DisplayValue)
			ENDIF
			.DSUseExistingCursor = THISFORM.chkExisting.Value
		ENDWITH
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdQuery.Click
		LOCAL loParmForm, lHasDataSet, leRetVal, i, laPEMs, lcLastPem, lnCount
		LOCAL lcOldTable, lcOldValue, lFound, lcErrMsg, lcAlias, lSuccess
		
		lcOldTable = ALLTRIM(THISFORM.cboTables.DisplayValue)
		lcOldValue =	ALLTRIM(THISFORM.cboValues.DisplayValue)
		
		IF THISFORM.oCallee.cboBind.ListIndex#1
			MESSAGEBOX(NOCOMPLEXPARM_LOC)
			RETURN
		ENDIF
		
		IF THISFORM.oCallee.oOperation.colParms.Count>0
			loParmForm = NEWOBJECT("wsParms", HOME()+"FFC\_ws3client.vcx")
			loParmForm.oColParms = THISFORM.oCallee.oOperation.colParms
			loParmForm.SetupWS()
			loParmForm.Show(1)
		ENDIF
		
		IF !THISFORM.wshandler.Invoke(THISFORM.oCallee.oOperation)
			lcErrMsg = BADTYPE1_LOC
			IF !EMPTY(THISFORM.wshandler.SoapErrorDetail)
				lcErrMsg = lcErrMsg +CRLF +CRLF + THISFORM.wshandler.SoapErrorDetail
			ENDIF
			MESSAGEBOX(lcErrMsg)
			RETURN
		ENDIF
		
		leRetVal = THISFORM.wsHandler.ReturnValue
		
		DO CASE
		CASE VARTYPE(leRetVal) #"O"
		
			IF VARTYPE(leRetVal) ="C" AND LOWER(LEFT(ALLTRIM(leRetVal),5))="<?xml"
				TRY
					lSuccess=.T.
					XMLTOCURSOR(leRetVal)
					IF MESSAGEBOX(XMLHASCURSOR_LOC,36)=6
						THISFORM.cboTables.Clear()
						THISFORM.cboFields.Clear()
						THISFORM.cboTables.AddItem(ALIAS())
						FOR i = 1 TO FCOUNT()
							THISFORM.cboFields.AddItem(FIELD(m.i))
						ENDFOR
						THISFORM.cboTables.ListIndex=1
						THISFORM.cboFields.ListIndex=1
						lHasDataSet=.T.
					ELSE
						lSuccess=.F.
					ENDIF
				CATCH
					MESSAGEBOX(BADTYPE2_LOC)		
					lSuccess=.F.
				ENDTRY
			ELSE
				MESSAGEBOX(BADTYPE2_LOC)		
			ENDIF
			IF !lSuccess
				RETURN
			ENDIF
		
		CASE TYPE("leRetVal.length")="N"
		
			IF leRetVal.length=0
				MESSAGEBOX(BADTYPE2_LOC)
				RETURN
			ENDIF
		
			lHasDataSet = ATC("IsDataSet", STRCONV(leRetVal.item(0).xml,9))#0
			IF lHasDataSet
				IF THISFORM.wshandler.GenDataset(leRetVal, THISFORM.wshandler)
					FOR i = 1 TO THISFORM.wshandler.oAdapter.Tables.Count
						lcAlias = THISFORM.wshandler.oAdapter.Tables.Item(m.i).Alias
						THISFORM.cboTables.AddItem(lcAlias)
					ENDFOR
					DO CASE
					CASE THISFORM.cboTables.ListCount=0
					CASE EMPTY(lcOldTable)
						THISFORM.cboTables.ListIndex=1
					OTHERWISE
						* Need to loop through items to ensure valid table
						FOR i = 1 TO THISFORM.cboTables.ListCount
							IF UPPER(THISFORM.cboTables.List(m.i))==UPPER(lcOldTable)
								THISFORM.cboTables.ListIndex=m.i
								lFound=.T.
								EXIT
							ENDIF
						ENDFOR
						IF !lFound
							THISFORM.cboTables.ListIndex=1
						ENDIF
					ENDCASE
					THISFORM.UpdateFields()
				ENDIF
			ELSE
				* Has XMLDOMNode object
				FOR i = 1 TO leRetVal.Length
					IF leRetVal.item(m.i-1).nodeType=1 	&&handle Elements only
						THISFORM.cboValues.AddItem(leRetVal.item(m.i-1).nodeName)
					ENDIF
				ENDFOR
			ENDIF
		
		OTHERWISE
		
			* Has COM Object here
			DIMENSION laPEMs[1]
			lnCount = AMEMBERS(laPEMs, leRetVal, 3)
			lcLastPem = ""
			FOR i = 1 TO lnCount
				IF lcLastPem==laPEMs[m.i, 1]
					LOOP
				ENDIF
				THISFORM.cboValues.AddItem(laPEMs[m.i, 1])
				lcLastPem = laPEMs[m.i, 1]
			ENDFOR
		
		ENDCASE
		
		IF EMPTY(lcOldValue) AND THISFORM.cboValues.ListCount>0
			THISFORM.cboValues.ListIndex=1
		ENDIF
		
		THISFORM.cboTables.Enabled = lHasDataSet
		THISFORM.cboFields.Enabled = lHasDataSet
		THISFORM.cboValues.Enabled = !lHasDataSet
		THISFORM.Optiongroup1.Option1.Enabled=lHasDataSet
		THISFORM.Optiongroup1.Option2.Enabled=!lHasDataSet
		THISFORM.Optiongroup1.Value = IIF(lHasDataSet, 1, 2)
		IF THISFORM.lHasCursorAdapter AND lHasDataSet AND VARTYPE(THISFORM.wshandler.oAdapter)="O"
			THISFORM.cmdAttach.Enabled=.T.
		ENDIF
		THIS.Enabled=.F.
	ENDPROC

	PROCEDURE cmdReset.Click
		THISFORM.cboTables.DisplayValue = ""
		THISFORM.cboFields.DisplayValue = ""
		THISFORM.cboValues.DisplayValue=""
		
	ENDPROC

	PROCEDURE Optiongroup1.InteractiveChange
		THISFORM.cboTables.Enabled = (THIS.Value=1)
		THISFORM.cboFields.Enabled = (THIS.Value=1)
		THISFORM.chkExisting.Enabled = (THIS.Value=1 AND !THISFORM.lHascursoradapter)
		THISFORM.cboValues.Enabled = (THIS.Value=2)
	ENDPROC

	PROCEDURE Optiongroup1.ProgrammaticChange
		THIS.InteractiveChange()
	ENDPROC

ENDDEFINE

DEFINE CLASS wsbuilder4 AS wsbasebuilder OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Optiongroup1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstParms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oleControls" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboPEMS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtValue" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblParmType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSyntax" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lbldesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colParms" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: saveparm		&& Reserved.
		*m: setupws		&& Reserved.
		*m: updateobject		&& Reserved.
		*m: updateparm		&& Reserved.
		*p: ccontrolpath		&& Reserved.
		*p: nlastindex		&& Reserved.
		*p: ocallee		&& Reserved.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	Caption = "XML Web Service - Parameter Values"
	DoCreate = .T.
	Height = 390
	HelpContextID = 1231132
	Name = "wsbuilder4"
	nlastindex = 1		&& Reserved.
	Width = 409

	ADD OBJECT 'cboPEMS' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 168, ;
		Name = "cboPEMS", ;
		Style = 2, ;
		TabIndex = 12, ;
		Top = 312, ;
		Width = 216, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 340, ;
		Name = "cmdCancel", ;
		TabIndex = 14, ;
		Top = 360, ;
		Width = 60, ;
		ZOrderSet = 3
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 276, ;
		Name = "cmdOK", ;
		TabIndex = 13, ;
		Top = 360, ;
		Width = 60, ;
		ZOrderSet = 1
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'colParms' AS colparms WITH ;
		Left = 12, ;
		Name = "colParms", ;
		Top = 360
		*< END OBJECT: ClassLib="_ws3client.vcx" BaseClass="collection" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Parameter type:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label1", ;
		TabIndex = 6, ;
		Top = 240, ;
		Width = 81, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Specify parameter source:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 144, ;
		Name = "Label3", ;
		TabIndex = 8, ;
		Top = 104, ;
		Width = 129, ;
		ZOrderSet = 4
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Select parameter:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label4", ;
		TabIndex = 4, ;
		Top = 104, ;
		Width = 88, ;
		ZOrderSet = 9
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Syntax:", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label5", ;
		TabIndex = 2, ;
		Top = 60, ;
		Width = 40, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lbldesc' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = 'Please enter parameter values for your XML Web service operation. To specify an expression, preface the value with an "=" character. You can also specify a control and its property as an input source.', ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 41, ;
		Left = 12, ;
		Name = "lbldesc", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 349, ;
		WordWrap = .T., ;
		ZOrderSet = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblParmType' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 36, ;
		Left = 12, ;
		Name = "lblParmType", ;
		TabIndex = 7, ;
		Top = 264, ;
		Width = 120, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSyntax' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 36, ;
		Left = 60, ;
		Name = "lblSyntax", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 332, ;
		ZOrderSet = 12
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lstParms' AS listbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 120, ;
		IntegralHeight = .T., ;
		ItemTips = .T., ;
		Left = 12, ;
		Name = "lstParms", ;
		TabIndex = 5, ;
		Top = 120, ;
		Width = 120, ;
		ZOrderSet = 2
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'oleControls' AS olecontrols WITH ;
		Height = 96, ;
		Left = 168, ;
		Name = "oleControls", ;
		TabIndex = 11, ;
		Top = 208, ;
		Width = 216, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="olecontrol" OLEObject="c:\winnt\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgv////7///8EAAAA/vbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDpsuGEnMIBAwAAAIACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAiwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAACYBAAAAAAAABAAAAAIAAAD+////BQAAAAkAAAAGAAAABwAAAAgAAAD+/////vkEHHiYXREbFqAMDwKDYoIUM0EggAAABTFgAA7AkAALE8wWoBAAYAIgAAAD0AAADtAwAACQAAAFkcGQAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFACgeGQAGAAAAAAAAAAUAAIBY6hIAAQAAAC4AH97svQEABQBh6hIAA1LjC5GPzhGd4wCqAEu4UQEAAACQAQAAQ0AKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAANAAAATW91c2VQb2ludGVyAAkAAABJCgAAAAAAAAAOAAAAUGF0aFNlcGFyYXRvcgAKAAAASAAAAAABAAAALgwAAABPTEVEcmFnTW9kZQAJAAAASQoAAAAAAAAADAAAAE9MRURyb3BNb2RlAAkAAABJCgAAAAAAAAALAAAAQXBwZWFyYW5jZQAJAAAASQoAAAABAAAACwAAAENoZWNrYm94ZXMABQAAAEwBAAAAbwBwAGUAcgB0AHkALgAgAFQAaABlAHkAIABEQgEABlRhaG9tYQAgAGEAZABkAGUAZAAgAGEAdAAgAGIAbwB0AGgAIABkAGUAcwBpAGcAbgAgAGEAbgBkACAAcgB1AG4AIAB0AGkAbQBlAC4AIABBAHQAIABkAGUAcwBpAGcAbgAgAHQAaQBtAGUALAAgAHkAbwB1ACAAYwBhAG4AIAB1AHMAZQAgAHQAaABlACAAQwBvAGwAdQBtAG4AIABIAGUAYQBkAGUAcgBzACAAdABhAGIAIABvAGYAIAB0AGgAZQAgAO/9TABpAHMAdABWAGkAZQB3AO/9IABDAG8AbgB0AHIAbwBsACAAUAByAG8AcABlAHIAdABpAGUAcwAgAGQAaQBhAGwAbwBnACAAYgBvAHgALgAgAEEAdAAgAHIAdQBuACAAdABpAG0AZQAsACAAdQBzAGUAIAB0AGgAZQAgAO/9QQBkAGQA7/0gAG0AZQB0AGgAbwBkACAAdABvACAAYQBkAGQAIABhACAA7/1DAG8AbAB1AG0AbgBIAGUAYQBkAGUAcgDv/SAAbwBiAGoAZQBjAHQAIAB0AG8AIAB0AGgAZQAgAO/9QwBvAGwAdQBtAG4ASABlAGEA" />

	ADD OBJECT 'Optiongroup1' AS optiongroup WITH ;
		BackStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 228, ;
		Left = 144, ;
		Name = "Optiongroup1", ;
		TabIndex = 9, ;
		Top = 120, ;
		Value = 1, ;
		Width = 252, ;
		ZOrderSet = 0, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "\<Value (expression):", ;
		Option1.ControlSource = "", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 15, ;
		Option1.Left = 6, ;
		Option1.Name = "Option1", ;
		Option1.Top = 14, ;
		Option1.Value = 1, ;
		Option1.Width = 111, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "\<Control/Property:", ;
		Option2.ControlSource = "", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 15, ;
		Option2.Left = 6, ;
		Option2.Name = "Option2", ;
		Option2.Top = 70, ;
		Option2.Width = 103
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'txtValue' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 36, ;
		InputMask = (REPLICATE("X", 254)), ;
		Left = 168, ;
		MaxLength = 255, ;
		Name = "txtValue", ;
		TabIndex = 10, ;
		Top = 151, ;
		Width = 216, ;
		ZOrderSet = 11
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Init
		LPARAMETER toObject2, tuSource2, tlSkipSearch2
		RETURN
	ENDPROC

	PROCEDURE saveparm		&& Reserved.
		LOCAL lnIndex, loParm
		lnIndex = THIS.nlastindex
		loParm = THIS.colParms.Item(lnIndex)
		
		IF THIS.Optiongroup1.Value=1
			loParm.InputValue=ALLTRIM(THIS.txtValue.Value)
			loParm.InputControl = ""
			loParm.InputProperty = ""
		ELSE
			loParm.InputValue=""
			loParm.InputControl = THIS.cControlPath
			loParm.InputProperty = THIS.cboPEMS.DisplayValue
		ENDIF
		
	ENDPROC

	PROCEDURE setupws		&& Reserved.
		LOCAL loParm, i
		
		* Check for valid objects on form to bind to
		IF THIS.olecontrols.Nodes.Count=0
			THIS.optiongroup1.option2.Enabled=.F.
		ENDIF
		
		* Ensure first node always expanded
		IF THIS.olecontrols.Nodes.Count>0
			THIS.olecontrols.Nodes.Item(1).Expanded=.T.
		ENDIF
		
		* Update List of parms
		FOR EACH loParm IN THIS.oCallee.colParms
			THIS.colParms.Add(loparm)
			THIS.lstParms.AddItem(loParm.ParmName)
		ENDFOR
		
		THIS.lstParms.ListIndex=1
		THIS.lblsyntax.Caption=THIS.oCallee.WsSyntax
		THIS.UpdateParm()
		
	ENDPROC

	PROCEDURE updateobject		&& Reserved.
		LOCAL loObject, lcObject, laPEMs, i, lnPEMs, loParm 
		DIMENSION laPEMs[1]
		
		* This routine essentially updates the cboPEMs dropdown with
		* properties of the selected object.
		
		THIS.cControlpath = THIS.olecontrols.cControlPath
		lcObjPath = THIS.olecontrols.cControlPath
		THIS.cboPEMS.Clear()
		IF EMPTY(THIS.olecontrols.cControlPath)
			THIS.cboPEMS.Enabled = .F.
			RETURN
		ELSE
			THIS.cboPEMS.Enabled = .T.
		ENDIF
		
		loObject = THIS.olecontrols.oContainer
		IF ATC(".", lcObjPath)#0	&& we have outer container
			lcObject = SUBSTRC(lcObjPath, ATC(".", lcObjPath)+1) && trim off outer name of parent
			loObject = loObject.&lcObject.
		ENDIF
		
		* Update the Bind Target combo
		lnPEMs = AMEMBERS(laPEMs, loObject, 0)
		THIS.cboPEMS.AddItem(WSNONE_LOC)
		FOR i = 1 TO lnPEMs
			IF !PEMSTATUS(loObject, laPEMs[m.i],1)
				THIS.cboPEMS.AddItem(PROPER(laPEMs[m.i]))
			ENDIF
		ENDFOR
		
		* Set default values
		loParm = THIS.colParms.Item(THIS.lstParms.ListIndex)
		IF !EMPTY(loParm.InputProperty)
			THIS.cboPEMS.Value = loParm.InputProperty	
		ELSE
			DO CASE
			CASE ASCAN(laPEMs,"VALUE")#0
				THIS.cboPEMS.Value = "Value"
			CASE ASCAN(laPEMs,"CAPTION")#0
				THIS.cboPEMS.Value = "Caption"
			CASE ASCAN(laPEMs,"RECORDSOURCE")#0
				THIS.cboPEMS.Value = "Recordsource"
			OTHERWISE
				THIS.cboPEMS.ListIndex = 1
			ENDCASE
		ENDIF
	ENDPROC

	PROCEDURE updateparm		&& Reserved.
		LOCAL lnIndex, loParm, loNode
		
		lnIndex = THIS.lstParms.ListIndex
		loParm = THIS.colParms.Item(lnIndex)
		THIS.lblParmType.Caption = loParm.ParmType
		THIS.nlastindex=lnIndex
		THIS.Optiongroup1.Value=0
		
		* Value parameter
		IF EMPTY(loParm.InputControl)
			THIS.txtValue.Value=loParm.InputValue
			THIS.oleControls.cControlpath = ""
			IF !EMPTY(THIS.oleControls.cCheckedKey)
				THIS.oleControls.Nodes(THIS.oleControls.cCheckedKey).Checked=.F.
			ENDIF
			THIS.oleControls.cCheckedkey=""
			THIS.Optiongroup1.Value=1
			RETURN
		ENDIF
		
		* Need to locate this path 
		THIS.oleControls.cControlpath = loParm.InputControl
		THIS.txtValue.Value=""
		
		FOR EACH loNode IN THIS.olecontrols.Nodes
			IF UPPER(loNode.FullPath)==UPPER(THIS.oleControls.cControlpath)
				loParm.InputValue=""
				loNode.Selected = .T.
				loNode.EnsureVisible()
				IF !loNode.Checked
					loNode.Checked=.T.
					THIS.oleControls.NodeCheck(loNode)
				ENDIF
				EXIT
			ENDIF
		ENDFOR
		THIS.optiongroup1.Value=2
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdOK.Click
		* Update List of parms
		LOCAL loParm
		THISFORM.SaveParm()
		THISFORM.oCallee.colParms.Remove(-1)
		FOR EACH loParm IN THISFORM.colParms
			THISFORM.oCallee.colParms.Add(loparm)
		ENDFOR
		THISFORM.Release()
	ENDPROC

	PROCEDURE lstParms.InteractiveChange
		THISFORM.SaveParm()
		THISFORM.UpdateParm()
	ENDPROC

	PROCEDURE oleControls.KeyPress
		*** ActiveX Control Event ***
		LPARAMETERS keyascii
		IF keyascii=27
			THISFORM.cmdCancel.Click()
		ENDIF
	ENDPROC

	PROCEDURE oleControls.NodeCheck
		*** ActiveX Control Event ***
		LPARAMETERS node
		DODEFAULT(node)
		THISFORM.UpdateObject()
		
	ENDPROC

	PROCEDURE oleControls.Refresh
		*** ActiveX Control Method ***
		
	ENDPROC

	PROCEDURE Optiongroup1.InteractiveChange
		IF THIS.Value=0
			RETURN
		ENDIF
		THISFORM.txtValue.Enabled = (THIS.Value=1)
		THISFORM.oleControls.Object.Enabled = (THIS.Value=2)
		THISFORM.cboPEMS.Enabled = (THIS.Value=2)
		THISFORM.Updateobject()
	ENDPROC

	PROCEDURE Optiongroup1.ProgrammaticChange
		THIS.InteractiveChange()
	ENDPROC

ENDDEFINE

DEFINE CLASS wsconfig AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgDefaultVD" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboVirDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtNewVirDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtPath" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGetDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblDesc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkDefault" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: getwslocation		&& Reserved.
		*m: setup		&& Reserved.
		*p: cdefpath		&& Reserved.
		*p: cdefuri		&& Reserved.
		*p: curllocation		&& Reserved.
		*p: curlpath		&& Reserved.
		*p: ldefaultmode		&& Reserved.
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Visual FoxPro XML Web Service Location"
	cdefpath = 		&& Reserved.
	cdefuri = 		&& Reserved.
	curllocation = 		&& Reserved.
	curlpath = 		&& Reserved.
	Desktop = .T.
	DoCreate = .T.
	Height = 239
	HelpContextID = 1231136
	ldefaultmode = .F.		&& Reserved.
	MaxButton = .F.
	MinButton = .F.
	Name = "wsconfig"
	Width = 542
	WindowType = 1

	ADD OBJECT 'cboVirDir' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		InputMask = (REPLICATE("X",255)), ;
		Left = 192, ;
		Name = "cboVirDir", ;
		TabIndex = 5, ;
		Top = 100, ;
		Width = 324
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'chkDefault' AS checkbox WITH ;
		Caption = "Set selected URL as \<default Web service location", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "chkDefault", ;
		TabIndex = 11, ;
		Top = 214, ;
		Value = .F., ;
		Width = 272
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 456, ;
		Name = "cmdCancel", ;
		TabIndex = 13, ;
		Top = 208, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdGetDir' AS commandbutton WITH ;
		Caption = "...", ;
		Default = .F., ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 492, ;
		Name = "cmdGetDir", ;
		TabIndex = 8, ;
		Top = 132, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "\<Select", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 380, ;
		Name = "cmdOK", ;
		TabIndex = 12, ;
		Top = 208, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'lblDesc' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Choose Existing to select an existing location to publish your Web service(s). Select New to create a new virtual directory, which will be created below the level selected in the dropdown. If you select Cancel, you will be prompted later.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 12, ;
		Name = "lblDesc", ;
		TabIndex = 2, ;
		Top = 24, ;
		Width = 505, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblNew' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Ne\<w Virtual Directory Name:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 24, ;
		Name = "lblNew", ;
		TabIndex = 9, ;
		Top = 167, ;
		Width = 137
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblPath' AS label WITH ;
		AutoSize = .T., ;
		Caption = "File \<Output Path:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 24, ;
		Name = "lblPath", ;
		TabIndex = 6, ;
		Top = 136, ;
		Width = 84
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSelect' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Select \<Location (Virtual Directory):", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 24, ;
		Name = "lblSelect", ;
		TabIndex = 4, ;
		Top = 104, ;
		Width = 166
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblType' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Select Location for your XML Web Service Files", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblType", ;
		TabIndex = 1, ;
		Top = 6, ;
		Width = 225
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'opgDefaultVD' AS optiongroup WITH ;
		AutoSize = .F., ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 126, ;
		Left = 12, ;
		Name = "opgDefaultVD", ;
		TabIndex = 3, ;
		Top = 72, ;
		Value = 1, ;
		Width = 516, ;
		Option1.AutoSize = .F., ;
		Option1.Caption = "\<Existing", ;
		Option1.ControlSource = "", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 7, ;
		Option1.Name = "Option1", ;
		Option1.Style = 0, ;
		Option1.Top = 7, ;
		Option1.Value = 1, ;
		Option1.Width = 61, ;
		Option2.AutoSize = .F., ;
		Option2.Caption = "\<New", ;
		Option2.ControlSource = "", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 76, ;
		Option2.Name = "Option2", ;
		Option2.Style = 0, ;
		Option2.Top = 7, ;
		Option2.Width = 61
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 24, ;
		Left = 12, ;
		Name = "oWeb", ;
		Top = 204, ;
		Width = 24
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 2, ;
		Left = 66, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 12, ;
		Width = 457
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtNewVirDir' AS textbox WITH ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 192, ;
		Name = "txtNewVirDir", ;
		TabIndex = 10, ;
		Top = 163, ;
		Width = 324
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'txtPath' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 132, ;
		Name = "txtPath", ;
		ReadOnly = .T., ;
		TabIndex = 7, ;
		Top = 132, ;
		Width = 352
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE getwslocation		&& Reserved.
		LOCAL lcVirDir, lcName, lcPath, lcVarName, lcParent, lcChild
		lcPath = ALLTRIM(THISFORM.txtPath.Value)
		IF THISFORM.opgDefaultVD.Value = 1
			lcVirDir = THISFORM.cboVirDir.DisplayValue 
			IF EMPTY(lcVirDir)
				lcVirDir = THISFORM.cboVirDir.Text
			ENDIF
			IF EMPTY(lcVirDir) OR RIGHT(ALLTRIM(lcVirDir),1)#"/" OR ;
				(ATC("http://",lcVirDir)=0 AND ATC("https://",lcVirDir)=0)
				MESSAGEBOX(VD_BADPARM_LOC)
				RETURN .F.
			ENDIF
		ELSE
			lcName = ALLTRIM(THISFORM.txtNewVirDir.Value)
			lcVirDir = THISFORM.cboVirDir.DisplayValue + ALLTRIM(THISFORM.txtNewVirDir.Value)
			IF EMPTY(lcVirDir) OR EMPTY(lcPath) OR EMPTY(lcName)
				MESSAGEBOX(VD_BADPARM_LOC)
				RETURN .F.
			ENDIF
		
			lcChild = THISFORM.cboVirDir.DisplayValue
			lcChild = ALLTRIM(SUBSTRC(lcChild, ATC("//", lcChild)+2))
			lcChild = IIF(RIGHT(lcChild,1)="/", LEFT(lcChild, LEN(lcChild)-1), lcChild)
			lcChild = IIF(ATC("/", lcChild)=0, "", SUBSTRC(lcChild, ATC("/", lcChild)))
		
			lcParent = "IIS://LocalHost/w3svc/1/Root" + lcChild
		
			IF !THISFORM.oWeb.CreateVirDir(lcName, lcPath, lcParent)
				* Handle problem creating New Virtual Directory
				MESSAGEBOX(CREATEVDERR_LOC)
				RETURN .F.
			ENDIF
			IF RIGHT(ALLTRIM(lcVirDir),1)#"/"
				lcVirDir = lcVirDir + "/"
			ENDIF
		ENDIF
		
		* Set var reference for URL location
		IF !EMPTY(THIS.cURLLocation)
			lcVarName = THIS.cURLLocation
			STORE lcVirDir TO &lcVarName.
		ENDIF
		
		* Set var reference for URL path
		IF !EMPTY(THIS.cURLPath)
			lcVarName = THIS.cURLPath
			STORE lcPath TO &lcVarName.
		ENDIF
		
		IF THIS.lDefaultMode OR THIS.chkDefault.Value
			* set default location
			IF THISFORM.oWeb.UpdatePrefs("URI",lcVirDir + CHR(13) + lcPath)
				WAIT WINDOW VDSUCCESS_LOC TIMEOUT 1
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS tcURIVarRef, tcPathVarRef
		IF VARTYPE(tcURIVarRef)="C"
			THIS.cUrllocation = tcURIVarRef
		ENDIF
		IF VARTYPE(tcPathVarRef)="C"
			THIS.cUrlPath = tcPathVarRef
		ENDIF
		THIS.Setup()
		
	ENDPROC

	PROCEDURE Refresh
		LOCAL lcVDir, i, lFound
		
		lcVDir = ALLTRIM(THIS.cboVirDir.DisplayValue)
		IF !EMPTY(THIS.cDefuri) AND lcVdir==THIS.cDefuri
			THIS.txtPath.Value = THIS.cDefPath
			lFound=.F.
		ELSE
			FOR i = 1 TO ALEN(THIS.oWeb.aVirDirs,1)
				IF UPPER(THIS.oWeb.aVirDirs[m.i,1])==UPPER(lcVDir)
					THIS.txtPath.Value = THIS.oWeb.aVirDirs[m.i,2]
					lFound =.T.
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		
		THIS.cmdGetDir.Enabled = IIF(THIS.cboVirDir.Style=2, .T., !lFound)
		
	ENDPROC

	PROCEDURE setup		&& Reserved.
		LOCAL i, lnVirDirs, lcValue
		
		lcValue=""
		
		* Get local virtual directories
		IF !THIS.oWeb.GetVirDirs()
			THIS.opgDefaultVD.option1.Enabled = .F.
			THIS.opgDefaultVD.option2.Enabled = .F.
			THIS.lblNew.Enabled = .F.
			THIS.lblPath.Enabled = .F.
			THIS.lblDesc.Caption = LBL_NOIIS_LOC
		ENDIF
		
		* Add local virtual directories to combo
		IF !EMPTY(THIS.oWeb.aVirDirs)
			lnVirDirs = ALEN(THIS.oWeb.aVirDirs,1)
			FOR i = 1 TO lnVirDirs
				THIS.cboVirDir.AddItem(THIS.oWeb.aVirDirs[m.i,1])
			ENDFOR
			THIS.cboVirDir.DisplayValue=THIS.cboVirDir.ListItem[lnVirDirs]
			THIS.txtPath.Value = THIS.oWeb.aVirDirs[lnVirDirs, 2]
		ENDIF
		
		* Get default URL if previously saved.
		* Note: user could have canceled out initially in which
		* case there is an "*" stored.
		THIS.oWeb.GetPrefs("Uri",@lcValue)
		
		IF !EMPTY(ALLTRIM(lcValue)) AND ATC("*", lcValue)=0
			THIS.cDefURI = ALLTRIM(GETWORDNUM(lcValue,1,CHR(13)))
			THIS.cDefPath = ALLTRIM(GETWORDNUM(lcValue,2,CHR(13)))
			IF ASCAN(THIS.oWeb.aVirDirs,THIS.cDefURI)=0
				THIS.cboVirDir.AddItem(THIS.cDefURI)
			ENDIF
			THIS.cboVirDir.DisplayValue = THIS.cDefURI
			THIS.txtPath.Value = THIS.cDefPath
		ENDIF
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		IF THIS.ldefaultmode 
			THIS.lblType.Caption = LBL1CAPTION2_LOC
		ELSE
			THIS.lblType.Caption = LBL1CAPTION1_LOC
		ENDIF
		THIS.chkDefault.Visible = !THIS.lDefaultmode
		
	ENDPROC

	PROCEDURE cboVirDir.InteractiveChange
		THISFORM.Refresh()
	ENDPROC

	PROCEDURE cmdCancel.Click
		* Special handling if first time (Default Mode). Set default location to "*"
		IF THISFORM.lDefaultMode
			THISFORM.oWeb.UpdatePrefs("URI","*")
		ENDIF
		THISFORM.RELEASE()
		
	ENDPROC

	PROCEDURE cmdGetDir.Click
		LOCAL lcPath
		lcPath = GETDIR("",SELECTVIRDIR_LOC,"",66)
		IF !EMPTY(lcPath)
			THISFORM.txtpath.Value=lcPath
		ENDIF
		
	ENDPROC

	PROCEDURE cmdOK.Click
		IF !THISFORM.GetWSLocation()
			RETURN
		ENDIF
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE opgDefaultVD.Click
		IF THISFORM.cboVirDir.ListCount=0
			RETURN
		ENDIF
		THISFORM.cboVirDir.Style = IIF(THIS.Value=1,0,2)
		THISFORM.txtNewVirDir.Enabled = (THIS.Value#1)
		THISFORM.cmdGetDir.Enabled = (THIS.Value#1)
		
		IF THIS.Value=2
			THISFORM.cmdOK.Caption=BTN_CREATE_LOC
			THISFORM.cboVirDir.Value=THISFORM.cboVirDir.ListItem[1]
		ELSE
			THISFORM.cmdOK.Caption=BTN_SELECT_LOC
			IF THISFORM.cboVirDir.ListCount>0
				THISFORM.cboVirDir.DisplayValue=THISFORM.cboVirDir.ListItem[THISFORM.cboVirDir.ListCount]
			ENDIF
		ENDIF
		THISFORM.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS wsfoxcode AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: about		&& About this class.
		*m: erroralert		&& Displays error message.
		*m: getmethods		&& This code returns web service methods used for Intellisense.
		*m: getnextvar		&& Finds next variable name.
		*m: getproxyclass		&& Routine used to set the proxy class and classlib properties used to generate web service proxy code.
		*m: getproxyobject		&& Gets reference to proxy code generation object.
		*m: getservice		&& Parses editor content to determine reference to web service.
		*m: gettip		&& This code returns web service method parameter quick info used for Intellisense.
		*m: main		&& Main routine that gets called by IntelliSense engine.
		*p: cproxygenclass		&& Name of class to handle web service proxy code generation.
		*p: cproxygenclasslib		&& Name of class library containing class to handle web service proxy code generation.
		*p: cwsalias		&& Reference to the Fox Web Service table.
		*p: lhaderror		&& Whether an error occurred.
		*p: lskiperror		&& Whether to skip error reporting.
		*p: nsavearea		&& Work area to save.
		*p: oweb		&& Object reference to web service utility handler.
	*</DefinedPropArrayMethod>

	cwsalias = 		&& Reference to the Fox Web Service table.
	Name = "wsfoxcode"
	nsavearea = 0		&& Work area to save.
	
	PROCEDURE about		&& About this class.
		*!*	This class is the core class used for following:
		*!*	- Handing of IntelliSense for registered XML Web services
		
	ENDPROC

	PROCEDURE Destroy
		IF !EMPTY(THIS.cWSAlias) AND SELECT(THIS.cWSAlias)#0
			SELECT (THIS.cWSAlias)
			USE
		ENDIF
		SELECT (THIS.nSaveArea)
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.lhaderror=.T.
		IF THIS.lSkiperror
			RETURN
		ENDIF
		LOCAL lcMessage
		lcMessage = MESSAGE()
		IF nError = 3
			lcMessage = lcMessage + " " + FOXWSINUSE_LOC
		ENDIF
		THIS.ErrorAlert(lcMessage)
		
	ENDPROC

	PROCEDURE erroralert		&& Displays error message.
		LPARAMETERS tcMessage
		MESSAGEBOX(tcMessage)
		
	ENDPROC

	PROCEDURE getmethods		&& This code returns web service methods used for Intellisense.
		LPARAMETERS aMeths
		LOCAL i,lcMethod,lnCount,aTmp,lnLines,lcDesc
		lnCount=0
		DIMENSION aTmp[1]
		IF EMPTY(ALLTRIM(Prefs))
			lnLines = ALINES(aTmp, menu)
		ELSE
			lnLines = ALINES(aTmp, prefs)
		ENDIF
		FOR i = 1 TO lnLines
			lcDesc=""
			lcMethod = aTmp[m.i]
			lcMethod = GETWORDNUM(lcMethod, 1)
			IF GETWORDCOUNT(aTmp[m.i])>1
				lcDesc = ALLTRIM(SUBSTR(aTmp[m.i],ATC(" ",aTmp[m.i])))
			ENDIF
			IF !EMPTY(lcMethod)
				lnCount = lnCount+1
				DIMENSION aMeths[lnCount,2]
				aMeths[lnCount,1]=lcMethod  && method name
				aMeths[lnCount,2]=lcDesc	&& description
			ENDIF
		ENDFOR
		RETURN lnCount
		
	ENDPROC

	PROCEDURE getnextvar		&& Finds next variable name.
		* Retrieves next available variable name.
		LOCAL lcfxtoollib, lnWinHdl, lcStr, laEnv, lcVar, lnCount
		
		lcfxtoollib = SYS(2004)+"FOXTOOLS.FLL"
		IF !FILE(lcfxtoollib)
			RETURN .F.
		ENDIF
		SET LIBRARY TO (m.lcfxtoollib) ADDITIVE
		lnWinHdl = _WONTOP()
		_wselect(lnWinHdl)
		
		DIMENSION laEnv[25]
		_EdGetEnv(lnWinHdl ,@laEnv)
		lcStr = _EDGETSTR(lnWinHdl , 0, laEnv[17])
		
		lcVar = WSGEN_DEFAULTVAR
		lnCount = 2
		DO WHILE .T.
			IF ATC("LOCAL "+lcVar, lcStr)=0
				EXIT
			ENDIF
			lcVar = WSGEN_DEFAULTVAR+TRANSFORM(lnCount)
			lnCount = lnCount+1
		ENDDO
		
		RETURN lcVar
	ENDPROC

	PROCEDURE getproxyclass		&& Routine used to set the proxy class and classlib properties used to generate web service proxy code.
		* Get cProxyGenClass PEMs in case user wants to use customized Proxy Gen class.
		* These get stored in the FOXWS3 file. The custom proxy gen class must have a
		* GetProxyCode method which returns proxy code to insert.
		
		* Need to check here for user-defined class
		
		IF VARTYPE(THIS.cProxyGenClass)#"C" OR EMPTY(ALLTRIM(THIS.cProxyGenClass))
			THIS.cProxyGenClass = DEFPROXYGEN_CLASS
		ENDIF
		IF VARTYPE(THIS.cProxyGenClasslib)#"C" OR EMPTY(ALLTRIM(THIS.cProxyGenClasslib))
			THIS.cProxyGenClasslib = THIS.ClassLibrary
		ENDIF
		
	ENDPROC

	PROCEDURE getproxyobject		&& Gets reference to proxy code generation object.
		LPARAMETERS tcWSID
		
		LOCAL loProxy
		IF VARTYPE(tcWSID) # "C" OR EMPTY(ALLTRIM(tcWSID))
			RETURN ""
		ENDIF
		
		* Try to locate web service
		SELECT (THIS.cWsalias)
		LOCATE FOR ALLTRIM(UniqueID) == ALLTRIM(tcWSID)
		IF !FOUND()
			RETURN ""
		ENDIF
		
		* Call proxy code gen class
		THIS.lSkipError=.T.
		THIS.GetProxyClass()
		loProxy = NEWOBJECT(THIS.cProxyGenClass, THIS.cProxyGenClassLib)
		THIS.lSkipError=.F.
		IF VARTYPE(loProxy)#"O"
			RETURN ""
		ENDIF
		RETURN loProxy
		
	ENDPROC

	PROCEDURE getservice		&& Parses editor content to determine reference to web service.
		LPARAMETER lcUserTyped, lcTrigger
		
		* This routine retrieves the XML Web service info from editor.
		LOCAL lcOps, lcUserTyped, lnWordCount, lcLastWord , laEnv
		LOCAL lnWinHdl, lcfxtoollib, laLines, lcStr, lcSearchExpr, lnPos
		LOCAL lcWSInfo, lcURI, lcService, lcPort
		DO CASE
		CASE lcTrigger="."
			lcOps = [><(:;,?/[-+*&^%$#@!.=]
			lcUserTyped = ALLTRIM(lcUserTyped)
			lcUserTyped = CHRTRAN(lcUserTyped, lcOps, REPLICATE(" ", LEN(lcOps)))
			lnWordCount = GETWORDCOUNT(lcUserTyped)
			lcLastWord = ALLTRIM(GETWORDNUM(lcUserTyped,lnWordCount))
		CASE lcTrigger="("
			lnWordCount = GETWORDCOUNT(lcUserTyped,".")
			lcLastWord = ALLTRIM(GETWORDNUM(lcUserTyped,lnWordCount-1,"."))
		OTHERWISE
			RETURN .F.
		ENDCASE
		
		lcfxtoollib = SYS(2004)+"FOXTOOLS.FLL"
		IF !FILE(lcfxtoollib)
			RETURN .F.
		ENDIF
		SET LIBRARY TO (m.lcfxtoollib) ADDITIVE
		lnWinHdl = _WONTOP()
		_wselect(lnWinHdl)
		
		DIMENSION laEnv[25]
		_EdGetEnv(lnWinHdl ,@laEnv)
		lcStr = _EDGETSTR(lnWinHdl , 0, laEnv[17])
		DIMENSION laLines[1]
		ALINES(laLines,lcStr)
		
		*  #DEFINE	WSMARKER			"*__VFPWSDef__: "
		*  LOCAL myWebService AS "XML Web Service"
		*  *__VFPWSDef__: myWebService = http://myserver/myservice/foxws.wsdl, foxws, class1SoapPort
		
		lcSearchExpr = WSMARKER + lcLastWord+" = "
		lnPos=ASCAN(laLines,lcSearchExpr,-1,-1,1,5)
		IF lnPos=0
			RETURN .F.
		ENDIF
		lcWSInfo = SUBSTR(laLines[lnPos],LEN(lcSearchExpr))
		lcURI = ALLTRIM(GETWORDNUM(lcWSInfo,1,","))	&& URI
		lcService = ALLTRIM(GETWORDNUM(lcWSInfo,2,","))	&& Service
		lcPort = ALLTRIM(GETWORDNUM(lcWSInfo,3,","))	&& Port
		
		LOCATE FOR ALLTRIM(URI)=lcURI AND ALLTRIM(Name)=lcService AND ;
		  ALLTRIM(Port)=lcPort AND UPPER(Type)="C"
		  
		IF !FOUND()
			* This handles case for WS not registered on a specific machine. 
			IF MESSAGEBOX(MB_WSNOTFOUND_LOC+MB_WSNOTFOUND1_LOC,36)=7
				RETURN .F.
			ENDIF
			IF !THIS.oWeb.AddFoxCode(lcURI, .T.)
				THIS.oWeb.Alert(MB_ERRNOWSDL_LOC)
				RETURN .F.
			ENDIF
			LOCATE FOR ALLTRIM(URI)=lcURI AND ALLTRIM(Name)=lcService AND ;
			  ALLTRIM(Port)=lcPort AND UPPER(Type)="C"
			IF !FOUND()	&& problem registering 
				RETURN .F.
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE gettip		&& This code returns web service method parameter quick info used for Intellisense.
		LPARAMETER lcLine
		LOCAL i, lcMethod, lcTip, aTmp, lnLines, lcExpr 
		lcTip=""
		lcExpr = ALLTRIM(SUBSTR(lcLine,RAT(".",lcLine)+1))
		DIMENSION aTmp[1]
		lnLines = ALINES(aTmp,tips)
		FOR i = 1 TO lnLines
			lcMethod = aTmp[m.i]
			lcMethod = GETWORDNUM(lcMethod,GETWORDCOUNT(lcMethod,"."),".")	
			IF !EMPTY(lcMethod) AND ATC(lcExpr,lcMethod)#0
				lcTip = lcMethod
				EXIT
			ENDIF
		ENDFOR	
		RETURN ALLTRIM(lcTip)
		
	ENDPROC

	PROCEDURE Init
		* Check for our FOXWS3 file first
		THIS.nSaveArea = SELECT()
		THIS.oWeb = NEWOBJECT("_webservices", THIS.ClassLibrary)
		IF VARTYPE(THIS.oWeb)#"O"
			RETURN .F.
		ENDIF
		IF !THIS.oWeb.Checkwsdbf()
			RETURN .F.
		ENDIF
		THIS.cWSAlias = THIS.oWeb.cWSAlias 
		
		SYS(2030,1)
		
	ENDPROC

	PROCEDURE main		&& Main routine that gets called by IntelliSense engine.
		* This is Main routine that gets called from IntelliSense script (XML Web Service).
		LPARAMETER oFoxCode
		LOCAL  lnMethods, laMethods, lcTip, lcTrigger, loWSPicker, loParm, lcGenCode, loProxy
		
		lcTrigger = RIGHT(oFoxCode.FullLine, 1)
		oFoxcode.ValueType = "V"
		
		IF oFoxcode.Location=0	&&Command Window
			RETURN oFoxcode.UserTyped
		ENDIF
		
		DO CASE
		CASE UPPER(ALLTRIM(oFoxCode.Abbrev))="WS"
			* Handle custom WS keyboard shortcut here. 
			
			* Call Web Service picker form.
			loParm = CREATEOBJECT("Custom")
			loWSPicker = NEWOBJECT("wspicker", THIS.ClassLibrary, "", loParm)
			loWSPicker.Show()
			IF TYPE("loParm.cRetvalue")#"C" OR EMPTY(ALLTRIM(loParm.cRetvalue))
				RETURN ""
			ENDIF
			
			* Call proxy code gen class to get object reference
			loProxy = THIS.GetProxyObject(loParm.cRetvalue)
			IF VARTYPE(loProxy) # "O"
				RETURN ""
			ENDIF
			
			IF TYPE("loParm.lUseCustom")="L"
				loProxy.lCustomClientCode=loParm.lUseCustom
			ENDIF
			
			IF TYPE("loParm.lAddErrorCode")="L"
				loProxy.lAddErrorCode=loParm.lAddErrorCode
			ENDIF
		
			* Call routine to get code -- note: could set properties on object first if needed
			lcGenCode = loProxy.GetProxyCode()
			IF !EMPTY(lcGenCode)
				KEYBOARD '{BACKSPACE}'  && adjust for IntelliSense
			ENDIF
			RETURN lcGenCode
		
		CASE lcTrigger = "."
			* Handle list of XML Web service operations (methods). This is a List Members list.
			* Try to find web service. Note: if not found, then skip it since user removed reference marker.
			IF !THIS.GetService(oFoxCode.UserTyped, lcTrigger)
				RETURN ""
			ENDIF
			* Get list of methods to display	
			DIMENSION laMethods[1]
			lnMethods = THIS.GetMethods(@laMethods)
			IF lnMethods # 0
				DIMENSION oFoxcode.Items[lnMethods,2]
				FOR i = 1 TO lnMethods
					oFoxcode.Items[m.i,1] = laMethods[m.i,1] && method name
					oFoxcode.Items[m.i,2] = laMethods[m.i,2] && method description
					oFoxcode.Icon = HOME()+"ffc\graphics\method.bmp"
				ENDFOR
				oFoxcode.ValueType = "L"
			ENDIF
			
		CASE lcTrigger = "("
			* Handle list of XML Web service operation (method) parameters. This is Quick Info tip.
			IF !THIS.GetService(oFoxCode.UserTyped, lcTrigger)
				RETURN ""
			ENDIF
			lcTip = THIS.GetTip(oFoxCode.FullLine)
			IF !EMPTY(lcTip)
				oFoxcode.ValueTip = lcTip
				oFoxcode.ValueType = "T"
			ENDIF
			
		CASE ATC("XML Web Service", oFoxcode.MenuItem) # 0
			RETURN ["XML Web Service"]
			
		ENDCASE
		
		RETURN ""
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wsmanager AS wspicker OF "_ws3utils.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Commandbutton1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdEdit" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkToolbox" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: updatecontrols
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	AlwaysOnTop = .F.
	AutoCenter = .T.
	Caption = "Manage XML Web Services"
	Desktop = .F.
	DoCreate = .T.
	Height = 247
	Name = "wsmanager"
	Width = 374
	WindowType = 0
	chkCustom.Alignment = 0
	chkCustom.ControlSource = ""
	chkCustom.Enabled = .F.
	chkCustom.Name = "chkCustom"
	chkCustom.TabIndex = 9
	chkCustom.Visible = .F.
	chkError.Alignment = 0
	chkError.ControlSource = ""
	chkError.Name = "chkError"
	chkError.TabIndex = 11
	chkError.Visible = .F.
	cmdCancel.Enabled = .F.
	cmdCancel.Left = 300
	cmdCancel.Name = "cmdCancel"
	cmdCancel.TabIndex = 13
	cmdCancel.Top = 216
	cmdCancel.Visible = .F.
	cmdCancel.ZOrderSet = 0
	cmdNew.Left = 12
	cmdNew.Name = "cmdNew"
	cmdNew.TabIndex = 6
	cmdNew.Top = 216
	cmdNew.ZOrderSet = 6
	cmdOK.Cancel = .T.
	cmdOK.Caption = "Done"
	cmdOK.Left = 300
	cmdOK.Name = "cmdOK"
	cmdOK.TabIndex = 12
	cmdOK.Top = 216
	cmdOK.ZOrderSet = 1
	Label1.Height = 15
	Label1.Left = 20
	Label1.Name = "Label1"
	Label1.TabIndex = 7
	Label1.Top = 184
	Label1.Visible = .F.
	Label1.Width = 100
	lblMore.Caption = "\<Select an XML Web service:"
	lblMore.Name = "lblMore"
	lblMore.TabIndex = 1
	lblMore.ZOrderSet = 3
	lblURI.Name = "lblURI"
	lblURI.TabIndex = 5
	lblWSDL.Name = "lblWSDL"
	lblWSDL.TabIndex = 3
	lblWSDL.ZOrderSet = 5
	lstServices.ControlSource = ""
	lstServices.Name = "lstServices"
	lstServices.TabIndex = 2
	oWeb.Left = 324
	oWeb.Name = "oWeb"
	oWeb.Top = 132
	Shape1.Name = "Shape1"
	Shape1.Visible = .F.

	ADD OBJECT 'chkToolbox' AS checkbox WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Show in \<Toolbox", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "chkToolbox", ;
		TabIndex = 4, ;
		Top = 192, ;
		Value = .T., ;
		Width = 96
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdEdit' AS commandbutton WITH ;
		Caption = "\<View", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 136, ;
		Name = "cmdEdit", ;
		TabIndex = 10, ;
		Top = 216, ;
		Width = 60, ;
		ZOrderSet = 8
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Commandbutton1' AS commandbutton WITH ;
		Caption = "\<Delete", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 74, ;
		Name = "Commandbutton1", ;
		TabIndex = 8, ;
		Top = 216, ;
		Width = 60, ;
		ZOrderSet = 7
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE Deactivate
		ACTIVATE SCREEN
	ENDPROC

	PROCEDURE Destroy
		RELEASE _oWebServiceManager
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oRetObject
		DODEFAULT(oRetObject)
		PUBLIC _oWebServiceManager
		_oWebServiceManager=THIS
	ENDPROC

	PROCEDURE updatecontrols
		LOCAL lcID
		IF THISFORM.lstServices.ListCount=0
			THIS.chkToolbox.Enabled = .F.
			RETURN
		ENDIF
		THIS.chkToolbox.Enabled = .T.
		
		lcID = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex, 2))
		LOCATE FOR UniqueID = lcID AND !DELETED()
		IF FOUND()
			THIS.chkToolbox.Value = Toolbox
		ELSE
			THIS.chkToolbox.Value = .T.
		ENDIF
		
	ENDPROC

	PROCEDURE updatelist
		DODEFAULT()
		THISFORM.lstServices.InteractiveChange()
	ENDPROC

	PROCEDURE chkToolbox.InteractiveChange
		LOCAL lcID
		IF THISFORM.lstServices.ListCount=0
			RETURN
		ENDIF
		lcID = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex, 2))
		LOCATE FOR UniqueID = lcID AND !DELETED()
		IF FOUND()
			REPLACE Toolbox WITH THIS.Value
		ENDIF
		
	ENDPROC

	PROCEDURE cmdEdit.Click
		LOCAL lcID 
		IF THISFORM.lstServices.ListCount=0
			RETURN
		ENDIF
		lcID = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex, 2))
		BROWSE LAST NORMAL NODELETE NOAPPEND FOR UniqueID=lcID AND !DELETED()
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Commandbutton1.Click
		LOCAL lcID
		IF MESSAGEBOX(MB_DELETEWS_LOC,36)=7
			RETURN
		ENDIF
		lcID = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex, 2))
		LOCATE FOR UniqueID = lcID AND !DELETED()
		IF FOUND()
			REPLACE TYPE WITH "X"
			DELETE
			THISFORM.updatelist()
		ENDIF
		
	ENDPROC

	PROCEDURE lstServices.InteractiveChange
		DODEFAULT()
		THIS.Parent.UpdateControls()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wsphook AS projecthook 
 	*< CLASSDATA: Baseclass="projecthook" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*p: ccomplusapp
		*p: coutputname
		*p: lbuildnewguids
		*p: lhaderror
		*p: lrebuildall
		*p: lshowerrors
		*p: nbuildaction
		*p: nbuildtry
		*p: projectname
	*</DefinedPropArrayMethod>

	ccomplusapp = IIS Out-Of-Process Pooled Applications
	coutputname = 
	Height = 37
	Name = "wsphook"
	nbuildaction = 1
	nbuildtry = 1
	Width = 36
	
	PROCEDURE AfterBuild
		LPARAMETERS nError
		
		* Skip for non COM components
		IF THIS.nBuildAction < 3
			RETURN
		ENDIF
		
		LOCAL loWS, lnSaveArea
		IF nError#0
			* Let VFP display error
			* MESSAGEBOX(PHERROR_MISCERROR_LOC+MESSAGE())
			RETURN
		ENDIF
		
		****** Recreate the Web Service components ******
		loWS = NEWOBJECT("_webservices",THIS.ClassLibrary)
		IF VARTYPE(loWS)#"O"
			RETURN
		ENDIF
		
		lcVFPWSDBF = ADDBS(JUSTPATH(_FOXCODE)) + FOXWSDBF
		IF !FILE(lcVFPWSDBF)
			RETURN
		ENDIF
		lnSaveArea = SELECT()
		SELECT 0
		USE (lcVFPWSDBF) SHARED AGAIN
		IF EMPTY(ALIAS())
			SELECT (lnSaveArea)
			RETURN .F.
		ENDIF
		
		SCAN FOR !DELETED() AND UsePHook AND UPPER(TYPE)="P";
		  AND UPPER(ALLTRIM(COMFile))==UPPER(THIS.cOutputName)
		
			IF loWS.Autows(ALLTRIM(COMFile),ALLTRIM(Class))
				loWS.GenWS()
			ENDIF
		
		ENDSCAN
		
		USE
		loWS = null
		SELECT (lnSaveArea)
		WAIT WINDOW PHBUILDOK_LOC TIMEOUT 2
		
	ENDPROC

	PROCEDURE BeforeBuild
		LPARAMETERS cOutputName, nBuildAction, lRebuildAll, lShowErrors, lBuildNewGuids
		
		* Skip for non COM components
		IF nBuildAction < 3
			RETURN
		ENDIF
		
		THIS.nBuildAction = nBuildAction
		THIS.cOutputName = cOutputName
		
		* Let's try to shutdown IIS app that caches web service components.
		LOCAL lcApp
		LOCAL loCat AS "COMAdmin.COMAdminCatalog"
		loCat = CreateObject("COMAdmin.COMAdminCatalog")
		loCat.Connect("")
		IF VARTYPE(THIS.cCOMPlusApp)="C" AND !EMPTY(THIS.cCOMPlusApp)
			lcApp = ALLTRIM(THIS.cCOMPlusApp)
		ELSE
			lcApp = "IIS Out-Of-Process Pooled Applications"
		ENDIF
		loCat.ShutdownApplication(lcApp)
		loCat.StartApplication(lcApp)
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.lhaderror=.T.
		
	ENDPROC

	PROCEDURE Init
		THIS.ProjectName = _VFP.ActiveProject.Name
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wspicker AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lstServices" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMore" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWSDL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdNew" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkCustom" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkError" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: updatelist		&& Reserved.
		*p: cretvalue		&& Reserved.
		*p: csavenotify		&& Reserved.
		*p: oretvalue		&& Reserved.
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	BorderStyle = 2
	Caption = "Select"
	cretvalue = 		&& Reserved.
	csavenotify = 		&& Reserved.
	DataSession = 2
	Desktop = .T.
	DoCreate = .T.
	Height = 258
	Left = 101
	MaxButton = .F.
	Name = "wspicker"
	oretvalue = 		&& Reserved.
	ShowTips = .T.
	Top = 48
	Width = 384
	WindowType = 1

	ADD OBJECT 'chkCustom' AS checkbox WITH ;
		BackStyle = 0, ;
		Caption = "Use \<Custom class", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 24, ;
		Name = "chkCustom", ;
		TabIndex = 6, ;
		Top = 202, ;
		Value = .T., ;
		Width = 100
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'chkError' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Include \<error handling", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 24, ;
		Name = "chkError", ;
		TabIndex = 7, ;
		Top = 226, ;
		Value = .T., ;
		Width = 123
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 312, ;
		Name = "cmdCancel", ;
		TabIndex = 10, ;
		Top = 228, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdNew' AS commandbutton WITH ;
		Caption = "\<New...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 174, ;
		Name = "cmdNew", ;
		TabIndex = 8, ;
		Top = 228, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 248, ;
		Name = "cmdOK", ;
		TabIndex = 9, ;
		Top = 228, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Code output options", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 20, ;
		Name = "Label1", ;
		Style = 3, ;
		TabIndex = 5, ;
		Top = 184, ;
		Width = 100
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblMore' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Select an \<XML Web service:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblMore", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 134
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblURI' AS label WITH ;
		BackStyle = 0, ;
		Caption = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblURI", ;
		TabIndex = 4, ;
		Top = 156, ;
		Width = 360, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblWSDL' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "View XML Web service description (WSDL)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 12, ;
		MouseIcon = ..\, ;
		MousePointer = 15, ;
		Name = "lblWSDL", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 3, ;
		Top = 136, ;
		Width = 202
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'lstServices' AS listbox WITH ;
		ColumnCount = 3, ;
		ColumnWidths = "400,0,0", ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 118, ;
		IntegralHeight = .T., ;
		ItemTips = .T., ;
		Left = 12, ;
		Name = "lstServices", ;
		TabIndex = 2, ;
		Top = 24, ;
		Width = 360
		*< END OBJECT: BaseClass="listbox" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 23, ;
		Left = 324, ;
		Name = "oWeb", ;
		Top = 132, ;
		Width = 24
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 56, ;
		Left = 12, ;
		Name = "Shape1", ;
		Style = 3, ;
		Top = 192, ;
		Width = 144
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Destroy
		IF THIS.cSaveNotify="ON"
			SET NOTIFY CURSOR ON
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oRetObject
		IF VARTYPE(oRetObject)="O"
			THIS.oRetValue = oRetObject
		ENDIF
		THIS.cSaveNotify=SET("NOTIFY",1)
		SET NOTIFY CURSOR OFF
		THIS.updatelist()
		
	ENDPROC

	PROCEDURE Unload
		RETURN THIS.cRetValue
		
	ENDPROC

	PROCEDURE updatelist		&& Reserved.
		LOCAL lcSaveArea
		lcSaveArea = SELECT()
		
		TRY
			IF THIS.oWeb.Checkwsdbf()
				THIS.lstServices.Clear()
				SCAN FOR UPPER(Type) = "C"
					THIS.lstServices.AddListItem(ALLTRIM(Class) + " (" + ALLTRIM(Name) + ")")
					THIS.lstServices.AddListItem(ALLTRIM(UniqueID), THIS.lstServices.NewItemId, 2)
					THIS.lstServices.AddListItem(ALLTRIM(URI), THIS.lstServices.NewItemId, 3)
				ENDSCAN
				IF THIS.lstServices.ListCount>0
					THIS.lstServices.ListIndex=1
					THIS.lstServices.InteractiveChange()
				ELSE
					THIS.lblWSDL.ctarget = ""
					THIS.lblURI.Caption = ""
				ENDIF
			ENDIF
		CATCH
		FINALLY
			SELECT (lcSaveArea)
		ENDTRY
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdNew.Click
		DO (_wizard) WITH "","webservice",,"INTELLISENSE"
		THISFORM.updatelist()
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.cRetvalue = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex, 2))
		IF VARTYPE(THISFORM.oRetValue)="O"
			ADDPROPERTY(THISFORM.oRetValue,"cRetvalue",THISFORM.cRetvalue)
			ADDPROPERTY(THISFORM.oRetValue,"lUseCustom",THISFORM.chkCustom.Value)
			ADDPROPERTY(THISFORM.oRetValue,"lAddErrorCode",THISFORM.chkError.Value)
		ENDIF
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE lstServices.InteractiveChange
		LOCAL lcURI
		IF THIS.ListCount=0
			RETURN
		ENDIF
		lcURI = ALLTRIM(THISFORM.lstServices.List(THISFORM.lstServices.ListIndex,3))
		THISFORM.lblWSDL.cTarget = lcURI 
		THISFORM.lblURI.Caption = lcURI
	ENDPROC

	PROCEDURE lstServices.KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		IF nKeyCode=13
			THISFORM.cmdOK.Click()
		ENDIF
	ENDPROC

ENDDEFINE

DEFINE CLASS wsproxy AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: about		&& About this class.
		*m: defaultclasscode		&& Outputs default code making calls wrapper classes or the SOAP Toolkit APIs.
		*m: defaultsoapcode		&& Outputs default code making direct calls to SOAP Toolkit APIs.
		*m: erroralert		&& Displays error message.
		*m: genproxycode		&& Generates proxy code.
		*m: getproxycode		&& Method to get SOAP proxy code.
		*p: cgenparms		&& Parameters for Web service init call.
		*p: cgenport		&& Name of SOAP port.
		*p: cgenservice		&& Name of SOAP service.
		*p: cgenvar		&& Name of variable reference to Proxy object.
		*p: cgenwsdl		&& Name of WSDL reference.
		*p: cgenwsml		&& Name of WSML reference.
		*p: cproxyclass		&& Class library for proxy handler.
		*p: cproxyclassinit		&& Name of init method to call on Proxy class.
		*p: cproxyclasslib		&& Class library for proxy handler.
		*p: cproxyvar		&& Variable to use for SOAP object reference generated.
		*p: cwsname		&& Name of Web service.
		*p: ladderrorcode		&& Whether to add error handling to SOAP call.
		*p: laddfoxcodeheader		&& Whether to add IntelliSense header -- needed for IntelliSense.
		*p: lcustomclientcode		&& Whether to use custom client code or default.
		*p: lhaderror		&& Had an error.
		*p: lincludewsml		&& For use with only SOAP Toolkit XML Web services that use custom type mappers.
		*p: lskiperror		&& Whether to skip error.
	*</DefinedPropArrayMethod>

	cgenparms = 		&& Parameters for Web service init call.
	cgenport = 		&& Name of SOAP port.
	cgenservice = 		&& Name of SOAP service.
	cgenvar = 		&& Name of variable reference to Proxy object.
	cgenwsdl = 		&& Name of WSDL reference.
	cgenwsml = 		&& Name of WSML reference.
	cproxyclass = 		&& Class library for proxy handler.
	cproxyclassinit = 		&& Name of init method to call on Proxy class.
	cproxyclasslib = 		&& Class library for proxy handler.
	cproxyvar = 		&& Variable to use for SOAP object reference generated.
	cwsname = 		&& Name of Web service.
	Height = 33
	ladderrorcode = .T.		&& Whether to add error handling to SOAP call.
	lcustomclientcode = .T.		&& Whether to use custom client code or default.
	Name = "wsproxy"
	Width = 91
	
	PROCEDURE about		&& About this class.
		*!*	This class is the core class used for following:
		*!*	- Handing of Proxy code generation for XML Web services
		
	ENDPROC

	PROCEDURE defaultclasscode		&& Outputs default code making calls wrapper classes or the SOAP Toolkit APIs.
		* This routine contains generated proxy code that calls SOAP 3.0 Toolkit APIs via a wrapper class.
		* Do not call directly -- call from GenProxyCode!
		
		* Get default wrapper class settings - from _ws3.h file. 
		* Also, assumes class has a SetupClient method that sets up SOAP proxy.
		* #DEFINE DEFCLIENT_CLASS		"WSClient"
		* #DEFINE DEFCLIENT_CLASSLIB	"_ws3client.vcx"
		* #DEFINE DEFCLIENT_CLASSINIT	"SetupClient"
		
		LOCAL lcProxyClass, lcProxyClasslib, lcProxyClassVar, lcProxyClassInit, lcStr, lcPosMarker
		lcProxyClass = IIF(EMPTY(THIS.cProxyClass), DEFCLIENT_CLASS, THIS.cProxyClass)
		lcProxyClasslib = IIF(EMPTY(THIS.cProxyClasslib), DEFCLIENT_CLASSLIB, "["+THIS.cProxyClasslib+"]")
		lcProxyClassInit = IIF(EMPTY(THIS.cProxyClassInit), DEFCLIENT_CLASSINIT, THIS.cProxyClassInit)
		lcProxyClassVar = IIF(EMPTY(THIS.cProxyVar), WSPROXYVAR, THIS.cProxyVar)
		
		lcStr=""
		lcPosMarker="~"
		IF THIS.lAddFoxCodeHeader
			lcStr = lcStr + [LOCAL ] + THIS.cGenVar + [ AS "] + ISENSETYPE + ["] + CRLF
			lcStr = lcStr + [* LOCAL ] + THIS.cGenVar + [ AS "] + SOAPCLIENT_CLASS + ["] + CRLF
			lcPosMarker=""
		ENDIF
		
		IF !THIS.lAddErrorCode
			TEXT TO lcStr TEXTMERGE NOSHOW ADDITIVE PRETEXT 2
			* Do not remove or alter following line. It is used to support IntelliSense for your XML Web service.
			*__VFPWSDef__: <<THIS.cGenVar>> = <<THIS.cGenWSDL>> , <<THIS.cGenService>> , <<THIS.cGenPort>>
			LOCAL loException, lcErrorMsg, <<lcProxyClassVar>>
			<<lcProxyClassVar>> = NEWOBJECT("<<lcProxyClass>>",<<lcProxyClasslib>>)
			<<THIS.cGenVar>> = <<lcProxyClassVar>>.<<lcProxyClassInit>>(<<THIS.cGenParms>>)
			* Call your XML Web service here.  ex: leResult=<<THIS.cGenVar>>.SomeMethod()
			<<lcPosMarker>>
			ENDTEXT
			RETURN lcStr
		ENDIF
		
		TEXT TO lcStr TEXTMERGE NOSHOW ADDITIVE
		* Do not remove or alter following line. It is used to support IntelliSense for your XML Web service.
		*__VFPWSDef__: <<THIS.cGenVar>> = <<THIS.cGenWSDL>> , <<THIS.cGenService>> , <<THIS.cGenPort>>
		LOCAL loException, lcErrorMsg, <<lcProxyClassVar>>
		TRY
			<<lcProxyClassVar>> = NEWOBJECT("<<lcProxyClass>>",<<lcProxyClasslib>>)
			<<THIS.cGenVar>> = <<lcProxyClassVar>>.<<lcProxyClassInit>>(<<THIS.cGenParms>>)
			* Call your XML Web service here.  ex: leResult = <<THIS.cGenVar>>.SomeMethod()
			<<lcPosMarker>>
		CATCH TO loException
			lcErrorMsg="Error: "+TRANSFORM(loException.Errorno)+" - "+loException.Message
			DO CASE
			CASE VARTYPE(<<THIS.cGenVar>>)#"O"
				* Handle SOAP error connecting to web service
			CASE !EMPTY(<<THIS.cGenVar>>.FaultCode)
				* Handle SOAP error calling method
				lcErrorMsg=lcErrorMsg+CHR(13)+<<THIS.cGenVar>>.Detail
			OTHERWISE
				* Handle other error
			ENDCASE
			* Use for debugging purposes
			MESSAGEBOX(lcErrorMsg)
		FINALLY
		ENDTRY
		
		ENDTEXT
		
		RETURN lcStr
		
	ENDPROC

	PROCEDURE defaultsoapcode		&& Outputs default code making direct calls to SOAP Toolkit APIs.
		* This routine contains generated proxy code that calls SOAP 3.0 Toolkit APIs directly.
		* Do not call directly -- call from GenProxyCode!
		
		LOCAL lcStr,lcPosMarker
		lcStr=""
		lcPosMarker="~"
		IF THIS.lAddFoxCodeHeader
			lcStr = lcStr + [LOCAL ] + THIS.cGenVar + [ AS "] + ISENSETYPE + ["] + CRLF
			lcStr = lcStr + [* LOCAL ] + THIS.cGenVar + [ AS "] + SOAPCLIENT_CLASS + ["] + CRLF
			lcPosMarker=""
		ENDIF
		
		IF !THIS.lAddErrorCode
			TEXT TO lcStr TEXTMERGE NOSHOW ADDITIVE PRETEXT 2
			* Do not remove or alter following line. It is used to support IntelliSense for your XML Web service.
			*__VFPWSDef__: <<THIS.cGenVar>> = <<THIS.cGenWSDL>> , <<THIS.cGenService>> , <<THIS.cGenPort>>
			LOCAL loException,lcErrorMsg
			<<THIS.cGenVar>> = CREATEOBJECT(SOAPCLIENT_CLASS)
			<<THIS.cGenVar>>.SOAPCLIENT_INIT(<<THIS.cGenParms>>)
			* Call your XML Web service here. ex: leResult=<<THIS.cGenVar>>.SomeMethod()
			<<lcPosMarker>>
			ENDTEXT
			RETURN lcStr
		ENDIF
		
		TEXT TO lcStr TEXTMERGE NOSHOW ADDITIVE
		* Do not remove or alter following line. It is used to support IntelliSense for your XML Web service.
		*__VFPWSDef__: <<THIS.cGenVar>> = <<THIS.cGenWSDL>> , <<THIS.cGenService>> , <<THIS.cGenPort>>
		LOCAL loException,lcErrorMsg
		TRY
			<<THIS.cGenVar>> = CREATEOBJECT(SOAPCLIENT_CLASS)
			<<THIS.cGenVar>>.SOAPCLIENT_INIT(<<THIS.cGenParms>>)
			* Call your XML Web service here. ex: leResult=<<THIS.cGenVar>>.SomeMethod()
			<<lcPosMarker>>
		CATCH TO loException
			lcErrorMsg="Error: "+TRANSFORM(loException.Errorno)+" - "+loException.Message
			DO CASE
			CASE VARTYPE(<<THIS.cGenVar>>)#"O"
				* Handle SOAP error connecting to web service
			CASE !EMPTY(<<THIS.cGenVar>>.FaultCode)
				lcErrorMsg=lcErrorMsg+CHR(13)+<<THIS.cGenVar>>.Detail
				* Handle SOAP error calling method
			OTHERWISE
				* Handle other error
			ENDCASE
			* Use for debugging purposes
			MESSAGEBOX(lcErrorMsg)
		FINALLY
		ENDTRY
		ENDTEXT
		
		RETURN lcStr
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lcMessage
		THIS.lhaderror=.T.
		IF THIS.lSkiperror
			RETURN
		ENDIF
		lcMessage = MESSAGE()
		IF nError = 3
			lcMessage = lcMessage + " " + FOXWSINUSE_LOC
		ENDIF
		THIS.ErrorAlert(lcMessage)
		
	ENDPROC

	PROCEDURE erroralert		&& Displays error message.
		LPARAMETERS tcMessage
		MESSAGEBOX(tcMessage)
		
	ENDPROC

	PROCEDURE genproxycode		&& Generates proxy code.
		* This routine is called to generate proxy code. It assumes that 
		* necessary code gen properties are already set.  If you are setting
		* code gen properties from FOXWS3 table, you should instead
		* call GetProxyCode instead, which calls this routine.
		* Ensures that other gen properties are of correct type.
		
		IF VARTYPE(THIS.cGenWSDL)#"C" OR EMPTY(THIS.cGenWSDL)
			RETURN ""
		ENDIF
		IF VARTYPE(THIS.cGenVar)#"C" OR EMPTY(ALLTRIM(THIS.cGenVar))
			THIS.cGenVar = WSGEN_DEFAULTVAR
			THIS.lAddFoxcodeHeader = .T.
		ENDIF
		IF VARTYPE(THIS.cGenService)#"C"
			THIS.cGenService=""
		ENDIF
		IF VARTYPE(THIS.cGenPort)#"C"
			THIS.cGenPort=""
		ENDIF
		IF !THIS.lIncludeWSML OR VARTYPE(THIS.cGenWSML)#"C" OR ATC(".asmx?wsdl",THIS.cGenWSDL)#0
			* Only include WSML file if SOAP Toolkit XML Web service using custom type mapper. 
			* Skip for all VS XML Web services.
			THIS.cGenWSML =""
		ENDIF
		
		DO CASE
		CASE EMPTY(THIS.cGenService) AND EMPTY(THIS.cGenPort) AND EMPTY(THIS.cGenWSML)
			THIS.cGenParms = ["] + THIS.cGenWSDL + ["]
		CASE EMPTY(THIS.cGenWSML)
			THIS.cGenParms = ["] + THIS.cGenWSDL + [", "] + THIS.cGenService + [", "] + THIS.cGenPort +["]
		OTHERWISE
			THIS.cGenParms = ["] + THIS.cGenWSDL + [", "] + THIS.cGenService + [", "] + THIS.cGenPort  + [", "] + THIS.cGenWSML +["]
		ENDCASE
		
		* Now call routine to generate code
		RETURN IIF(THIS.lCustomClientCode, THIS.DefaultClassCode(), THIS.DefaultSoapCode())
	ENDPROC

	PROCEDURE getproxycode		&& Method to get SOAP proxy code.
		* This routine assumes that we have Foxws3 table open and currently on a valid class record. 
		* If you do not wish to use Foxws3 table, then call GenProxyCode directly, but ensure to first
		* set the code gen properties.
		*
		* Need to set Code Gen properties required by GenProxyCode. Note: the cGenWSML property is 
		* only used with SOAP Toolkit XML Web services and only needed for custom type mapping
		
		LOCAL lSuccess, lcCLass
		
		TRY
			IF UPPER(Type)="C"
				lcClass = ALLTRIM(Class)
				* Need to validate class for variables
				IF CHRTRAN(lcClass ,"., ","___") # lcClass 
					THIS.cGenVar = WSGEN_DEFAULTVAR
				ELSE
					THIS.cGenVar = "lo" + lcClass
				ENDIF
				THIS.cGenService = ALLTRIM(Name)
				THIS.cGenPort = ALLTRIM(Port)
				THIS.cGenWSDL = ALLTRIM(Uri)
				THIS.cGenWSML = ALLTRIM(wsml)
				IF !EMPTY(THIS.cGenWSML)
					THIS.lincludewsml = .T.
				ENDIF
				THIS.lAddFoxcodeHeader = .T.
				lSuccess=.T.
			ENDIF
		CATCH TO loException
		
		ENDTRY
		
		RETURN IIF(lSuccess,THIS.GenProxyCode(),"")
	ENDPROC

ENDDEFINE

DEFINE CLASS wspub AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOpen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCOMFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboInterface" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDone" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdAdv" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgVar" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTypelib" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSTK3" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: checkclass		&& Reserved.
		*m: checkiis		&& Reserved.
		*m: checkisapi		&& Reserved.
		*m: checkmethods		&& Reserved.
		*m: generatews		&& Reserved.
		*m: loadpos		&& Reserved.
		*m: processfile		&& Reserved.
		*m: savepos		&& Reserved.
		*p: lhaderror		&& Reserved.
		*p: lskiperror		&& Reserved.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Visual FoxPro XML Web Services Publisher"
	DataSession = 2
	Desktop = .T.
	DoCreate = .T.
	Height = 156
	HelpContextID = 1230989
	Left = 19
	MaxButton = .F.
	MinButton = .F.
	Name = "wspub"
	ShowTips = .T.
	Top = 20
	Width = 442
	WindowType = 1

	ADD OBJECT 'cboCOMFile' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		ItemTips = .T., ;
		Left = 84, ;
		Name = "cboCOMFile", ;
		Style = 2, ;
		TabIndex = 4, ;
		Top = 60, ;
		Width = 320
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cboInterface' AS combobox WITH ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 84, ;
		Name = "cboInterface", ;
		Style = 2, ;
		TabIndex = 7, ;
		Top = 90, ;
		Width = 320
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdAdv' AS commandbutton WITH ;
		Caption = "\<Advanced...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 12, ;
		Name = "cmdAdv", ;
		TabIndex = 8, ;
		Top = 124, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdDone' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 360, ;
		Name = "cmdDone", ;
		TabIndex = 11, ;
		Top = 124, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdGen' AS commandbutton WITH ;
		Caption = "\<Generate", ;
		Default = .T., ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 284, ;
		Name = "cmdGen", ;
		TabIndex = 10, ;
		Top = 124, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOpen' AS commandbutton WITH ;
		AutoSize = .F., ;
		Caption = "...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 408, ;
		Name = "cmdOpen", ;
		TabIndex = 5, ;
		Top = 60, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSTK3' AS commandbutton WITH ;
		AutoSize = .T., ;
		Caption = "STK3 Wi\<zard", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 88, ;
		Name = "cmdSTK3", ;
		TabIndex = 9, ;
		Top = 124, ;
		Width = 76
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'imgVar' AS image WITH ;
		Height = 23, ;
		Left = 408, ;
		Name = "imgVar", ;
		Picture = graphics\info.bmp, ;
		Stretch = 1, ;
		ToolTipText = "The selected class contains Currency or Variant types. Click here for more information.", ;
		Top = 93, ;
		Visible = .F., ;
		Width = 29
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Select a COM component from which to generate XML web service files. Use the Advanced dialog if you do not want previously used or default settings.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 12, ;
		Name = "Label1", ;
		TabIndex = 2, ;
		Top = 24, ;
		Width = 385, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		Caption = "\<COM Server:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 12, ;
		Name = "Label2", ;
		TabIndex = 3, ;
		Top = 65, ;
		Width = 70
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		Caption = "Publish XML Web Service", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 120
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "\<Select Class:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label6", ;
		TabIndex = 6, ;
		Top = 95, ;
		Width = 63
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oTypelib' AS _typelib WITH ;
		Height = 27, ;
		Left = 252, ;
		Name = "oTypelib", ;
		Top = 132, ;
		Width = 24
		*< END OBJECT: ClassLib="_utility.vcx" BaseClass="custom" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 22, ;
		Left = 216, ;
		lusingwizard = .T., ;
		Name = "oWeb", ;
		Top = 132, ;
		Width = 36
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 2, ;
		Left = 60, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 12, ;
		Width = 372
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE checkclass		&& Reserved.
		LOCAL lcInt
		lcInt = ALLTRIM(THIS.cboInterface.Value)
		IF EMPTY(lcInt)
			RETURN
		ENDIF
		
		THIS.imgVar.Visible = !THIS.oTypelib.CheckVariant(lcInt)
		THIS.oWeb.lPrefsLoaded = .F.
		
	ENDPROC

	PROCEDURE checkiis		&& Reserved.
		LOCAL oShell, nVersion
		oShell = CREATEOBJECT("WScript.Shell")
		THIS.lSkiperror=.T.
		nVersion = oShell.RegRead("HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\w3svc\Parameters\MajorVersion")
		THIS.lSkiperror=.F.
		IF THIS.lHaderror OR nVersion<5
			MESSAGEBOX(MB_BADIIS_LOC)
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE checkisapi		&& Reserved.
		* Check to see if user has valid script mappings -- only for local vdirs.
		LOCAL lcChild, lcVirDir
		IF !THIS.oWeb.lUseIsapi
			RETURN
		ENDIF
		lcChild = JUSTPATH(THIS.oWeb.cWSDLListener)
		lcChild = ALLTRIM(SUBSTRC(lcChild, ATC("//", lcChild)+2))
		lcChild = IIF(RIGHT(lcChild,1)="/", LEFT(lcChild, LEN(lcChild)-1), lcChild)
		lcChild = IIF(ATC("/", lcChild)=0, "", SUBSTRC(lcChild, ATC("/", lcChild)))
		lcVirDir = "IIS://LocalHost/w3svc/1/Root" + lcChild
		THIS.oWeb.Checkvdirmap(lcVirDir)
	ENDPROC

	PROCEDURE checkmethods		&& Reserved.
		* Check that all methods are valid
		LOCAL laMethods, lnCount, laTmpArray, i, lcCOMFile, lcClass, lHadProblem
		lcCOMFile = ALLTRIM(THIS.cboCOMFile.DisplayValue)
		lcClass = ALLTRIM(THIS.cboInterface.DisplayValue)
		DIMENSION laMethods[1]
		DIMENSION laTmpArray[1]
		lnCount = 0
		THIS.oTypelib.cTypelib = lcCOMFile
		lnCount = THIS.oTypelib.GetMethods(@laMethods, lcClass, .F., .F., .T.)
		
		WITH THIS.oWeb
			ACOPY(THIS.oWeb.aMethods, laTmpArray)
			DIMENSION .aMethods[1]
			.aMethods[1]=""
			FOR i = 1 TO ALEN(laTmpArray)
				IF ASCAN(laMethods, laTmpArray[m.i],-1,-1,-1,7)#0
					IF !EMPTY(.aMethods[1])
						DIMENSION .aMethods[ALEN(.aMethods)+1]
					ENDIF
					.aMethods[ALEN(.aMethods)] = laTmpArray[m.i]
				ELSE
					lHadProblem=.T.
				ENDIF
			ENDFOR
		ENDWITH
		
		IF lHadProblem
			THIS.oWeb.Saveprefs()
		ENDIF
		
		IF EMPTY(THIS.oWeb.aMethods[1])
			MESSAGEBOX(MB_ERRNOMETHODS_LOC)
			RETURN .F.
		ENDIF
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		THIS.lHaderror=.T.
		IF THIS.lSkiperror=.T.
			RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE generatews		&& Reserved.
		LOCAL lcCOMFile, lcClass, i, lFound, lcResults, lcPHookMsg
		lcCOMFile = ALLTRIM(THIS.cboCOMFile.DisplayValue)
		lcClass = ALLTRIM(THIS.cboInterface.DisplayValue)
		IF !FILE(lcCOMFile)
			MESSAGEBOX(NODLL_LOC)
			RETURN
		ENDIF
		IF LEFT(lcCOMFile,2)="\\"
			MESSAGEBOX(MB_NONLOCALSVR_LOC)
			RETURN
		ENDIF
		IF EMPTY(lcClass)
			MESSAGEBOX(NOCLASS_LOC)
			RETURN
		ENDIF
		
		* Generate Web Service files
		IF !THIS.oWeb.Autows(lcCOMFile,lcClass)
			IF THIS.oWeb.lPrefsLoaded  && prefs loaded but need more info (file paths)
				MESSAGEBOX(MB_NONDEFSVR_LOC)
			ENDIF
			RETURN
		ENDIF
		
		* Check for first time and file existing
		IF !THIS.oWeb.lPrefsExist AND ;
			((FILE(THIS.oWeb.cWSDLFile) AND THIS.oWeb.lGenWSDL) OR;
			(FILE(THIS.oWeb.cASPFile) AND !THIS.oWeb.lUseIsapi AND THIS.oWeb.lGenAsp))
			IF MESSAGEBOX(MB_WSFILESEXIST_LOC,36) = 7
				RETURN
			ENDIF
		ENDIF
		
		* Ensure that the methods are all valid
		IF !THIS.CheckMethods()
			RETURN
		ENDIF
		
		* Check 	if local vdir and ISAPI mappings is valid
		THIS.CheckIsapi()
		
		* Generate the WSDL files here
		WAIT WINDOW WAIT_PUBWS_LOC NOWAIT
		IF !THIS.oWeb.GenWS()
			WAIT CLEAR
			RETURN
		ENDIF
		WAIT CLEAR
		
		* Add Project Hook if necessary
		lcPHookMsg = IIF(THIS.oWeb.lUsePHook,HASPHOOK_LOC,HASNOPHOOK_LOC)
		IF THIS.oWeb.lChangePHook
			FOR i = 1 TO _VFP.Projects.Count
				IF UPPER(_VFP.Projects(m.i).Name) == UPPER(THIS.oWeb.cProject)
					lFound=.T.
					EXIT
				ENDIF
			ENDFOR
			IF !lFound
				MODIFY PROJECT (THIS.oWeb.cProject) NOWAIT
				FOR i = 1 TO _VFP.Projects.Count
					IF UPPER(_VFP.Projects(m.i).Name) == UPPER(THIS.oWeb.cProject)
						lFound=.T.
						EXIT
					ENDIF
				ENDFOR
			ENDIF
			IF lFound
				IF THIS.oWeb.lUsePHook
					IF EMPTY(_VFP.Projects(m.i).ProjectHookClass)
						_VFP.Projects(m.i).ProjectHookLibrary = THIS.ClassLibrary 
						_VFP.Projects(m.i).ProjectHookClass = PHOOKCLASS
					ELSE
						* Check if another hook already exists
						IF _VFP.Projects(m.i).ProjectHookClass # PHOOKCLASS
							lcPHookMsg = PHOOKCONFLICT_LOC 
						ENDIF
					ENDIF
				ELSE
					IF _VFP.Projects(m.i).ProjectHookClass = PHOOKCLASS
						_VFP.Projects(m.i).ProjectHookClass = ""
						_VFP.Projects(m.i).ProjectHookLibrary = ""
					ENDIF	
				ENDIF
			ENDIF
		ENDIF
		
		* Display results
		WITH THIS.oWeb
		TEXT TO lcResults NOSHOW TEXTMERGE
		Results of components generated:
		
		COM Server: <<.cCOMFile>>
		Class: <<.cClass>>
		
		Generated WSDL: <<IIF(.lGenWSDL, MB_YES_LOC, MB_NO_LOC)>>
		WSDL: <<.cWSDLFile>>
		Use ISAPI Listener: <<IIF(.lUseIsapi, MB_YES_LOC, MB_NO_LOC)>>
		ASP (if not ISAPI): <<.cASPListener>>
		
		Registered: <<IIF(.lISenseFailed, MB_REGFAIL1_LOC, MB_YES_LOC)>>
		    <<IIF(.lISenseFailed, MB_REGFAIL2_LOC, "")>>
		ENDTEXT
		ENDWITH
		
		MESSAGEBOX(lcResults,64,MBTITLE_WSGEN_LOC)
		
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE Init
		LOCAL lcCOMFiles, laFiles, lnCount, i, lcFile, lcURI, loConfig
		IF !THIS.CheckIIS()
			RETURN .F.
		ENDIF
		DIMENSION laFiles[1]
		lcURI=""
		
		* Check if first time and prompt to configure default location (VirDir)
		THIS.oWeb.GetPrefs("URI",@lcURI)
		
		IF THIS.oWeb.lHadError
			RETURN .F.
		ENDIF
		
		IF EMPTY(ALLTRIM(lcURI))
			MESSAGEBOX(FIRSTTIME_LOC+FIRSTTIME2_LOC,0,MBCONFIGTITLE_LOC)
			loConfig = NEWOBJECT("wsconfig",THIS.ClassLibrary)
			loConfig.lDefaultMode = .T.
			loConfig.Show()
		ENDIF
		
		* Get recently published files
		IF THIS.oWeb.GetPrefs("COMFILE",@lcCOMFiles)
			lnCount = ALINES(laFiles, lcCOMFiles)
			FOR i = 1 TO lnCount
				lcFile = ALLTRIM(laFiles[m.i])
				IF FILE(lcFile)
					lcFile = IIF(LEFT(lcFile,2)="\\","\","")+lcFile
					THIS.cboCOMFile.AddItem(lcFile)
				ENDIF
			ENDFOR
		ENDIF
		
		* Check for open project, else use first item (most recent)
		FOR i = 1 TO _VFP.Projects.Count
			* Skip if no OLEPUBLICS
			IF _VFP.Projects[m.i].Servers.Count = 0
				LOOP
			ENDIF
			* Check if file exists and already added
			lcFile = FORCEEXT(LOWER(_VFP.Projects[m.i].Name),"dll")
			IF !FILE(lcFile)
				lcFile = FORCEEXT(lcFile,"exe")
				IF !FILE(lcFile)
					LOOP
				ENDIF
			ENDIF
			IF ASCAN(laFiles,lcFile,-1,-1,-1,7)#0
				LOOP	
			ENDIF
			* Add it
			lcFile = IIF(LEFT(lcFile,2)="\\","\","")+lcFile
			THIS.cboCOMFile.AddItem(lcFile)
		ENDFOR
		
		* Get default file to display
		lcFile = ""
		IF THIS.cboCOMFile.ListCount > 0
			IF TYPE("_VFP.ActiveProject") = "O" AND _VFP.ActiveProject.Servers.Count#0 
				lcFile = FORCEEXT(LOWER(_VFP.ActiveProject.Name),"dll")
				IF !FILE(lcFile)
					lcFile = FORCEEXT(lcFile,"exe")
					IF !FILE(lcFile)
						lcFile=""
					ENDIF
				ENDIF
			ENDIF
			IF EMPTY(lcFile)
				lcFile = THIS.cboCOMFile.ListItem[1]
			ENDIF
			THIS.cboCOMFile.DisplayValue = lcFile
			THISFORM.ProcessFile(ALLTRIM(lcFile))		
		ENDIF
		
		* Reset Screen Pos
		THIS.Loadpos()
	ENDPROC

	PROCEDURE loadpos		&& Reserved.
		* Get Screen Settings
		LOCAL lnTop, lnLeft, laProps, lnPos
		DIMENSION laProps[1]
		
		IF ATC(FOXWSDBF,DBF())=0
			RETURN
		ENDIF
		
		LOCATE FOR UPPER(type) = "V"
		IF FOUND()
			IF  ALINES(laProps,ALLTRIM(wsdl)) > 0
				lnTop = 10
				lnLeft = 10
				lnPos = ASCAN(laProps,"top =",-1,-1,-1,5)
				IF lnPos>0
					lnTop = VAL(STREXTRACT(laProps[lnPos],"top =","",1,1))
				ENDIF
				lnPos = ASCAN(laProps,"left =",-1,-1,-1,5)
				IF lnPos>0
					lnLeft = VAL(STREXTRACT(laProps[lnPos],"left =","",1,1))
				ENDIF
				THIS.Top = lnTop
				THIS.Left = lnLeft
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE processfile		&& Reserved.
		LPARAMETERS tcCOMFile
		LOCAL laInts, lnInts, i, lFoundFile, lcFile
		DIMENSION laInts[1]
		lnInts = THIS.oTypelib.GetClasses(@laInts,tcCOMFile)
		
		IF lnInts = 0
			RETURN
		ENDIF
		
		* Check for file already in list
		FOR i = 1 TO THISFORM.cboCOMFile.ListCount
			IF UPPER(ALLTRIM(THISFORM.cboCOMFile.ListItem[m.i])) == UPPER(tcCOMFile)
				lFoundFile = .T.
				EXIT
			ENDIF
		ENDFOR
		IF !lFoundFile
			lcFile = IIF(LEFT(tcCOMFile,2)="\\","\","")+tcCOMFile
			THISFORM.cboCOMFile.AddItem(lcFile)
		ENDIF
		THISFORM.cboCOMFile.DisplayValue = tcCOMFile
		
		THIS.cboInterface.Clear()
		FOR i = 1 TO lnInts
			THIS.cboInterface.AddItem(laInts[m.i,1])
		ENDFOR
		
		THIS.cboInterface.Value = THIS.cboInterface.ListItem[1]
		THIS.cboInterface.Enabled = lnInts > 1
		THIS.oWeb.lPrefsLoaded = .F.
	ENDPROC

	PROCEDURE Release
		THIS.SavePos()
	ENDPROC

	PROCEDURE savepos		&& Reserved.
		* Save positions
		LOCAL laProps,lnPos,lnLines,lcPropStr,i
		DIMENSION laProps[1]
		
		IF ATC(FOXWSDBF,DBF())=0
			RETURN
		ENDIF
		LOCATE FOR UPPER(type) = "V"
		IF !FOUND()
			RETURN
		ENDIF
		laProps=""
		lnLines=ALINES(laProps,ALLTRIM(wsdl))
		lnPos = ASCAN(laProps,"top =",-1,-1,-1,5)
		IF lnPos#0
			laProps[lnPos]="top = "+TRANSFORM(THISFORM.top)
		ELSE
			DIMENSION laProps[ALEN(laProps)+1]
			laProps[ALEN(laProps)]="top = "+TRANSFORM(THISFORM.top)
		ENDIF
		lnPos = ASCAN(laProps,"left =",-1,-1,-1,5)
		IF lnPos#0
			laProps[lnPos]="left = "+TRANSFORM(THISFORM.left)
		ELSE
			DIMENSION laProps[ALEN(laProps)+1]
			laProps[ALEN(laProps)]="left = "+TRANSFORM(THISFORM.left)
		ENDIF
		lcPropStr=""
		FOR i = 1 TO ALEN(laProps)
			lcPropStr = lcPropStr + laProps[m.i] +CHR(13)
		ENDFOR
		REPLACE Wsdl WITH lcPropStr
		
	ENDPROC

	PROCEDURE cboCOMFile.InteractiveChange
		THISFORM.ProcessFile(THIS.DisplayValue)
		
	ENDPROC

	PROCEDURE cboInterface.InteractiveChange
		THISFORM.CheckClass()
		
	ENDPROC

	PROCEDURE cboInterface.ProgrammaticChange
		THIS.InteractiveChange()
		
	ENDPROC

	PROCEDURE cmdAdv.Click
		LOCAL loWS, lcCOMFile, lcClass
		
		lcCOMFile = ALLTRIM(THISFORM.cboCOMFile.DisplayValue)
		lcClass = ALLTRIM(THISFORM.cboInterface.DisplayValue)
		IF !FILE(lcCOMFile)
			MESSAGEBOX(NODLL_LOC)
			RETURN
		ENDIF
		IF EMPTY(lcClass)
			MESSAGEBOX(NOCLASS_LOC)
			RETURN
		ENDIF
		
		* set default settings
		IF !THISFORM.oWeb.AutoWS(lcCOMFile, lcClass) AND !THISFORM.oWeb.lPrefsLoaded
			RETURN
		ENDIF
		
		loWS = NEWOBJECT("wstool",THISFORM.ClassLibrary,"",THISFORM.oWeb)
		loWS.Show()
		
	ENDPROC

	PROCEDURE cmdDone.Click
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE cmdGen.Click
		THISFORM.GenerateWS()
		
	ENDPROC

	PROCEDURE cmdOpen.Click
		LOCAL lcFile
		lcFile = ALLTRIM(LOWER(GETFILE("DLL;TLB;EXE")))
		IF !EMPTY(lcFile) AND FILE(lcFile)
			THISFORM.ProcessFile(lcFile)
		ENDIF
		
	ENDPROC

	PROCEDURE cmdSTK3.Click
		LOCAL lcValue, lcFile, loReg
		loReg = NEWOBJECT("registry",HOME()+"ffc\registry.vcx")
		lcValue=""
		IF loReg.GetRegKey("",@lcValue,"CLSID\{3FEB0525-8310-44ab-9CCC-E0F49ED513B0}\InProcServer32",HKEY_CLASSES_ROOT)=0
			IF ATC("wsdlgen",lcValue)#0
				lcFile = JUSTPATH(lcValue)+"\wsdlgen3.exe"
				IF FILE(lcFile)
					RUN /n "&lcFile."
					THISFORM.Release()
				ENDIF
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE imgVar.Click
		MESSAGEBOX(MB_NOVARIANT_LOC)
	ENDPROC

ENDDEFINE

DEFINE CLASS wsreg AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblType" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboWSDL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSample" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label4" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: regwebservice		&& Reserved.
		*p: cnewws		&& Reserved.
		*p: cnewwsdl		&& Reserved.
	*</DefinedPropArrayMethod>

	AutoCenter = .T.
	BorderStyle = 2
	BufferMode = 0
	Caption = "Visual FoxPro XML Web Services Registration"
	DataSession = 2
	Desktop = .T.
	DoCreate = .T.
	Height = 174
	HelpContextID = 1230988
	MaxButton = .F.
	MinButton = .F.
	Name = "wsreg"
	Width = 514
	WindowState = 0
	WindowType = 1

	ADD OBJECT 'cboWSDL' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 23, ;
		InputMask = (REPLICATE("X",254)), ;
		Left = 120, ;
		Name = "cboWSDL", ;
		TabIndex = 5, ;
		Top = 86, ;
		Width = 384
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "\<Done", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 432, ;
		Name = "cmdCancel", ;
		TabIndex = 8, ;
		Top = 144, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "\<Register", ;
		Default = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 358, ;
		Name = "cmdOK", ;
		TabIndex = 7, ;
		Top = 144, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSearch' AS commandbutton WITH ;
		Caption = "\<UDDI Search...", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 12, ;
		Name = "cmdSearch", ;
		TabIndex = 6, ;
		Top = 144, ;
		Width = 108
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "http://www.myservers.com/soap/mydotnetservice.asmx?wsdl", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 174, ;
		Name = "Label1", ;
		Style = 3, ;
		TabIndex = 10, ;
		Top = 122, ;
		Width = 299, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .T., ;
		Caption = "\<WSDL URL Location:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 4, ;
		Top = 89, ;
		Width = 99
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label4' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Enter either a valid WSDL URL location or search for an XML Web service using UDDI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label4", ;
		TabIndex = 3, ;
		Top = 56, ;
		Width = 410
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Register an XML Web service from anywhere on the Internet for use in your applications. Once registered, you can access it from the Toolbox, TaskPane or by using IntelliSense.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 12, ;
		Name = "Label6", ;
		TabIndex = 2, ;
		Top = 24, ;
		Width = 458, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblSample' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Examples: http://www.myservers.com/soap/mycomservice.wsdl", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 122, ;
		Name = "lblSample", ;
		Style = 3, ;
		TabIndex = 9, ;
		Top = 110, ;
		Width = 308, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblType' AS label WITH ;
		AutoSize = .T., ;
		Caption = "Register XML Web Service", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblType", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 127
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 17, ;
		Left = 12, ;
		Name = "oWeb", ;
		Top = 120, ;
		Width = 20
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 2, ;
		Left = 66, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 12, ;
		Width = 438
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE Init
		LOCAL lcDefURI
		
		* Add existing default URI
		IF THIS.oWeb.Getprefs("TIPS",@lcDefURI)
			IF !EMPTY(ALLTRIM(lcDefURI))
				THIS.cboWSDL.AddItem(ALLTRIM(lcDefURI))
			ENDIF
		ENDIF
		
		IF THIS.oWeb.lhaderror
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE regwebservice		&& Reserved.
		* Add IntelliSense script
		LOCAL lcWSDL, lSuccess, laWSErrs, lcErrMessage
		
		
		lcWSDL = ALLTRIM(THISFORM.cboWSDL.Text)
		IF EMPTY(lcWSDL)
			lcWSDL = ALLTRIM(THISFORM.cboWSDL.DisplayValue)
		ENDIF
		
		DO CASE
		CASE EMPTY(lcWSDL)
			THISFORM.oWeb.Alert(NOWSDL_LOC)
			RETURN .F.
		CASE ATC(" ",lcWSDL)#0
			THISFORM.oWeb.Alert(MB_URLWITHSPACE_LOC)
			RETURN .F.
		OTHERWISE
			WAIT WINDOW WAIT_QUERYWS_LOC NOWAIT
			lSuccess = THISFORM.oWeb.AddFoxCode(lcWSDL,.T.)
			WAIT CLEAR
			IF !lSuccess
				lcErrMessage = NOGENFILE_LOC+INTELLISENSE_LOC
				DIMENSION laWSErrs[1]
				AERROR(laWSErrs)
				IF BETWEEN(laWSErrs[1],1400,1500)
					lcErrMessage = lcErrMessage + CRLF + CRLF +  laWSErrs[2]
				ENDIF
				THISFORM.oWeb.Alert(lcErrMessage) 
			ELSE
				MESSAGEBOX(FINISH2_LOC)
			ENDIF
			RETURN lSuccess
		ENDCASE
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		LOCAL lcWSDL
		lcWSDL = ALLTRIM(THISFORM.cboWSDL.DisplayValue)
		IF !EMPTY(lcWSDL)
			THISFORM.oWeb.UpdatePrefs("Tips", lcWSDL)
		ENDIF
		THISFORM.RELEASE()
		
	ENDPROC

	PROCEDURE cmdOK.Click
		THISFORM.RegWebService()
	ENDPROC

	PROCEDURE cmdSearch.Click
		LOCAL loForm
		THISFORM.cNewWSDL = ""
		THISFORM.cNewWS = ""
		loForm = NEWOBJECT("wsuddi",THISFORM.ClassLibrary)
		loForm.oRef = THISFORM
		loForm.Show(1)
		IF !EMPTY(THISFORM.cNewWSDL)
			THISFORM.cboWSDL.Additem(THISFORM.cNewWSDL)
			THISFORM.cboWSDL.Value = THISFORM.cNewWSDL
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS wstest AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oleBrowser" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWSDL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblMethod" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_RESIZABLE1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBrowse" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Grid1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colparms" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboCursors" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblRefresh" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWebTest" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: setupws		&& Method to setup the Web service.
		*p: cformref		&& Reference to form.
		*p: cmethod		&& Name of method to call.
		*p: cserviceid		&& ID of Web service.
		*p: ldataset		&& Whether we have ADO .Net Dataset.
		*p: oadapter		&& Reference to XMLAdapater.
		*p: returnvalue		&& Value returned by Web service.
		*p: xmlfile		&& Name of XML file used for testing.
	*</DefinedPropArrayMethod>

	Caption = "Web Service Test Results"
	cformref = 		&& Reference to form.
	cmethod = 		&& Name of method to call.
	cserviceid = 		&& ID of Web service.
	DataSession = 2
	DoCreate = .T.
	Height = 315
	Left = 32
	MinHeight = 200
	MinWidth = 200
	Name = "wstest"
	ShowTips = .T.
	Top = 8
	Width = 456

	ADD OBJECT '_RESIZABLE1' AS _resizable WITH ;
		Left = 12, ;
		Name = "_RESIZABLE1", ;
		Top = 0
		*< END OBJECT: ClassLib="_controls.vcx" BaseClass="custom" />

	ADD OBJECT 'cboCursors' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		Left = 141, ;
		Name = "cboCursors", ;
		Style = 2, ;
		Top = 42, ;
		Visible = .F., ;
		Width = 100
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'colparms' AS colparms WITH ;
		Left = 12, ;
		Name = "colparms", ;
		Top = 0
		*< END OBJECT: ClassLib="_ws3client.vcx" BaseClass="collection" />

	ADD OBJECT 'edtResults' AS editbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 10, ;
		Height = 216, ;
		Left = 12, ;
		Name = "edtResults", ;
		Top = 72, ;
		Width = 432
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Grid1' AS grid WITH ;
		FontName = "Tahoma", ;
		FontSize = 10, ;
		Height = 216, ;
		Left = 12, ;
		Name = "Grid1", ;
		ReadOnly = .T., ;
		RowHeight = 19, ;
		Top = 72, ;
		Visible = .F., ;
		Width = 432
		*< END OBJECT: BaseClass="grid" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Web Service:", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label6", ;
		Top = 8, ;
		Width = 75
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label7' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Operation:", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label7", ;
		Top = 24, ;
		Width = 61
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblBrowse' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Data View", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 172, ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblBrowse", ;
		nvisitedforecolor = 16711680, ;
		Top = 294, ;
		Width = 58
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'lblMethod' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "xxxxxxxxx", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 76, ;
		Name = "lblMethod", ;
		Top = 24, ;
		Width = 56
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblRefresh' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Refresh", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 12, ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblRefresh", ;
		nvisitedforecolor = 16711680, ;
		Top = 294, ;
		Width = 46
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'lblResults' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Results:", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblResults", ;
		Top = 48, ;
		Width = 47
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblWebTest' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Web Test Page", ;
		Enabled = .F., ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 256, ;
		lnewwindow = .T., ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblWebTest", ;
		nvisitedforecolor = 16711680, ;
		Top = 294, ;
		Visible = .F., ;
		Width = 86
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'lblWS' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "xxxxxxxxx", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 92, ;
		Name = "lblWS", ;
		Top = 8, ;
		Width = 56
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblWSDL' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "View WSDL", ;
		FontBold = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 84, ;
		lnewwindow = .T., ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblWSDL", ;
		nvisitedforecolor = 16711680, ;
		Top = 294, ;
		Width = 63
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'oleBrowser' AS olecontrol WITH ;
		Height = 216, ;
		Left = 12, ;
		Name = "oleBrowser", ;
		Top = 72, ;
		Visible = .F., ;
		Width = 432
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\winnt\system32\shdocvw.dll" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAeO32m8IBAwAAAEABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAArAAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAA4AAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAgAAADEAAAAAAAAAAwh+VaICjTQEalrAMBP1wWiTAAAAKYsAABTFgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATAAAAAAAAAAAAAAAOAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA1AC4AMAAgAAEAAIAIAAAATWVudUJhcgAFAAAATAAAAAALAAAAQWRkcmVzc0JhcgAFAAAATAAAAAAALQA4ADcANAA3AC0ANQABAAAA4NBXAHM1zxGuaQgAKy4SYggAAAAAAAAATAAAAAEUAgAAAAAAwAAAAAAAAEaAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAB0ACAAVAByAGUAZQBWAGkAZQB3ACAAQwBvAG4AdAByAG8AbAAsACAAdgBlAHIAcwBpAG8AbgAgADUALgAwACAAKABTAFAAMgApAAkAewAwADcAMQAzAEUAOABBADIALQA4ADUAMABBAC0AMQAwADEAQgAtAEEARgBDADAALQA0ADIAMQAwADEAMAAyAEEAOABEAEEANwB9ACAAQwA6AFwAVwBJAE4ARABPAFcAUwBcAFMAeQBzAHQAZQBtADMAMgBcAGMAbwBtAGMAdABsADMAMgAuAA==" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 23, ;
		Left = 12, ;
		Name = "oWeb", ;
		Top = 0, ;
		Width = 24
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />
	
	PROCEDURE Destroy
		IF VARTYPE(THIS.cFormref)="C" AND !EMPTY(THIS.cFormref)
			RELEASE (THIS.cFormref)
		ENDIF
	ENDPROC

	PROCEDURE Resize
		THIS._RESIZABLE1.AdjustControls()
	ENDPROC

	PROCEDURE setupws		&& Method to setup the Web service.
		LPARAMETERS tcServiceID, tcMethod
		
		LOCAL loException, lcErrorMsg, loWSHandler, lcSyntax, laParms
		LOCAL lcMethod, lcParms, lHadError, lnPos, laTips, leRetVal, loParmForm ,i, lcByRefChar
		LOCAL lHasDataSet, lctempstr, lHasHTML, lcTmpFile, lcRetVal 
		LOCAL lnCount, laPEMs, loNode 
		
		IF PCOUNT()<2 OR VARTYPE(tcServiceID)#"C" OR VARTYPE(tcMethod)#"C" 
			RETURN 	
		ENDIF
		THIS.cServiceID = tcServiceID
		THIS.cMethod = tcMethod
		
		THIS.oWeb.CheckWSDbf()
		SELECT (THIS.oWeb.cWSAlias)
		IF EMPTY(ALIAS())
			MESSAGEBOX(MB_FILEINUSE_LOC)
			RETURN
		ENDIF
		
		LOCATE FOR UniqueID=tcServiceID
		IF !FOUND()
			RETURN
		ENDIF
		
		lcMethod=ALLTRIM(tcMethod)
		THIS.lblWS.Caption=ALLTRIM(Name)
		
		DIMENSION laTips[1]
		ALINES(laTips, Tips, .T., CHR(13)+CHR(10))
		lnPos = ASCAN(laTips, lcMethod+"(",-1,-1,-1,5)
		IF lnPos=0
			RETURN
		ENDIF
		lcSyntax = laTips[lnPos]
		
		* Get parameters here
		THIS.colparms.wsSyntax=lcSyntax
		THIS.colparms.genParms()
		
		THIS.lblMethod.Caption=lcSyntax
		THIS.lbLWSDL.ctarget=ALLTRIM(Uri)
		IF ATC(".ASMX", Uri)#0
			THIS.lblWebTest.Visible = .T.
			THIS.lblWebTest.Enabled = .T.
			THIS.lblWebTest.ctarget=SUBSTR(THIS.lbLWSDL.ctarget,1,ATC("?",THIS.lbLWSDL.ctarget)-1)
		ENDIF
		
		lcParms = ""
		
		IF THIS.colParms.Count>0
			loParmForm = NEWOBJECT("wsParms",HOME()+"FFC\_ws3client.vcx")
			loParmForm.oColParms = THIS.colParms
			loParmForm.SetupWS()
			loParmForm.Show(1)
		ENDIF
		
		* Get Parameters
		lcParms = ""
		IF THIS.colParms.Count>0
			* Need to create string here...
			DIMENSION laParms[THIS.colParms.Count]
			FOR i = 1 TO THIS.colParms.Count
				laParms[m.i] = ""
				lcByRefChar=""
				TRY
					laParms[m.i] = THIS.colParms.GetParm(m.i)
					lcByRefChar=IIF(THIS.colParms.Item[m.i].IsByRef,"@","")
				CATCH TO loException
				ENDTRY
				lcParms = lcParms + lcByRefChar + "laParms[" + TRANSFORM(m.i) + "]"
				IF m.i < THIS.colParms.Count
					lcParms = lcParms + ","
				ENDIF
			ENDFOR
		ENDIF
		
		lcMethod = lcMethod + "(" + lcParms +")"
		
		TRY
			loWSHandler = NEWOBJECT("WSHandler",IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_ws3client.vcx")
			IF EMPTY(ALLTRIM(wsml))
				loWSfox1 = loWSHandler.SetupClient(ALLTRIM(Uri), ALLTRIM(Name) ,ALLTRIM(Port))
			ELSE
				loWSfox1 = loWSHandler.SetupClient(ALLTRIM(Uri), ALLTRIM(Name) ,ALLTRIM(Port), ALLTRIM(wsml))	
			ENDIF
			leRetVal = loWSfox1.&lcMethod.
		CATCH TO loException
			lHadError=.T.
			lcErrorMsg="Error: "+TRANSFORM(loException.Errorno)+" - "+loException.Message
			DO CASE
			CASE VARTYPE(loWSfox1)#"O"
				* Handle SOAP error connecting to web service
				IF !EMPTY(loWSHandler.SoapErrorString)
					lcErrorMsg=MB_NOWS_LOC + CRLF + CRLF + loWSHandler.SoapErrorDetail
				ENDIF
			CASE !EMPTY(loWSfox1.FaultCode)
				* Handle SOAP error calling method
				lcErrorMsg=lcErrorMsg+CHR(13)+loWSfox1.Detail
			OTHERWISE
				* Handle other error
			ENDCASE
		ENDTRY
		
		THIS.ReturnValue =  leRetVal
		
		IF !lHadError
			* Populate byref return values in colParms collection
			FOR i = 1 TO THIS.colParms.Count
				TRY
					IF THIS.colParms.Item[m.i].IsByRef
						THIS.colParms.Item[m.i].AddProperty("ReturnValue", laParms[m.i])
					ENDIF
				CATCH
				ENDTRY
			ENDFOR
		ENDIF
		
		* Handle various types
		DO CASE
		CASE lHadError
			lcRetVal = lcErrorMsg
		
		CASE VARTYPE(leRetVal)="C"
			lcRetVal = ALLTRIM(leRetVal)
			IF LEFT(lcRetVal,1)="<"
				lcRetVal = ALLTRIM(STRCONV(lcRetVal,9))
			ENDIF
		
		CASE VARTYPE(leRetVal)#"O"
			lcRetVal = TRANSFORM(leRetVal)
		
		CASE TYPE("leRetVal.length")="N"		&&complex XMLDOMNode object types
			lcRetVal="MB_NODISPLAY_LOC"
			IF leRetVal.length>0
				lHasDataSet = (ATC("IsDataSet",STRCONV(leRetval.item(0).xml,9))#0)
				IF lHasDataSet
					THIS.lDataset = .T.
					TEXT TO lctempstr NOSHOW TEXT PRETEXT 2
					<?xml version="1.0" encoding="utf-8"?>
					<DataSet xmlns="http://tempuri.org/">
					<<ALLTRIM(STRCONV(leRetval.item(0).xml,9))>>
					<<ALLTRIM(STRCONV(leRetval.item(1).xml,9))>>
					</DataSet>
					ENDTEXT
					lcRetVal = lctempstr
				ELSE
					loNode = leRetVal.item(0).parentNode
					IF VARTYPE(loNode)#"O"
						loNode = leRetVal.item(0).ownerDocument
						lcRetVal = loNode.xml
					ELSE
						lcRetVal = [<?xml version="1.0" encoding="utf-8"?>]
						lcRetVal = lcRetVal + loNode.xml
					ENDIF
				ENDIF
			ENDIF
		
		OTHERWISE
			* Assume its a COM  Object
			lcRetVal=""
			SET TEXTMERGE ON NOSHOW
			SET TEXTMERGE TO MEMVAR lcRetVal ADDITIVE
			\Object Members
			\
			DIMENSION laPEMs[1]
			lnCount = AMEMBERS(laPEMs,leRetVal,3)
			lcLastPem = ""
			FOR i = 1 TO lnCount
				IF lcLastPem == laPEMs[m.i, 1]
					LOOP
				ENDIF
				\<<laPEMs[m.i, 1]>>:
				TRY
					lcValue = TRANSFORM(leRetVal.&laPEMs[m.i,1])
					\\ <<lcValue>>
				CATCH
				ENDTRY
				lcLastPem = laPEMs[m.i, 1]
			ENDFOR
			SET TEXTMERGE TO
			SET TEXTMERGE OFF
		
		ENDCASE
		
		* Choose which control to display with.
		lHasHTML = (ALLTRIM(LEFT(STRTRAN(lcRetval,CHR(9),""),1))="<")
		THIS.edtResults.Visible = !lHasHTML
		THIS.oleBrowser.Visible = lHasHTML
		
		TRY
			IF lHasHTML
				SET SAFETY OFF
				lcTmpFile = HOME()+TEST_TMP_FILE
				STRTOFILE(lcRetVal, lcTmpFile)  && some may need optional 3rd parm of 4
				THIS.oleBrowser.Object.Navigate2(lcTmpFile)
				THIS.xmlfile = lcTmpFile
				THIS.lDataSet = lHasDataSet
				THIS.lblBrowse.Enabled = .T.
			ELSE
				THIS.edtResults.Value = lcRetVal
				THIS.lblBrowse.Visible = .F.
			ENDIF
		CATCH TO loError
		ENDTRY
		
	ENDPROC

	PROCEDURE cboCursors.InteractiveChange
		LOCAL lcAlias
		lcAlias = THISFORM.oAdapter.Tables.Item(THIS.ListIndex).Alias
		IF USED(lcAlias)
			SELECT (lcAlias)
		ELSE
			SELECT 0
			THISFORM.oAdapter.Tables.Item(THIS.ListIndex).ToCursor()
		ENDIF
		
		GO TOP
		THISFORM.Grid1.RecordSource=lcAlias
		
	ENDPROC

	PROCEDURE lblBrowse.Click
		LOCAL loXML, i, lcAlias 
		
		* Close any open tables
		IF !EMPTY(ALIAS())
			USE
		ENDIF
		
		IF THISFORM.oleBrowser.Visible = .F.
			THISFORM.oleBrowser.Visible = .T.
			THISFORM.Grid1.Visible = .F.
			THISFORM.lblBrowse.Caption = DATAVIEW_LOC
			RETURN
		ELSE
			THISFORM.oleBrowser.Visible = .F.
			THISFORM.Grid1.Visible = .T.
			THISFORM.lblBrowse.Caption = XMLVIEW_LOC
		ENDIF
		
		TRY
			SET SAFETY OFF
			IF THISFORM.ldataset
				THISFORM.oAdapter = CREATEOBJECT("xmladapter")
				loXML=THISFORM.ReturnValue
				THISFORM.oAdapter.MapN19_4ToCurrency = .T.
				THISFORM.oAdapter.Attach(loXml.Item(1), loXml.Item(0))
				THISFORM.cboCursors.Clear()
				FOR i = 1 TO THISFORM.oAdapter.Tables.Count
					lcAlias = THISFORM.oAdapter.Tables.Item(m.i).Alias
					IF USED(lcAlias)
						USE IN (lcAlias)
					ENDIF
					THISFORM.cboCursors.AddItem(lcAlias)
				ENDFOR
				THISFORM.lblResults.Caption=DOTNET_LOC
				THISFORM.cboCursors.ListIndex=1
				THISFORM.cboCursors.Visible=.T.
				THISFORM.cboCursors.InteractiveChange()
			ELSE
				XMLTOCURSOR(THISFORM.ReturnValue)
				THISFORM.Grid1.RecordSource=ALIAS()
			ENDIF
			THISFORM.Grid1.AutoFit()
		CATCH
			MESSAGEBOX(NOCURSOR_LOC)
			THISFORM.oleBrowser.Visible = .T.
			THISFORM.Grid1.Visible = .F.
			THISFORM.lblBrowse.Caption = DATAVIEW_LOC
		ENDTRY
		
	ENDPROC

	PROCEDURE lblRefresh.Click
		THISFORM.SetupWS(THISFORM.cServiceID, THISFORM.cMethod)
		
	ENDPROC

	PROCEDURE oleBrowser.Refresh
		*** ActiveX Control Method ***
		NODEFAULT
	ENDPROC

ENDDEFINE

DEFINE CLASS wstool AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdDone" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oWeb" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label5" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblCOMFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.cboWSDLFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.txtWSDLFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label11" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label12" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.cmdWSDLLoc" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.txtAppName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label7" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Shape4" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.opgListener" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.opgScript" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label8" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.chkPHook" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.chkUnicode" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Shape2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.txtName" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgOptions.Label9" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgMethods.oleMethods" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgMethods.lblWSDLURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgMethods.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.txtWSDLURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.lblWSDLURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.txtSchemaURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.lblSchemaURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.txtMessageURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.lblMessageURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.txtActionURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.lblActionURI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="pf1.pgURIs.Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="otypelib" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: checkpaths		&& Reserved.
		*m: updatesets		&& Reserved.
		*p: owebparm		&& Reserved.
		*a: auris[1,0]		&& Reserved.
	*</DefinedPropArrayMethod>

	BorderStyle = 2
	Caption = "Visual FoxPro XML Web Services Publisher"
	Desktop = .T.
	DoCreate = .T.
	Height = 416
	HelpContextID = 1230989
	Left = 15
	MaxButton = .F.
	MinButton = .F.
	Name = "wstool"
	ShowTips = .T.
	Top = 6
	Width = 494
	WindowType = 1

	ADD OBJECT 'cmdDone' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 410, ;
		Name = "cmdDone", ;
		TabIndex = 6, ;
		Top = 384, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdGen' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 334, ;
		Name = "cmdGen", ;
		TabIndex = 5, ;
		Top = 384, ;
		Width = 72
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .T., ;
		Caption = "XML Web Service Advanced Options", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 13, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 5, ;
		Width = 175
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label5' AS label WITH ;
		AutoSize = .F., ;
		Caption = "Select specific XML Web service files to generate. Change the file name, location, URL reference and other options if one of the default settings is not appropriate. These settings will be saved.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 41, ;
		Left = 12, ;
		Name = "Label5", ;
		TabIndex = 2, ;
		Top = 24, ;
		Width = 469, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblCOMFile' AS label WITH ;
		Caption = "COM Server:", ;
		FontBold = .T., ;
		FontCharSet = 0, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 12, ;
		Name = "lblCOMFile", ;
		TabIndex = 3, ;
		Top = 60, ;
		Width = 468
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'otypelib' AS _typelib WITH ;
		Height = 27, ;
		Left = 35, ;
		Name = "otypelib", ;
		Top = 397, ;
		Width = 25
		*< END OBJECT: ClassLib="_utility.vcx" BaseClass="custom" />

	ADD OBJECT 'oWeb' AS _webservices WITH ;
		Height = 21, ;
		Left = 12, ;
		lusingwizard = .T., ;
		Name = "oWeb", ;
		Top = 397, ;
		Width = 24
		*< END OBJECT: ClassLib="_ws3utils.vcx" BaseClass="custom" />

	ADD OBJECT 'pf1' AS pageframe WITH ;
		ErasePage = .T., ;
		Height = 308, ;
		Left = 12, ;
		Name = "pf1", ;
		PageCount = 3, ;
		TabIndex = 4, ;
		TabOrientation = 1, ;
		TabStyle = 1, ;
		Top = 80, ;
		Width = 470, ;
		Page1.Caption = "Options", ;
		Page1.FontCharSet = 0, ;
		Page1.FontName = "Tahoma", ;
		Page1.FontSize = 8, ;
		Page1.Name = "pgOptions", ;
		Page2.Caption = "Methods", ;
		Page2.FontCharSet = 0, ;
		Page2.FontName = "Tahoma", ;
		Page2.FontSize = 8, ;
		Page2.Name = "pgMethods", ;
		Page3.Caption = "Namespaces", ;
		Page3.FontCharSet = 0, ;
		Page3.FontName = "Tahoma", ;
		Page3.FontSize = 8, ;
		Page3.Name = "pgURIs"
		*< END OBJECT: BaseClass="pageframe" />

	ADD OBJECT 'pf1.pgMethods.Label1' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = 'The SOAP Toolkit supports most simple data types except currency. Note that Date types will map to Datetime. Complex types which are not supported appear as "?????" in the WSDL and need to be manually edited.', ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 132, ;
		Left = 299, ;
		Name = "Label1", ;
		TabIndex = 23, ;
		Top = 51, ;
		Width = 151, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgMethods.lblWSDLURI' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "Only select methods (operations) you would like to expose in the WSDL file.  Your Web service will only support the methods you choose.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 30, ;
		Left = 11, ;
		Name = "lblWSDLURI", ;
		TabIndex = 23, ;
		Top = 9, ;
		Width = 408, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgMethods.oleMethods' AS olecontrol WITH ;
		Height = 197, ;
		Left = 11, ;
		Name = "oleMethods", ;
		Top = 47, ;
		Visible = .T., ;
		Width = 276
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\system32\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPCkV21OicIBAwAAAAACAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuwAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAIoAAAAAAAAABAAAAAIAAAD+////BgAAAAUAAAD+////Bwi4XREbFqAMDwKDYoIUM0EggAAACHHAAAXBQAAE4IfesBAAYAHAAAAAAAAAAAAAAAIy4AAIccAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTE2AC0AMAAwAEMAMAA0AEYAQgA2ADYANwA4AEIAfQAgAEMAOgABAACAEgAAAEhpZGVDb2x1bW5IZWFkZXJzAAUAAABMAQAAAAoAAABMYWJlbEVkaXQACQAAAEkKAAAAAQAAAA0AAAAFAFwnzAEHAAAACAAAgAUAAIAAAAAAAAAAAAAAAAAAAAAAH97svQEABQBRKBoAA1LjC5GPzhGd4wCqAEu4UQEAAACQAURCAQAGVGFob21hAQAgAAAAAAAAANcZAAAIAAAAAAAAAAAAAAAAAAAACAAAAE1ldGhvZHMAADoAXAAAAE1vdXNlUG9pbnRlcgAJAAAASQoAAAAAAAAABQAAAFZpZXcACQAAAEkKAAAAAwAAAAsAAABDaGVja2JveGVzAAUAAABMAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'pf1.pgOptions.cboWSDLFile' AS combobox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 107, ;
		MaxLength = 254, ;
		Name = "cboWSDLFile", ;
		Style = 2, ;
		TabIndex = 6, ;
		Top = 87, ;
		Width = 312
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'pf1.pgOptions.chkPHook' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Automatically generate XML web service files during project \<build", ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "chkPHook", ;
		TabIndex = 21, ;
		Top = 240, ;
		Value = .F., ;
		Width = 328
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'pf1.pgOptions.chkUnicode' AS checkbox WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Generate with UTF-16 Unicode encoding", ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "chkUnicode", ;
		TabIndex = 22, ;
		Top = 260, ;
		Value = .F., ;
		Width = 211
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'pf1.pgOptions.cmdWSDLLoc' AS commandbutton WITH ;
		Caption = "...", ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 423, ;
		Name = "cmdWSDLLoc", ;
		TabIndex = 7, ;
		Top = 87, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'pf1.pgOptions.Label11' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Listener URI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label11", ;
		TabIndex = 4, ;
		Top = 91, ;
		Width = 65
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label12' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<File(s) Location:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label12", ;
		TabIndex = 8, ;
		Top = 127, ;
		Width = 78
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label2' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Enter the name for your Web service. This is also the name used for the generated WSDL (and optional ASP) files. Specify the URI location to reference in the WSDL file.", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 11, ;
		Name = "Label2", ;
		TabIndex = 5, ;
		Top = 9, ;
		Width = 432, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label6' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Listener \<Type:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label6", ;
		TabIndex = 3, ;
		Top = 172, ;
		Width = 71
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label7' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "A\<pplication:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 46, ;
		Name = "Label7", ;
		TabIndex = 18, ;
		Top = 198, ;
		Width = 58
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label8' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "Script:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 287, ;
		Name = "Label8", ;
		TabIndex = 12, ;
		Top = 198, ;
		Width = 33
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.Label9' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Service Name:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 11, ;
		Name = "Label9", ;
		TabIndex = 1, ;
		Top = 55, ;
		Width = 71
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgOptions.opgListener' AS optiongroup WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 27, ;
		Left = 87, ;
		Name = "opgListener", ;
		TabIndex = 13, ;
		Top = 165, ;
		Value = 1, ;
		Width = 104, ;
		Option1.AutoSize = .F., ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "\<ISAPI", ;
		Option1.ControlSource = "", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Style = 0, ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 45, ;
		Option2.AutoSize = .F., ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "\<ASP", ;
		Option2.ControlSource = "", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 54, ;
		Option2.Name = "Option2", ;
		Option2.Style = 0, ;
		Option2.Top = 5, ;
		Option2.Width = 45
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'pf1.pgOptions.opgScript' AS optiongroup WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		BorderStyle = 0, ;
		ButtonCount = 2, ;
		ControlSource = "", ;
		Height = 27, ;
		Left = 323, ;
		Name = "opgScript", ;
		TabIndex = 20, ;
		Top = 191, ;
		Value = 1, ;
		Width = 128, ;
		Option1.AutoSize = .F., ;
		Option1.BackStyle = 0, ;
		Option1.Caption = "\<VBScript", ;
		Option1.ControlSource = "", ;
		Option1.FontName = "Tahoma", ;
		Option1.FontSize = 8, ;
		Option1.Height = 17, ;
		Option1.Left = 5, ;
		Option1.Name = "Option1", ;
		Option1.Style = 0, ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 57, ;
		Option2.AutoSize = .F., ;
		Option2.BackStyle = 0, ;
		Option2.Caption = "\<JScript", ;
		Option2.ControlSource = "", ;
		Option2.FontName = "Tahoma", ;
		Option2.FontSize = 8, ;
		Option2.Height = 17, ;
		Option2.Left = 66, ;
		Option2.Name = "Option2", ;
		Option2.Style = 0, ;
		Option2.Top = 5, ;
		Option2.Width = 57
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'pf1.pgOptions.Shape2' AS shape WITH ;
		Height = 2, ;
		Left = 11, ;
		Name = "Shape2", ;
		SpecialEffect = 0, ;
		Top = 229, ;
		Width = 446
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pf1.pgOptions.Shape4' AS shape WITH ;
		Height = 2, ;
		Left = 11, ;
		Name = "Shape4", ;
		SpecialEffect = 0, ;
		Top = 159, ;
		Width = 446
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'pf1.pgOptions.txtAppName' AS textbox WITH ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 107, ;
		Name = "txtAppName", ;
		TabIndex = 19, ;
		Top = 195, ;
		Width = 156
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgOptions.txtName' AS textbox WITH ;
		ControlSource = "", ;
		Enabled = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("N",64)), ;
		Left = 107, ;
		Name = "txtName", ;
		TabIndex = 2, ;
		Top = 51, ;
		Width = 312
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgOptions.txtWSDLFile' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 107, ;
		Name = "txtWSDLFile", ;
		ReadOnly = .T., ;
		TabIndex = 9, ;
		Top = 123, ;
		Width = 312
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgURIs.Label1' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = 'Please specify the URIs to be used in the WSDL file for your XML web service. It is recommended that a domain other than "tempuri.org" be used.', ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 28, ;
		Left = 11, ;
		Name = "Label1", ;
		TabIndex = 1, ;
		Top = 9, ;
		Width = 396, ;
		WordWrap = .T.
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgURIs.lblActionURI' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Base SOAP Action URI (will have method name appended):", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblActionURI", ;
		TabIndex = 8, ;
		Top = 224, ;
		Width = 284
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgURIs.lblMessageURI' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Message Namespace URI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblMessageURI", ;
		TabIndex = 6, ;
		Top = 164, ;
		Width = 127
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgURIs.lblSchemaURI' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<Schema Type Definition Namespace URI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblSchemaURI", ;
		TabIndex = 4, ;
		Top = 104, ;
		Width = 197
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgURIs.lblWSDLURI' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<WSDL Namespace URI:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 15, ;
		Left = 12, ;
		Name = "lblWSDLURI", ;
		TabIndex = 2, ;
		Top = 44, ;
		Width = 113
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'pf1.pgURIs.txtActionURI' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",254)), ;
		Left = 35, ;
		Name = "txtActionURI", ;
		TabIndex = 9, ;
		Top = 245, ;
		Value = http://tempuri.org/Proj1/action/, ;
		Width = 408
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgURIs.txtMessageURI' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",254)), ;
		Left = 35, ;
		Name = "txtMessageURI", ;
		TabIndex = 7, ;
		Top = 185, ;
		Value = http://tempuri.org/Proj1/message/, ;
		Width = 408
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgURIs.txtSchemaURI' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",254)), ;
		Left = 35, ;
		Name = "txtSchemaURI", ;
		TabIndex = 5, ;
		Top = 125, ;
		Value = http://tempuri.org/Proj1/type/, ;
		Width = 408
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'pf1.pgURIs.txtWSDLURI' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		InputMask = (REPLICATE("X",254)), ;
		Left = 35, ;
		Name = "txtWSDLURI", ;
		TabIndex = 3, ;
		Top = 65, ;
		Value = http://tempuri.org/Proj1/wsdl/, ;
		Width = 408
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		Height = 0, ;
		Left = 12, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Top = 13, ;
		Width = 469
		*< END OBJECT: BaseClass="shape" />
	
	PROCEDURE checkpaths		&& Reserved.
		IF ATC(" ",JUSTSTEM(ALLTRIM(THIS.pf1.pgOptions.txtWSDLFile.Value)))#0 OR;
			ATC(" ",JUSTSTEM(ALLTRIM(THIS.pf1.pgOptions.cboWSDLFile.DisplayValue)))#0	
			MESSAGEBOX(MB_URLWITHSPACE_LOC)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS oWebRef
		
		* restore settings
		LOCAL i, lcWSDLFile, lcURI, lFound, lcFileLoc, loItem, lnCount
		DIMENSION THIS.aURIs[1,2]
		STORE "" TO lcWSDLFile
		IF VARTYPE(oWebRef) = "O"
			THIS.Left = oWebRef.Parent.Left + 10
			THIS.Top = oWebRef.Parent.Top + 10
		
			THIS.oWebParm = oWebRef
			
			WITH oWebRef
				THIS.lblCOMFile.Caption = .cCOMFile + " (" + .cClass + ")"
				lcWSDLFile = JUSTFNAME(.cWSDLfile)
				lcURI = JUSTPATH(.cWSDLListener)
				lcURI = IIF(RIGHT(lcURI,1)="/", lcURI, lcURI+"/")
				lcFileLoc = JUSTPATH(.cWSDLfile)
				
				* Main options
				THIS.pf1.pgOptions.txtName.Value = JUSTSTEM(.cWSDLfile)
				THIS.pf1.pgOptions.txtWSDLFile.Value = ADDBS(JUSTPATH(.cWSDLfile))
				THIS.pf1.pgOptions.cboWSDLFile.AddItem(lcURI)
				THIS.pf1.pgOptions.cboWSDLFile.DisplayValue = lcURI 
				
				THIS.pf1.pgOptions.opgListener.Value = IIF(.lUseIsapi,1,2)
				THIS.pf1.pgOptions.txtAppName.Value = .cAppName
				THIS.pf1.pgOptions.chkPHook.Enabled = !EMPTY(.cProject)
				THIS.pf1.pgOptions.chkPHook.Value = .lUsePHook
				THIS.pf1.pgOptions.chkUnicode.Value = .lUnicode
				THIS.pf1.pgOptions.opgScript.Value  = IIF(.lUseJScript,2,1)
		
				* Namespace options	
				THIS.pf1.pguRIs.txtWSDLURI.Value    = .cURI1
				THIS.pf1.pguRIs.txtSchemaURI.Value  = .cURI2
				THIS.pf1.pguRIs.txtMessageURI.Value = .cURI3
				THIS.pf1.pguRIs.txtActionURI.Value  = .cURI4
		
				* Method options	
				LOCAL laMethods, lnCount
				DIMENSION laMethods[1]
				lnCount = 0
				THIS.oTypelib.cTypelib = .cCOMFile
				lnCount = THIS.oTypelib.GetMethods(@laMethods, .cClass, .F., .F., .T.)
				
				* Popupate the control here
				IF lnCount > 0
					* Add all options here
					FOR i = 1 TO lnCount
						THIS.pf1.pgmethods.olemethods.ListItems.Add(m.i,laMethods[m.i,1],laMethods[m.i,1])
					ENDFOR
				ENDIF
				
				
				IF !EMPTY(.aMethods[1])
					FOR i = 1 TO ALEN(.aMethods)
						TRY
							* Need to handle change in typelib where methods added or removed
							loItem = THIS.pf1.pgmethods.olemethods.ListItems.Item(.aMethods[m.i])
							loItem.Checked= .T.
						CATCH
						ENDTRY
					ENDFOR
				ELSE
					FOR i = 1 TO THIS.pf1.pgmethods.olemethods.ListItems.Count
						loItem = THIS.pf1.pgmethods.olemethods.ListItems.Item(m.i)
						loItem.Checked=.T.
					ENDFOR	
				ENDIF
			ENDWITH
		ENDIF
		
		* Add local virtual dirs
		THIS.oWeb.GetVirDirs()
		IF !EMPTY(THIS.oWeb.aVirDirs)
			FOR i = 1 TO ALEN(THIS.oWeb.aVirDirs,1)
				IF UPPER(THIS.oWeb.aVirDirs[m.i,1]) == UPPER(lcURI)
					lFound=.T.
					LOOP
				ENDIF
				THIS.pf1.pgOptions.cboWSDLFile.AddItem(THIS.oWeb.aVirDirs[m.i, 1])
			ENDFOR
		ENDIF
		
		* If location not found, let's add it.
		IF !lFound
			DIMENSION THIS.aURIs[1,2]
			THIS.aURIs[1,1] = lcURI
			THIS.aURIs[1,2]	= lcFileLoc
		ENDIF
		
	ENDPROC

	PROCEDURE Refresh
		THIS.pf1.pgOptions.txtAppName.Enabled = (THIS.pf1.pgOptions.opgListener.Value#1)
		THIS.pf1.pgOptions.opgScript.SetAll("Enabled",(THIS.pf1.pgOptions.opgListener.Value#1),"OptionButton")
		
	ENDPROC

	PROCEDURE updatesets		&& Reserved.
		LOCAL lcURI
		IF VARTYPE(THIS.oWebParm) = "O"
			WITH THIS.oWebParm
				.cService = ALLTRIM(THIS.pf1.pgOptions.txtName.Value)
				lcURI = ALLTRIM(THIS.pf1.pgOptions.cboWSDLFile.DisplayValue) 
				lcURI = IIF(RIGHT(lcURI,1)="/", lcURI, lcURI+"/") 	
				.cWSDLListener = lcURI + .cService + ".wsdl"
				.cASPListener = lcURI + .cService + ".asp"
				.cWSDLfile = ADDBS(ALLTRIM(THIS.pf1.pgOptions.txtWSDLFile.Value)) + .cService + ".wsdl"
				.cASPfile = ADDBS(ALLTRIM(THIS.pf1.pgOptions.txtWSDLFile.Value)) + .cService + ".asp"
				.cAppName = ALLTRIM(THIS.pf1.pgOptions.txtAppName.Value) 
				.lUseIsapi = (THIS.pf1.pgOptions.opgListener.Value=1)
				.lUseJScript = (THIS.pf1.pgOptions.opgScript.Value=2)
				.lUnicode = THIS.pf1.pgOptions.chkUnicode.Value
				IF THIS.pf1.pgOptions.chkPHook.Enabled AND THIS.pf1.pgOptions.chkPHook.Value#.lUsePHook
					.lUsePHook = THIS.pf1.pgOptions.chkPHook.Value
					.lChangePHook = .T.
				ENDIF
				.cURI1 = ALLTRIM(THIS.pf1.pguRIs.txtWSDLURI.Value)
				.cURI2 = ALLTRIM(THIS.pf1.pguRIs.txtSchemaURI.Value)
				.cURI3 = ALLTRIM(THIS.pf1.pguRIs.txtMessageURI.Value)
				.cURI4 = ALLTRIM(THIS.pf1.pguRIs.txtActionURI.Value)
				
				DIMENSION .aMethods[1]
				.aMethods[1]=""
				FOR EACH oItem IN THIS.pf1.pgmethods.olemethods.ListItems
					IF oItem.Checked
						IF !EMPTY(.aMethods[1])
							DIMENSION .aMethods[ALEN(.aMethods)+1]
						ENDIF
						.aMethods[ALEN(.aMethods)] = oItem.Key
					ENDIF
				ENDFOR	
		
				.SavePrefs()
			ENDWITH
		ENDIF
	ENDPROC

	PROCEDURE cmdDone.Click
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdGen.Click
		IF !THISFORM.CheckPaths() 
			RETURN
		ENDIF	
		THISFORM.UpdateSets()
		THISFORM.Release()
		
	ENDPROC

	PROCEDURE pf1.pgOptions.cboWSDLFile.InteractiveChange
		LOCAL lnPos,lcURL
		lcURL = THIS.DisplayValue
		
		* Look in existing virtual directories
		lnPos = ASCAN(THISFORM.oWeb.aVirDirs,lcURL,-1,-1,-1,15)
		IF lnPos#0
			THISFORM.pf1.pgOptions.txtWSDLFile.Value = THISFORM.oWeb.aVirDirs[m.lnPos,2]
			RETURN
		ENDIF
		
		* Look in other locations
		lnPos = ASCAN(THISFORM.aURIs,lcURL,-1,-1,-1,15)
		IF lnPos#0
			THISFORM.pf1.pgOptions.txtWSDLFile.Value = THISFORM.aURIs[m.lnPos,2]
		ENDIF
		
	ENDPROC

	PROCEDURE pf1.pgOptions.cmdWSDLLoc.Click
		LOCAL loConfig, i
		PRIVATE lcURL, lcDefPath
		lcURL=""
		lcDefPath=""
		loConfig = NEWOBJECT("wsconfig",THISFORM.ClassLibrary,"","lcURL","lcDefPath")
		loConfig.lDefaultMode = .F.
		loConfig.Show()
		lcURL = ALLTRIM(lcURL)
		IF EMPTY(lcURL)
			RETURN
		ENDIF
		lcURL = IIF(RIGHT(lcURL,1)="/", lcURL, lcURL+"/") 	
		THISFORM.pf1.pgOptions.txtWSDLFile.Value = lcDefPath
		
		* See if we already have this item registered.
		FOR i = 1 TO THISFORM.pf1.pgOptions.cboWSDLFile.ListCount
			IF UPPER(THISFORM.pf1.pgOptions.cboWSDLFile.List[m.i])==UPPER(lcURL)
				THISFORM.pf1.pgOptions.cboWSDLFile.ListIndex=m.i
				RETURN
			ENDIF
		ENDFOR
		
		THISFORM.pf1.pgOptions.cboWSDLFile.AddItem(lcURL)
		THISFORM.pf1.pgOptions.cboWSDLFile.DisplayValue = lcURL
		
		IF !EMPTY(THISFORM.aURIs[1])
			DIMENSION THISFORM.aURIs[ALEN(THISFORM.aURIs,1)+1,2]
		ENDIF
		
		THISFORM.aURIs[ALEN(THISFORM.aURIs,1),1] = lcURL
		THISFORM.aURIs[ALEN(THISFORM.aURIs,1),2] = lcDefPath
		
	ENDPROC

	PROCEDURE pf1.pgOptions.opgListener.Click
		THISFORM.Refresh()
	ENDPROC

	PROCEDURE pf1.pgOptions.opgScript.Click
		THISFORM.Refresh()
	ENDPROC

ENDDEFINE

DEFINE CLASS wsuddi AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shape1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="txtUDDI" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSelect" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblBizname" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label6" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboWS" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblWSDL" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="_hyperlinklabel1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="edtDetails" UniqueID="" Timestamp="" />

	#INCLUDE "_ws3.h"
	*<DefinedPropArrayMethod>
		*m: cleanaccesspoint
		*m: searchbusiness		&& Method to search.
		*m: searchservice
		*m: updateservicearray
		*p: oref		&& Reserved.
		*a: auddi[1,0]		&& Array of UDDI Web Services found.
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "UDDI Search"
	Desktop = .T.
	DoCreate = .T.
	HalfHeightCaption = .T.
	Height = 269
	MaxButton = .F.
	MinButton = .F.
	Name = "wsuddi"
	ShowTips = .T.
	Width = 419

	ADD OBJECT '_hyperlinklabel1' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "Go to Microsoft UDDI Web Site", ;
		ctarget = http://uddi.microsoft.com/search/frames.aspx, ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 240, ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "_hyperlinklabel1", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 10, ;
		Top = 204, ;
		Width = 149
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'cboWS' AS combobox WITH ;
		BorderColor = 0,128,192, ;
		ControlSource = "", ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 24, ;
		ItemTips = .T., ;
		Left = 120, ;
		Name = "cboWS", ;
		Style = 2, ;
		TabIndex = 8, ;
		Top = 75, ;
		Width = 276
		*< END OBJECT: BaseClass="combobox" />

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 348, ;
		Name = "cmdCancel", ;
		TabIndex = 13, ;
		Top = 240, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSearch' AS commandbutton WITH ;
		Caption = "\<Search", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 12, ;
		Name = "cmdSearch", ;
		TabIndex = 11, ;
		Top = 240, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdSelect' AS commandbutton WITH ;
		Caption = "Se\<lect", ;
		Default = .T., ;
		Enabled = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 276, ;
		Name = "cmdSelect", ;
		TabIndex = 12, ;
		Top = 240, ;
		Width = 60
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'edtDetails' AS editbox WITH ;
		EnableHyperlinks = .T., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 84, ;
		Left = 24, ;
		Name = "edtDetails", ;
		ReadOnly = .T., ;
		Top = 108, ;
		Width = 372
		*< END OBJECT: BaseClass="editbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 1, ;
		Caption = "Results", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 24, ;
		Name = "Label1", ;
		Style = 3, ;
		TabIndex = 3, ;
		Top = 57, ;
		Width = 37
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label3' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "\<Enter name to search for in UDDI database:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 12, ;
		Name = "Label3", ;
		TabIndex = 1, ;
		Top = 10, ;
		Width = 241
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label6' AS label WITH ;
		AutoSize = .T., ;
		BackStyle = 0, ;
		Caption = "\<XML Web Services:", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 24, ;
		Name = "Label6", ;
		TabIndex = 7, ;
		Top = 81, ;
		Width = 93
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblBizname' AS label WITH ;
		AutoSize = .F., ;
		BackStyle = 0, ;
		Caption = "", ;
		FontBold = .F., ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		FontUnderline = .F., ;
		Height = 15, ;
		Left = 84, ;
		Name = "lblBizname", ;
		TabIndex = 5, ;
		Top = 136, ;
		Width = 312
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'lblWSDL' AS _hyperlinklabel WITH ;
		BackStyle = 0, ;
		Caption = "View Service Description (WSDL)", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		ForeColor = 0,0,255, ;
		Height = 15, ;
		Left = 24, ;
		MouseIcon = graphics\h_point.cur, ;
		Name = "lblWSDL", ;
		nvisitedforecolor = 16711680, ;
		TabIndex = 10, ;
		Top = 204, ;
		Width = 157
		*< END OBJECT: ClassLib="_hyperlink.vcx" BaseClass="label" />

	ADD OBJECT 'Shape1' AS shape WITH ;
		BackStyle = 0, ;
		Height = 164, ;
		Left = 12, ;
		Name = "Shape1", ;
		SpecialEffect = 0, ;
		Style = 3, ;
		Top = 64, ;
		Width = 396
		*< END OBJECT: BaseClass="shape" />

	ADD OBJECT 'txtUDDI' AS textbox WITH ;
		ControlSource = "", ;
		FontName = "Tahoma", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 12, ;
		Name = "txtUDDI", ;
		TabIndex = 2, ;
		Top = 26, ;
		Width = 396
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE cleanaccesspoint
		LPARAMETERS tcAccessPoint
		
		* Do some cleanup here
		LOCAL lcAccessPoint, i, lcTmpStr
		lcAccessPoint=tcAccessPoint
		
		DO CASE
		CASE ATC(",", lcAccessPoint)#0
			FOR i = 1 TO GETWORDCOUNT(lcAccessPoint,",")
				lcTmpStr=GETWORDNUM(lcAccessPoint,m.i,",")
				IF ATC("WSDL", lcTmpStr)#0 OR ATC(".ASMX", lcTmpStr)#0
					lcAccessPoint=lcTmpStr
					EXIT
				ENDIF
			ENDFOR
		CASE ATC(";", lcAccessPoint)#0
			FOR i = 1 TO GETWORDCOUNT(lcAccessPoint,";")
				lcTmpStr=GETWORDNUM(lcAccessPoint,m.i,";")
				IF ATC("WSDL", lcTmpStr)#0 OR ATC(".ASMX", lcTmpStr)#0
					lcAccessPoint=lcTmpStr
					EXIT
				ENDIF
			ENDFOR
		ENDCASE
				
		IF ATC(".ASMX", lcAccessPoint)#0 AND ATC("WSDL", lcAccessPoint)=0
			lcAccessPoint=LEFT(lcAccessPoint, ATC(".ASMX",lcAccessPoint)) + "ASMX?WSDL"
		ENDIF
		
		lcAccessPoint=ALLTRIM(lcAccessPoint)
		
		RETURN lcAccessPoint
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		RETURN
	ENDPROC

	PROCEDURE searchbusiness		&& Method to search.
		LPARAMETERS tcBizName
		
		IF VARTYPE(tcBizName)#"C" OR EMPTY(tcBizName)
			LOCAL lcName
			lcName = INPUTBOX(ENTERUDDINAME_LOC, UDDISEARCH_LOC, "")
			IF EMPTY(lcName)
				RETURN
			ENDIF
			tcBizName = lcName
		ENDIF
		
		LOCAL loEnv AS "UDDIEnv.Envelope"
		LOCAL loFind AS "UDDI10.find_business"
		LOCAL loReq AS "UDDIEnv.RequestManager"
		LOCAL loBizList AS "UDDI10.businessList"
		
		LOCAL lcBizName, lcBizDesc, lcSvcName, lcSvcDesc 
		LOCAL lcAccessPoint, loInfo, loEnv2, loEnv3, loEnv4, loSvcDet 
		STORE "" TO lcBizName, lcBizDesc, lcSvcName, lcSvcDesc, lcAccessPoint
		
		loReq = CREATEOBJECT("UDDIEnv.RequestManager")
		IF VARTYPE(loReq)#"O"
			RETURN
		ENDIF
		
		loEnv = CREATEOBJECT("UDDIEnv.Envelope")
		loFind = CREATEOBJECT("UDDI10.find_business")
		loBizList = CREATEOBJECT("UDDI10.businessList")
		
		loEnv.Plugin=loFind
		loFind.name = tcBizName	
		loFind.maxRows=100
		loEnv2=loReq.UDDIRequest(loEnv)
		IF VARTYPE(loEnv2)#"O"
			RETURN
		ENDIF
		loEnv2.Plugin=loBizList
		
		FOR EACH loInfo IN loBizList.businessInfos
			lcBizName = loInfo.name
		
			TRY
				lcBizDesc = loInfo.Description.Item(1).Description
			CATCH
				lcBizDesc=""
			ENDTRY
			
			FOR EACH loSvc IN loInfo.serviceInfos
		
				lcSvcName = loSvc.name
				loEnv3 = CREATEOBJECT("UDDIEnv.Envelope")       
				loSvcDet = CREATEOBJECT("UDDI10.get_serviceDetail")
				loEnv3.Plugin = loSvcDet		
				loSvcDet.AddserviceKey.serviceKey = loSvc.ServiceKey
				loEnv4 = loReq.UDDIRequest(loEnv3)
				loSvcDet = ""
		
				IF loReq.UDDIErrno # 0
					LOOP
				ENDIF
					
				loSvcDet = CREATEOBJECT("UDDI10.serviceDetail")
				loEnv4.Plugin = loSvcDet
				
				TRY
					lcSvcDesc = loSvcDet.businessService(1).Description.Item(1).Description
				CATCH
					lcSvcDesc = ""
				ENDTRY
					
				FOR EACH loBind In loSvcDet.businessService(1).bindingTemplates
					lcAccessPoint = loBind.accessPoint.accessPoint
					IF ATC("WSDL", lcAccessPoint)#0 OR ATC(".ASMX", lcAccessPoint)#0
						EXIT
					ENDIF
				ENDFOR
				
				IF ATC("WSDL", lcAccessPoint)#0 OR ATC(".ASMX", lcAccessPoint)#0
					* Clean up WSDL reference
					lcAccessPoint = THIS.CleanAccessPoint(lcAccessPoint)
				ENDIF
					
				* Add items to array here
				THIS.UpdateServiceArray(lcBizName,lcBizDesc,lcSvcName,lcSvcDesc,lcAccessPoint)
		
			ENDFOR
		
		ENDFOR
	ENDPROC

	PROCEDURE searchservice
		LPARAMETERS tcBizName
		
		IF VARTYPE(tcBizName)#"C" OR EMPTY(tcBizName)
			LOCAL lcName
			lcName = INPUTBOX(ENTERUDDINAME_LOC, UDDISEARCH_LOC, "")
			IF EMPTY(lcName)
				RETURN
			ENDIF
			tcBizName = lcName
		ENDIF
		
		LOCAL loReq AS "UDDIEnv.RequestManager"
		LOCAL loEnv AS "UDDIEnv.Envelope"
		LOCAL loFind AS "UDDI10.find_service"
		LOCAL loSerList AS "UDDI10.serviceList"
		
		LOCAL lcSvcName, lcSvcDesc
		LOCAL lcAccessPoint, loInfo, loEnv2, loEnv3, loEnv4, loSvcDet 
		STORE "" TO lcSvcName, lcSvcDesc, lcAccessPoint
		
		loReq = CREATEOBJECT("UDDIEnv.RequestManager")
		IF VARTYPE(loReq)#"O"
			RETURN
		ENDIF
		
		loEnv = CREATEOBJECT("UDDIEnv.Envelope")
		loFind = CREATEOBJECT("UDDI10.find_service")
		loSerList = CREATEOBJECT("UDDI10.serviceList")
		
		loEnv.Plugin=loFind
		loFind.name = tcBizName	
		loFind.maxRows=100
		loEnv2=loReq.UDDIRequest(loEnv)
		
		IF VARTYPE(loEnv2) # "O"
			RETURN	
		ENDIF
		
		loEnv2.Plugin=loSerList
		
		FOR EACH loInfo IN loSerList.serviceInfos
		
			lcSvcName = loInfo.name
			loEnv3 = CREATEOBJECT("UDDIEnv.Envelope")       
			loSvcDet = CREATEOBJECT("UDDI10.get_serviceDetail")
			loEnv3.Plugin = loSvcDet		
			loSvcDet.AddserviceKey.serviceKey = loInfo.ServiceKey
			loEnv4 = loReq.UDDIRequest(loEnv3)
			loSvcDet = ""
			IF loReq.UDDIErrno # 0	
				LOOP
			ENDIF
		
			loSvcDet = CREATEOBJECT("UDDI10.serviceDetail")
			loEnv4.Plugin = loSvcDet
			TRY
				lcSvcDesc = loSvcDet.businessService(1).Description.Item(1).Description
			CATCH
				lcSvcDesc = ""
			ENDTRY
				
		     	FOR EACH loBind In loSvcDet.businessService(1).bindingTemplates
				lcAccessPoint = loBind.accessPoint.accessPoint
				IF ATC("WSDL", lcAccessPoint)#0 OR ATC(".ASMX", lcAccessPoint)#0
					EXIT
				ENDIF
			ENDFOR	
		
			IF ATC("WSDL", lcAccessPoint)#0 OR ATC(".ASMX", lcAccessPoint)#0
				* Clean up WSDL reference
				lcAccessPoint = THIS.CleanAccessPoint(lcAccessPoint)
			ENDIF
				
			* Add items to array here
			THIS.UpdateServiceArray("", "", lcSvcName,lcSvcDesc,lcAccessPoint)
				
		ENDFOR
	ENDPROC

	PROCEDURE updateservicearray
		LPARAMETERS tcBizName,tcBizDesc,tcSvcName,tcSvcDesc,tcAccessPoint
		
		IF ASCAN(THISFORM.aUDDI, tcAccessPoint,-1,-1, 5, 7)#0
			RETURN
		ENDIF
		
		IF ALEN(THIS.aUDDI)<5
			DIMENSION THIS.aUDDI[1,5]
		ENDIF
		
		IF !EMPTY(THIS.aUDDI[1,5])
			DIMENSION THIS.aUDDI[ALEN(THIS.aUDDI,1)+1,5]	
		ENDIF
		
		THIS.aUDDI[ALEN(THIS.aUDDI,1),1] = tcBizName
		THIS.aUDDI[ALEN(THIS.aUDDI,1),2] = tcBizDesc
		THIS.aUDDI[ALEN(THIS.aUDDI,1),3] = tcSvcName
		THIS.aUDDI[ALEN(THIS.aUDDI,1),4] = tcSvcDesc
		THIS.aUDDI[ALEN(THIS.aUDDI,1),5] = tcAccessPoint
		
	ENDPROC

	PROCEDURE cboWS.InteractiveChange
		LOCAL lcDescPane, lcWSDL
		
		lcWSDL = THISFORM.aUDDI[THIS.ListIndex,5]
		lcDescPane = THISFORM.aUDDI[THIS.ListIndex,4]
		
		IF !EMPTY(THISFORM.aUDDI[THIS.ListIndex,1])
			lcDescPane = lcDescPane + CRLF + CRLF + THISFORM.aUDDI[THIS.ListIndex,1]
		ENDIF
		IF !EMPTY(THISFORM.aUDDI[THIS.ListIndex,2])
			lcDescPane = lcDescPane + CRLF + CRLF + THISFORM.aUDDI[THIS.ListIndex,2]
		ENDIF
		IF !EMPTY(lcWSDL)
			lcDescPane = lcDescPane + CRLF + CRLF + lcWSDL
		ENDIF
		
		THISFORM.edtDetails.Value = lcDescPane
		
		THISFORM.lblWSDL.cTarget = lcWSDL
		
		IF ATC("WSDL", lcWSDL)#0 OR ATC(".ASMX",lcWSDL)#0
			THISFORM.cmdSelect.Enabled= .T. 
			THISFORM.lblWSDL.Enabled=.T.
		ELSE
			THISFORM.cmdSelect.Enabled= .F.
			THISFORM.lblWSDL.Enabled=.F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		THISFORM.Release()
	ENDPROC

	PROCEDURE cmdSearch.Click
		LOCAL lcStr, i
		lcStr = ALLTRIM(THISFORM.txtUDDI.Value)
		IF EMPTY(lcStr)
			RETURN
		ENDIF
		
		THISFORM.cboWS.Clear()
		THISFORM.edtDetails.Value = ""
		
		DIMENSION THISFORM.aUDDI[1,5]
		STORE "" TO THISFORM.aUDDI
		
		WAIT WINDOW SEARCHUDDI_LOC NOWAIT
		THISFORM.SearchBusiness(lcStr)
		THISFORM.SearchService(lcStr)
		WAIT CLEAR
		
		IF EMPTY(THISFORM.aUDDI[1,5])
			THISFORM.cboWS.Enabled = .F.
			THISFORM.cmdSelect.Enabled = .F.
			MESSAGEBOX(NOUDDIMATCH_LOC)
			RETURN
		ENDIF
		
		FOR i = 1 TO ALEN(THISFORM.aUDDI,1)
			THISFORM.cboWS.AddItem(THISFORM.aUDDI[m.i,3])
		ENDFOR
		
		THISFORM.cmdSelect.Enabled = .T.
		THISFORM.cboWS.Enabled = .T.
		THISFORM.cboWS.Listindex = 1
		THISFORM.cboWS.InteractiveChange()
		
	ENDPROC

	PROCEDURE cmdSelect.Click
		IF VARTYPE(THISFORM.oref) = "O" AND !EMPTY(THISFORM.cboWS.DisplayValue)
			THISFORM.oRef.cNewWS = THISFORM.cboWS.DisplayValue
			THISFORM.oRef.cNewWSDL = THISFORM.lblWSDL.cTarget
		ENDIF
		
		THISFORM.Release()
	ENDPROC

ENDDEFINE
