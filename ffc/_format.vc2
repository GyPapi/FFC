*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_format.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _cbofontname AS _combobox OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	FontBold = .F.
	Height = 25
	Name = "_cbofontname"
	Style = 2
	Width = 217
	
	PROCEDURE Init
		LOCAL aFontNames,i
		DIMENSION aFontNames[1]
		=afont(aFontNames)
		FOR i = 1 TO ALEN(aFontNames)
			THIS.AddItem(aFontNames[m.i])
		ENDFOR
		THIS.Value = THIS.FontName
	ENDPROC

ENDDEFINE

DEFINE CLASS _cbofontsize AS _combobox OF "_base.vcx" 		&& displays the font sizes available for a particular font
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: filllist
		*p: nlargestfont		&& For scalable fonts, specifies the largest allowable fontsize.
		*p: nsmallestfont		&& For scalable fonts, smallest allowable fontsize.
	*</DefinedPropArrayMethod>

	FontBold = .F.
	Height = 25
	Name = "_cbofontsize"
	nlargestfont = 48		&& For scalable fonts, specifies the largest allowable fontsize.
	nsmallestfont = 8		&& For scalable fonts, smallest allowable fontsize.
	Style = 2
	ToolTipText = "FontSize"
	Width = 44
	
	PROCEDURE filllist
		LPARAMETERS cFontName,lAutoReset
		
		LOCAL aSizes,lScalable,nLen,nStart,i,lfoundfont,cSaveValue,cFontSize 
		lfoundfont = .F.
		
		IF EMPTY(THIS.Value)
			THIS.Value  = ""
		ENDIF
		cSaveValue = THIS.Value
		
		THIS.Clear
		
		DIMENSION aSizes[1]
		=AFONT(aSizes, cFontname)
		IF aSizes[1] = -1  && The font is scalable
			lScalable = .T.
			nLen = THIS.nLargestFont
			nStart = THIS.nSmallestFont
		ELSE
			nLen = ALEN(aSizes)
			nStart = 1
			lScalable = .F.
		ENDIF
		
		FOR i = m.nStart TO m.nLen
			cFontSize = IIF(m.lScalable,TRANS(m.i),TRANS(aSizes[m.i]))
			THIS.AddItem(m.cFontSize)
			IF m.cFontSize == m.cSaveValue
				m.lfoundfont = .T.
			ENDIF
		ENDFOR
		
		IF VARTYPE(m.lAutoReset)="L" AND m.lAutoReset
			THIS.Value = THIS.List[1]
		ELSE
			* Check if font already set
			THIS.Value = IIF(m.lFoundFont,m.cSaveValue,THIS.List[1])
		ENDIF
		
	ENDPROC

	PROCEDURE Init
		THIS.filllist(THIS.FontName,.T.)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _rtfcontrols AS _container OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Cbofontnames" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Cbofontsizes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdItalic" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdColor" UniqueID="" Timestamp="" />

	BorderWidth = 0
	Height = 32
	Name = "_rtfcontrols"
	Width = 311

	ADD OBJECT 'Cbofontnames' AS _cbofontname WITH ;
		Height = 25, ;
		Left = 4, ;
		Name = "Cbofontnames", ;
		Top = 4, ;
		Width = 157
		*< END OBJECT: ClassLib="_format.vcx" BaseClass="combobox" />

	ADD OBJECT 'Cbofontsizes' AS _cbofontsize WITH ;
		Left = 172, ;
		Name = "Cbofontsizes", ;
		Top = 4
		*< END OBJECT: ClassLib="_format.vcx" BaseClass="combobox" />

	ADD OBJECT 'cmdBold' AS _commandbutton WITH ;
		Caption = "B", ;
		FontBold = .T., ;
		FontName = "Courier New", ;
		Height = 23, ;
		Left = 227, ;
		Name = "cmdBold", ;
		ToolTipText = "Bold", ;
		Top = 4, ;
		Width = 25
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdColor' AS _commandbutton WITH ;
		Caption = "C", ;
		ForeColor = 255,0,0, ;
		Height = 23, ;
		Left = 283, ;
		Name = "cmdColor", ;
		ToolTipText = "Color", ;
		Top = 4, ;
		Width = 25
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdItalic' AS _commandbutton WITH ;
		Caption = "I", ;
		FontBold = .T., ;
		FontItalic = .T., ;
		FontName = "Courier New", ;
		FontSize = 9, ;
		Height = 23, ;
		Left = 255, ;
		Name = "cmdItalic", ;
		ToolTipText = "Italic", ;
		Top = 4, ;
		Width = 25
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="commandbutton" />
	
	PROCEDURE Cbofontnames.InteractiveChange
		THIS.Parent.cboFontSizes.FillList(THIS.Value)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _tbrediting AS _toolbar OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="toolbar" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboFonts" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator3" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboSizes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkBold" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkItalic" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkUnderline" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Separator2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboColor" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: nappliesto		&& 1 - applies to current control. 3 - applies to all controls.
	*</DefinedPropArrayMethod>

	Caption = "Editing"
	Height = 31
	Left = 0
	Name = "_tbrediting"
	nappliesto = 1		&& 1 - applies to current control. 3 - applies to all controls.
	Top = 0
	Width = 339

	ADD OBJECT 'cboColor' AS _combobox WITH ;
		FontBold = .F., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 265, ;
		Name = "cboColor", ;
		Style = 2, ;
		ToolTipText = "ForeColor and BackColor", ;
		Top = 5, ;
		Value = 0, ;
		Width = 69
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboFonts' AS _cbofontname WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 5, ;
		Name = "cboFonts", ;
		Top = 5, ;
		Width = 125
		*< END OBJECT: ClassLib="_format.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboSizes' AS _cbofontsize WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 135, ;
		Name = "cboSizes", ;
		Top = 5
		*< END OBJECT: ClassLib="_format.vcx" BaseClass="combobox" />

	ADD OBJECT 'chkBold' AS _checkbox WITH ;
		Caption = "B", ;
		FontBold = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 184, ;
		Name = "chkBold", ;
		Style = 1, ;
		ToolTipText = "Bold", ;
		Top = 5, ;
		Value = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkItalic' AS _checkbox WITH ;
		Caption = "I", ;
		FontItalic = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 209, ;
		Name = "chkItalic", ;
		Style = 1, ;
		ToolTipText = "Italic", ;
		Top = 5, ;
		Value = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkUnderline' AS _checkbox WITH ;
		Caption = "U", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		FontUnderline = .T., ;
		Height = 22, ;
		Left = 234, ;
		Name = "chkUnderline", ;
		Style = 1, ;
		ToolTipText = "Underline", ;
		Top = 5, ;
		Value = .F., ;
		Width = 26
		*< END OBJECT: ClassLib="_base.vcx" BaseClass="checkbox" />

	ADD OBJECT 'Separator1' AS separator WITH ;
		Height = 22, ;
		Left = 184, ;
		Name = "Separator1", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator2' AS separator WITH ;
		Height = 22, ;
		Left = 265, ;
		Name = "Separator2", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />

	ADD OBJECT 'Separator3' AS separator WITH ;
		Height = 22, ;
		Left = 135, ;
		Name = "Separator3", ;
		Top = 5, ;
		Width = 0
		*< END OBJECT: BaseClass="separator" />
	
	PROCEDURE Destroy
		This.Visible = .F.
		
	ENDPROC

	PROCEDURE Refresh
		LPARAMETERS oSource
		
		LOCAL i
		
		DO CASE
			CASE THIS.nAppliesTo = 2 && text and edit boxes
				IF TYPE("_SCREEN.ActiveForm") = 'O'
					oForm = _SCREEN.ActiveForm
				ELSE
					RETURN
				ENDIF
				FOR i = 1 to oForm.ControlCount
					IF oForm.Controls(i).BaseClass$"Textbox Editbox"
						THIS.cboFonts.Value = oForm.Controls(m.i).FontName
						THIS.cboSizes.FillList(THIS.cboFonts.Value)
						THIS.cboSizes.Value = STR(oForm.Controls(m.i).FontSize)
						THIS.chkBold.Value = oForm.Controls(m.i).FontBold
						THIS.chkItalic.Value = oForm.Controls(m.i).FontItalic
						THIS.chkUnderline.Value = oForm.Controls(m.i).FontUnderline
						EXIT
					ENDIF
				ENDFOR
			OTHERWISE
				IF TYPE("oSource") != 'O'
					RETURN
				ENDIF
				IF TYPE("oSource.FontName") #"U"
					THIS.cboFonts.Value = oSource.FontName
					THIS.cboSizes.FillList(THIS.cboFonts.Value)
					THIS.cboSizes.Value = STR(oSource.FontSize)
					THIS.chkBold.Value = oSource.FontBold
					THIS.chkItalic.Value = oSource.FontItalic
					THIS.chkUnderline.Value = oSource.FontUnderline
				ENDIF
		ENDCASE
	ENDPROC

	PROCEDURE cboColor.Init
		#DEFINE ITEM_COLORS_LOC	"Colors"
		#DEFINE ITEM_FCOLOR_LOC	"Set ForeColor..."
		#DEFINE ITEM_BCOLOR_LOC	"Set BackColor..."
		
		THIS.AddItem(ITEM_COLORS_LOC)
		THIS.AddItem(ITEM_FCOLOR_LOC)
		THIS.AddItem(ITEM_BCOLOR_LOC)
		THIS.ListIndex = 1
		
	ENDPROC

	PROCEDURE cboColor.InteractiveChange
		LOCAL oForm,oControl,nBackColor,nForeColor 
		
		IF TYPE("_SCREEN.ActiveForm") = 'O'
			oForm = _SCREEN.ActiveForm
			oControl = oForm.ActiveControl
		ELSE
			RETURN
		ENDIF
		DO CASE 
			CASE This.Value = 1
				RETURN
			CASE This.Value = 2 && Get ForeColor
				nForeColor = GETCOLOR()
				IF m.nForeColor > -1
				DO CASE
					CASE THISFORM.nAppliesTo = 1 && current control
						IF TYPE("oControl.ForeColor") = "N"
							oControl.ForeColor = m.nForeColor
						ELSE
							IF TYPE("oControl.ItemForeColor") = "N"
								oControl.ItemForeColor = m.nForeColor
							ENDIF
						ENDIF
					CASE THISFORM.nAppliesTo = 2 && text and edit boxes
						oForm.SetAll('ForeColor', m.nForeColor, 'TEXTBOX')
						oForm.SetAll('ForeColor', m.nForeColor, 'EDITBOX')
					
					CASE THISFORM.nAppliesTo = 3 && All controls
						oForm.SetAll('ForeColor', m.nForeColor)
				ENDCASE
				ENDIF
		
			CASE This.Value = 3 && Get BackColor
				nBackColor = GETCOLOR()
				IF m.nBackColor > -1
				DO CASE
					CASE THISFORM.nAppliesTo = 1 && current control
						IF TYPE("oForm.ActiveControl.BackColor") = "N"
							oForm.ActiveControl.BackColor = m.nBackColor
						ELSE
							IF TYPE("oForm.ActiveControl.ItemBackColor") = "N"
								oForm.ActiveControl.ItemBackColor = m.nBackColor
							ENDIF
						ENDIF
					CASE THISFORM.nAppliesTo = 2 && text and edit boxes
						oForm.SetAll('BackColor', m.nBackColor, 'TEXTBOX')
						oForm.SetAll('BackColor', m.nBackColor, 'EDITBOX')
					
					CASE THISFORM.nAppliesTo = 3 && All controls
						oForm.SetAll('BackColor', m.nBackColor)
				ENDCASE
				ENDIF		
		ENDCASE
		THIS.Value = 1
		
		
	ENDPROC

	PROCEDURE cboFonts.InteractiveChange
		LOCAL oForm, oControl
		IF TYPE("_SCREEN.ActiveForm") = "O" AND TYPE("_SCREEN.ActiveForm.ActiveControl") = "O"
			oForm = _SCREEN.ActiveForm
			oControl = oForm.ActiveControl
		ELSE
			RETURN
		ENDIF
		
		DO CASE
			CASE THIS.Parent.nAppliesTo = 1	&& Current Control
				IF PEMSTATUS(oControl,'Fontname',5)
					oControl.FontName = This.Value
				ENDIF
				
			CASE THIS.Parent.nAppliesTo = 2	&& All textboxes and editboxes
				oForm.SetAll('FontName', This.Value, 'TEXTBOX')
				oForm.SetAll('FontName', This.Value, 'EDITBOX')
			
			*==================================================================
			* comment out the previous 2 lines and uncomment the following lines
			* if you want to affect all controls with a baseclass of textbox 
			* or editbox.
			*------------------------------------------------------------------
			*FOR i = 1 to oForm.ControlCount
			*  <find out what the baseclass property is to avoid having to UPPER>
			*	IF UPPER(oForm.Controls(i).BaseClass) = 'TEXTBOX' OR ;
			*		UPPER(oForm.Controls(i).BaseClass) = 'EDITBOX'
			*		oForm.Controls(i).FontName = THIS.Value
			*	ENDIF
			*ENDFOR
			*==================================================================
		
			CASE THIS.Parent.nAppliesTo = 3	&& All Controls
				oForm.SetAll('FontName', This.Value)
		
		ENDCASE
		
		THIS.Parent.cboSizes.FillList(THIS.Value)
		THIS.Parent.Refresh(oControl)
		
	ENDPROC

	PROCEDURE cboSizes.Error
		LPARAMETERS nError, cMethod, nLine
		
		#define NUM_LOC "Error Number: "
		#define PROG_LOC "Procedure: "
		#define MSG_LOC "Error Message: "
		#define CR_LOC CHR(13)
		#define BADSIZE_LOC "The control doesn't support the selected fontsize."
		
		LOCAL lcMsg,lnAnswer  
		DO CASE
			CASE nError = 1881 && Fontsize invalid for the control
				WAIT WINDOW BADSIZE_LOC TIMEOUT 2
				IF TYPE("Application.ActiveForm.ActiveControl") = "O"
					THIS.Parent.Refresh(Application.ActiveForm.ActiveControl)
				ENDIF
			
			OTHERWISE
			*-----------------------------------------------------------
			* Display information about an unanticipated error.
			*-----------------------------------------------------------
				lcMsg = NUM_LOC + ALLTRIM(STR(nError)) + CR_LOC + CR_LOC + ;
						MSG_LOC + MESSAGE( )+ CR_LOC + CR_LOC + ;
						PROG_LOC + PROGRAM(1)
				lnAnswer = MESSAGEBOX(lcMsg, 2+48+512)
				DO CASE
					CASE m.lnAnswer = 3 &&Abort
						CANCEL
					CASE m.lnAnswer = 4 &&Retry
						RETRY
					OTHERWISE
						RETURN
				ENDCASE
		ENDCASE
		
	ENDPROC

	PROCEDURE cboSizes.InteractiveChange
		LOCAL oForm
		IF TYPE("_SCREEN.ActiveForm") = "O"
			oForm = _SCREEN.ActiveForm
		ELSE
			RETURN
		ENDIF
		
		DO CASE
			CASE THIS.Parent.nAppliesTo = 1	&& Current Control
				IF TYPE("oForm.ActiveControl.Fontsize") # "U"
					oForm.ActiveControl.FontSize = VAL(THIS.Value)
				ENDIF
		
			CASE THIS.Parent.nAppliesTo = 2	&& All textboxes and editboxes
				oForm.SetAll('FontSize', VAL(THIS.Value), 'TEXTBOX')		
				oForm.SetAll('FontSize', VAL(THIS.Value), 'EDITBOX')		
			
			CASE THIS.Parent.nAppliesTo = 3	&& All Controls
				oForm.SetAll('FontSize', VAL(THIS.Value))
		
		ENDCASE
		
	ENDPROC

	PROCEDURE chkBold.InteractiveChange
		LOCAL oForm
		
		IF TYPE("_SCREEN.ActiveForm") = 'O'
			oForm = _SCREEN.ActiveForm
		ELSE
			RETURN
		ENDIF
		
		DO CASE
			CASE THIS.Parent.nAppliesTo = 1	&& Current Control
				IF TYPE("oForm.ActiveControl.FontBold")#"U"
					oForm.ActiveControl.FontBold = THIS.Value
				ENDIF
				
			CASE THIS.Parent.nAppliesTo = 2	&& All textboxes and editboxes
				oForm.SetAll('FontBold', THIS.Value, 'TEXTBOX')		
				oForm.SetAll('FontBold', THIS.Value, 'EDITBOX')		
			
			CASE THIS.Parent.nAppliesTo = 3	&& All Controls
				oForm.SetAll('FontBold', THIS.Value)
		ENDCASE
		
	ENDPROC

	PROCEDURE chkItalic.InteractiveChange
		LOCAL oForm
		
		IF TYPE("_SCREEN.ActiveForm") = 'O'
			oForm = _SCREEN.ActiveForm
		ELSE
			RETURN
		ENDIF
		
		DO CASE
			CASE THIS.Parent.nAppliesTo = 1	&& Current Control
				IF TYPE("oForm.ActiveControl.FontItalic")#"U"
					oForm.ActiveControl.FontItalic = THIS.Value
				ENDIF	
			CASE THIS.Parent.nAppliesTo = 2	&& All textboxes and editboxes
				oForm.SetAll('FontItalic', THIS.Value, 'TEXTBOX')		
				oForm.SetAll('FontItalic', THIS.Value, 'EDITBOX')		
			
			CASE THIS.Parent.nAppliesTo = 3	&& All Controls
				oForm.SetAll('FontItalic', THIS.Value)
		
		ENDCASE
		
	ENDPROC

	PROCEDURE chkUnderline.InteractiveChange
		LOCAL oForm
		
		IF TYPE("_SCREEN.ActiveForm") = 'O'
			oForm = _SCREEN.ActiveForm
		ELSE
			RETURN
		ENDIF
		
		DO CASE
			CASE THIS.Parent.nAppliesTo = 1	&& Current Control
				IF TYPE("oForm.ActiveControl.FontUnderline") #"U"
					oForm.ActiveControl.FontUnderline = THIS.Value
				ENDIF
			CASE THIS.Parent.nAppliesTo = 2	&& All textboxes and editboxes
				oForm.SetAll('FontUnderline', THIS.Value, 'TEXTBOX')		
				oForm.SetAll('FontUnderline', THIS.Value, 'EDITBOX')		
			
			CASE THIS.Parent.nAppliesTo = 3	&& All Controls
				oForm.SetAll('FontUnderline', THIS.Value)
		ENDCASE
		
	ENDPROC

ENDDEFINE
