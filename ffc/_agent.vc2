*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_agent.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _agent AS _custom OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_agent.h"
	*<DefinedPropArrayMethod>
		*m: gestureat		&& Causes the active agent to gesture at a given point
		*m: hide		&& Hides the active agent.
		*m: interrupt		&& Interrupts an animation
		*m: load		&& Loads an agent character from the specified location (can be file or URL)
		*m: localtoworld		&& Converts local coordinates to world coordinates
		*m: moveby		&& Moves the active agent by the passed values in the x or y direction
		*m: moveto		&& Moves the default agent or agent passed to the location specificed
		*m: play		&& Causes the active agent to play an animation
		*m: setactiveagent		&& Sets the active agent to the agent with the passed name
		*m: show		&& Shows the active agent
		*m: speak		&& Causes the active agent to speak the passed phrase
		*m: stop		&& Stops a looping animation
		*m: wait		&& Waits for a request to complete
		*p: activeagent		&& Name of the active Agent
		*p: agentcontrol		&& Pointer to the agent object
		*p: erroroccurred		&& Whether an error has occurred
		*p: errorstate		&& Determines the state of the control during an error
	*</DefinedPropArrayMethod>

	errorstate = LOAD		&& Determines the state of the control during an error
	Height = 42
	Name = "_agent"
	Width = 42
	
	PROCEDURE Error
		LParameters nError, cMethod, nLine
		
		Do Case
		Case this.errorState == "LOAD"
			this.errorOccurred = .T.
			RETURN
		EndCase
		
		DoDefault(nError, cMethod, nLine)
	ENDPROC

	PROCEDURE gestureat		&& Causes the active agent to gesture at a given point
		LParameters tnX, tnY, tnCoords, toObj
		
		If Type("tnCoords") <> "N"
			tnCoords = COORDS_WORLD
		Endif
		
		If tnCoords = COORDS_LOCAL
			tnX = this.localToWorld(AXIS_X, tnX, toObj)
			tnY = this.localToWorld(AXIS_Y, tnY, toObj)
		Endif
		
		If Type("this.activeAgent") = "O"
			this.activeAgent.gestureAt(tnX, tnY)
		Else
			Return .F.
		Endif
	ENDPROC

	PROCEDURE hide		&& Hides the active agent.
		If Type("this.activeAgent") = "O"
			this.activeAgent.hide()
		Else
			Return .F.
		Endif
		
		
	ENDPROC

	PROCEDURE Init
		*-- Create the Agent control
		this.agentControl = CreateObject("Agent.Control.2")
		this.agentControl.connected = .T.
		
		RETURN DoDefault()
	ENDPROC

	PROCEDURE interrupt		&& Interrupts an animation
		LParameters toRequest
		
		If Type("this.activeAgent") = "O"
			this.activeAgent.interrupt(toRequest)
		Else
			Return .F.
		Endif
		
		
	ENDPROC

	PROCEDURE load		&& Loads an agent character from the specified location (can be file or URL)
		LParameters tcAgentName, tcAgentLocation
		
		*-- Make sure it inited ok
		If Type("this.agentControl") = "O"
			*-- Only load a character once
			If Type('this.agentControl.characters("' + tcAgentName + '")' ) <> "O" And ;
				!Empty(tcAgentLocation)
				
		  		this.errorState = "LOAD"
				this.agentControl.characters.load(tcAgentName, tcAgentLocation)
				If !this.errorOccurred
					this.agentControl.characters(tcAgentName).get("state", "Showing, Speaking")
		  		Else
		  			this.errorOccurred = .F.
		  			Return .F.
		  		Endif
			Endif
		Endif
		
		
	ENDPROC

	PROCEDURE localtoworld		&& Converts local coordinates to world coordinates
		LParameters tnAxis, tnPos, toObj
		
		LOCAL lcAxis, loObj
		
		*-- Select the Axis we are converting
		lcAxis = Iif(tnAxis = 0, "Left", "Top")
		
		*-- Calculate offset of all parent containers
		loObj = toObj
		
		Do While Type("loObj.Class") = "C"
		
			*-- Pages in PageFrames don't have Left or Top
			If Type("loObj." + lcAxis) = "N"
				tnPos = tnPos + loObj.&lcAxis
			Endif
		
			*-- If loObj is a form, we should determine if it's a top level
			*-- form. If so, we've already calculated the world offset. If not
			*-- we need the screen offset.
			If Type("loObj.Class") = "C" And Upper(loObj.Class) = "FORM"
				If loObj.ShowWindow <> 2 && Top-Level Form
					tnPos = tnPos + _Screen.&lcAxis.
				EndIf
			Endif
		
			If Type("loObj.Tabs") = "L" And tnAxis = 1
				If loObj.Tabs
					tnPos = tnPos + 28 && This may be a sysmetric call
				Else
					tnPos = tnPos + loObj.BorderWidth * 2
				Endif
			Endif
			
			If Type("loObj.Parent") <> "U"
			  	loObj = loObj.Parent
		  	Else
		  		loObj = .F.
		  	Endif
		EndDo
		
		Return tnPos
	ENDPROC

	PROCEDURE moveby		&& Moves the active agent by the passed values in the x or y direction
		LParameters tnX, tnY, tnCoords, toObj
		
		If Type("tnCoords") <> "N"
			tnCoords = COORDS_WORLD
		Endif
		
		*-- Don't need to convert because we're only moving the relative position 
		*!*	If tnCoords = COORDS_LOCAL
		*!*		tnX = this.localToWorld(AXIS_X, tnX, toObj)
		*!*		tnY = this.localToWorld(AXIS_Y, tnY, toObj)
		*!*	Endif
		
		If Type("this.activeAgent") = "O"
			this.moveTo( this.activeAgent.left + tnX, this.activeAgent.top + tnY )
		Else
			Return .F.
		Endif
		
	ENDPROC

	PROCEDURE moveto		&& Moves the default agent or agent passed to the location specificed
		LParameters tnX, tnY, tnCoords, toObj
		
		If Type("tnCoords") <> "N"
			tnCoords = COORDS_WORLD
		Endif
		
		If tnCoords = COORDS_LOCAL
			tnX = this.localToWorld(AXIS_X, tnX, toObj)
			tnY = this.localToWorld(AXIS_Y, tnY, toObj)
		Endif
		
		If Type("this.activeAgent") = "O"
			this.activeAgent.moveTo(tnX, tnY)
		Else
			Return .F.
		Endif
	ENDPROC

	PROCEDURE play		&& Causes the active agent to play an animation
		LParameters tcAnimation
		
		Local llRetVal
		
		If Type("this.activeAgent") = "O"
			this.activeAgent.get("state", tcAnimation)
			llRetVal = this.activeAgent.play(tcAnimation)
		Else
			llRetVal = .F.
		Endif
		
		Return llRetVal
	ENDPROC

	PROCEDURE setactiveagent		&& Sets the active agent to the agent with the passed name
		LParameters tcAgentName
		
		Local llRetVal
		
		*-- Make sure it inited ok
		If Type("this.agentControl") = "O"
			*-- Test to make sure this is a valid character
			If Type('this.agentControl.characters("' + tcAgentName + '")' ) = "O"
				this.activeAgent = this.agentControl.characters(tcAgentName)
				this.activeAgent.Activate()
				llRetVal = .T.
			EndIf
		Endif
		
		Return llRetVal
	ENDPROC

	PROCEDURE show		&& Shows the active agent
		LParameters tnX, tnY, tnCoords, toObj
		
		If Type("tnCoords") <> "N"
			tnCoords = COORDS_WORLD
		Endif
		
		If tnCoords = COORDS_LOCAL
			tnX = this.localToWorld(AXIS_X, tnX, toObj)
			tnY = this.localToWorld(AXIS_Y, tnY, toObj)
		Endif
		
		If Type("tnCoords") <> "N"
			tnCoords = this.defaultCoords
		Endif
		
		If Type("this.activeAgent") = "O"
			If Vartype(tnX) <> "N"
				tnX = this.activeAgent.Left
			Endif
		
			If Vartype(tnY) <> "N"
				tnY = this.activeAgent.Top
			Endif
		
			this.activeAgent.moveTo(tnX, tnY)
			this.activeAgent.show()
		Else
			Return .F.
		Endif
		
		
	ENDPROC

	PROCEDURE speak		&& Causes the active agent to speak the passed phrase
		LParameters tcText
		
		Local llRetVal
		
		If Type("this.activeAgent") = "O"
			llRetVal = this.activeAgent.Speak(tcText)
		Else
			llRetVal = .F.
		Endif
		
		Return llRetVal
	ENDPROC

	PROCEDURE stop		&& Stops a looping animation
		If Type("this.activeAgent") = "O"
			this.activeAgent.stop()
		Else
			Return .f.
		Endif
	ENDPROC

	PROCEDURE wait		&& Waits for a request to complete
		LParameters toRequest
		
		Local llRetVal
		
		If Type("this.activeAgent") = "O"
			llRetVal = this.activeAgent.wait(toRequest)
		Else
			llRetVal = .F.
		Endif
		
		Return llRetVal
	ENDPROC

ENDDEFINE
