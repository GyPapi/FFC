*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="_html.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS _evaltext AS _custom OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: evaltext
		*m: strtranc
		*p: ctext
	*</DefinedPropArrayMethod>

	ctext = 
	Name = "_evaltext"
	
	PROCEDURE evaltext
		LPARAMETERS tcText
		LOCAL lcText,lcNewText,lcEvalStr,lnAtPos,lnAtPos2,lnAtPos3,lnAtPos4
		LOCAL lnCount,lnCount2,llEvlMode,lcOldStr,lcNewStr
		
		IF INLIST(VARTYPE(m.tcText),"X","O") OR EMPTY(m.tcText)
			RETURN ""
		ENDIF
		m.lcText=TRANSFORM(m.tcText)
		m.lcNewText=m.lcText
		m.lnAtPos3=1
		DO WHILE .T.
			m.lnAtPos=AT("{{",SUBSTR(m.lcText,m.lnAtPos3))
			IF m.lnAtPos=0
				EXIT
			ENDIF
			m.lnAtPos2=AT("}}",SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3-1))
			IF m.lnAtPos2=0
				EXIT
			ENDIF
			m.lnAtPos4=AT("{{",SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3+1))
			IF m.lnAtPos4>0 AND m.lnAtPos4<m.lnAtPos2
				m.lnAtPos4=OCCURS("{{",SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3-1,;
						m.lnAtPos2-m.lnAtPos4))
				m.lnAtPos4=AT("{{",SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3-1),m.lnAtPos4)
				m.lcOldStr=SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3-1,m.lnAtPos2+1)
				m.lcEvalStr=SUBSTR(m.lcOldStr,3,LEN(m.lcOldStr)-2)
				m.lcOldStr=this.EvalText(m.lcEvalStr)
				m.lcText=STRTRAN(m.lcText,m.lcEvalStr,m.lcOldStr)
				m.lcNewText=STRTRAN(m.lcNewText,m.lcEvalStr,m.lcOldStr)
				LOOP
			ENDIF
			m.lcOldStr=SUBSTR(m.lcText,m.lnAtPos+m.lnAtPos3-1,m.lnAtPos2+1)
			m.lcEvalStr=ALLTRIM(SUBSTR(m.lcOldStr,3,LEN(m.lcOldStr)-4))
			m.llEvlMode=.F.
			DO CASE
				CASE EMPTY(m.lcEvalStr)
					m.lcEvalStr=""
				CASE LEFT(m.lcEvalStr,2)=="&."
					m.lcEvalStr=SUBSTR(m.lcEvalStr,3)
					&lcEvalStr &&;
					Error occurred during macro substitution of {{&. <expC> }}.
					m.lcEvalStr=""
				CASE LEFT(m.lcEvalStr,1)=="*"
					RETURN ""
				CASE LEFT(m.lcEvalStr,1)=="<"
					m.lcEvalStr=FILETOSTR(SUBSTR(m.lcEvalStr,2)) &&;
					Error occurred during evaluation of {{< <file> }}.
				OTHERWISE
					m.lcEvalStr=EVALUATE(m.lcEvalStr) &&;
					Error occurred during evaluation of {{ <expC> }}.
			ENDCASE
			m.lcNewStr=IIF(VARTYPE(m.lcEvalStr)=="O","",TRANSFORM(m.lcEvalStr))
			m.lcNewText=STRTRAN(m.lcNewText,m.lcOldStr,m.lcNewStr)
			m.lnAtPos2=m.lnAtPos+LEN(m.lcNewStr)
			IF m.lnAtPos2<=0
				EXIT
			ENDIF
			m.lnAtPos3=m.lnAtPos3+m.lnAtPos2
		ENDDO
		lnCount2=0
		DO WHILE "{{"$m.lcNewText AND "}}"$m.lcNewText
			lnCount=LEN(m.lcNewText)
			m.lcNewText=this.EvalText(m.lcNewText)
			IF lnCount=LEN(m.lcNewText)
				IF lnCount2>=2
					EXIT
				ENDIF
				lnCount2=lnCount2+1
			ENDIF
		ENDDO
		RETURN m.lcNewText
		
	ENDPROC

	PROCEDURE strtranc
		LPARAMETERS ExpC1,ExpC2,ExpC3,ExpN1,ExpN2
		LOCAL lcExpr,lnAtPos,lnAtPos2,lnCount,lnCount2
		
		IF EMPTY(m.ExpC1) OR EMPTY(m.ExpC2)
			RETURN m.ExpC1
		ENDIF
		lcExpr=m.ExpC1
		IF TYPE("m.ExpN1")#"N"
			m.ExpN1=1
		ENDIF
		IF TYPE("m.ExpN2")#"N"
			m.ExpN2=LEN(m.ExpC1)
		ENDIF
		IF m.ExpN1<1 OR m.ExpN2<1
			RETURN m.ExpC1
		ENDIF
		m.lnCount=0
		m.lnCount2=0
		m.lnAtPos2=1
		DO WHILE .T.
			m.lnAtPos=ATC(m.ExpC2,SUBSTR(lcExpr,m.lnAtPos2))
			IF m.lnAtPos=0
				EXIT
			ENDIF
			m.lnCount=m.lnCount+1
			IF m.lnCount<m.ExpN1
				m.lnAtPos2=m.lnAtPos+m.lnAtPos2+LEN(m.ExpC2)-1
				LOOP
			ENDIF
			lcExpr=LEFT(lcExpr,m.lnAtPos+m.lnAtPos2-2)+m.ExpC3+;
			       SUBSTR(lcExpr,m.lnAtPos+m.lnAtPos2+LEN(m.ExpC2)-1)
			m.lnCount2=m.lnCount2+1
			IF m.lnCount2>=m.ExpN2
				EXIT
			ENDIF
			m.lnAtPos2=m.lnAtPos+m.lnAtPos2+LEN(m.ExpC3)-1
			IF m.lnAtPos2>LEN(lcExpr)
				EXIT
			ENDIF
		ENDDO
		RETURN lcExpr
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmlcreatetable AS _custom OF "_base.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: createtable
		*p: ctableversion
	*</DefinedPropArrayMethod>

	ctableversion = ("1.4")
	Name = "_htmlcreatetable"
	
	PROCEDURE createtable
		LPARAMETERS tcFileName
		LOCAL lcFileName,lcCreateFileName,lcClass,lnLastSelect,lcPlatform,lcFileExt
		
		IF VARTYPE(tcFileName)#"C" OR EMPTY(tcFileName)
			RETURN .F.
		ENDIF
		lcFileName=ALLTRIM(tcFileName)
		lcClass=LOWER(this.Class)
		lnLastSelect=SELECT()
		SELECT 0
		USE (this.ClassLibrary) AGAIN SHARED
		SET FILTER TO NOT DELETED() AND LOWER(ObjName)==lcClass
		LOCATE
		IF EOF()
			USE
			SELECT (lnLastSelect)
			RETURN .F.
		ENDIF
		SET NOCPTRANS TO user
		SCAN ALL FOR NOT EMPTY(User)
			lcPlatform=UPPER(ALLTRIM(Platform))
			DO CASE
				CASE lcPlatform=="WINDOWS"
					lcFileExt="dbf"
				CASE lcPlatform=="COMMENT"
					lcFileExt="fpt"
				OTHERWISE
					LOOP
			ENDCASE
			lcCreateFileName=FORCEEXT(lcFileName,lcFileExt)
			STRTOFILE(User,lcCreateFileName)
		ENDSCAN
		SET NOCPTRANS TO
		USE
		SELECT (lnLastSelect)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmldocument AS _htmltag OF "_html.vcx" 		&& HTML document class.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: generate
		*p: lbodytag
		*p: lheadtag
		*p: lmessagebar
		*p: ogentag
	*</DefinedPropArrayMethod>

	cnorefreshielinktaglist = html,head,body,style
	lbodytag = .T.
	lheadtag = .T.
	Name = "_htmldocument"
	ogentag = .NULL.
	tagname = HTML
	
	PROCEDURE generate
		IF this.lRelease
			RETURN .F.
		ENDIF
		IF VARTYPE(this.oGenTag)=="O"
			this.oGenTag.Clear
		ENDIF
		
	ENDPROC

	PROCEDURE setitems
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		IF this.lHeadTag
			this.Head=this.AddTag("HEAD")
			this.Head.Title=this.Head.AddTag("TITLE")
		ENDIF
		IF this.lBodyTag
			this.Body=this.AddTag("BODY")
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmllabel AS _htmlreport OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	cdesignerwindow = Label Designer
	creportfileext = lbx
	creportfileext2 = lbt
	Name = "_htmllabel"
	
	PROCEDURE runreport
		*!*	LOCAL lcScope
		
		*!*	lcScope=this.cScope
		*!*	LABEL FORM (this.cReportFile) &lcScope NOCONSOLE TO FILE (this.cOutFile) ASCII
		LOCAL lcScope, llQuietMode, ox
		
		IF FILE(_REPORTOUTPUT)
		   ox = null
		   DO (_reportoutput) WITH  LISTENER_TYPE_HTML , ox, OUTPUTAPP_LOADTYPE_RELOAD
		   IF ISNULL(ox)
		      RETURN .F.
		   ELSE
		      llQuietMode = ox.QuietMode
		      ox.QuietMode = .T.
		      ox.targetfilename = FORCEEXT(this.coutfile, this.cfileext)
		      lcScope=this.cScope
		      LABEL FORM (this.cReportFile) &lcScope  OBJECT ox
		      ox.QuietMode = llQuietMode
		   ENDIF
		ELSE
		   RETURN .F.
		ENDIF   
				 
				   
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmlmenu AS _htmldocument OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: generatemenu
	*</DefinedPropArrayMethod>

	Name = "_htmlmenu"
	
	PROCEDURE generate
		LOCAL lcSourceFile,llSuccessful,lnLastSelect,lcAlias
		
		IF NOT DODEFAULT() OR EMPTY(this.cSourceFile)
			RETURN .F.
		ENDIF
		lcSourceFile=ALLTRIM(this.cSourceFile)
		IF NOT FILE(lcSourceFile)
			this.MsgBox(M_FILE_LOC+[ "]+lcSourceFile+[" ]+M_NOT_FOUND_LOC+[.])
			RETURN .F.
		ENDIF
		lnLastSelect=SELECT()
		SELECT 0
		lcAlias=LOWER(SYS(2015))
		USE (this.cSourceFile) ALIAS (lcAlias)
		IF NOT USED(lcAlias)
			SELECT (lnLastSelect)
			IF this.lMessageBar
				SET MESSAGE TO
			ENDIF
			RETURN .F.
		ENDIF
		SET FILTER TO NOT DELETED()
		LOCATE
		llSuccessful=this.GenerateMenu()
		IF USED(lcAlias)
			USE IN (lcAlias)
		ENDIF
		SELECT (lnLastSelect)
		IF this.lMessageBar
			SET MESSAGE TO
		ENDIF
		RETURN llSuccessful
		
	ENDPROC

	PROCEDURE generatemenu
		IF this.lMessageBar
			SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+this.cSourceFile+") ..."
		ENDIF
		SCAN ALL FOR NOT EMPTY(Prompt)
			IF NOT INLIST(ObjCode,77,78) OR EMPTY(Prompt)
				LOOP
			ENDIF
			this.Body.AddItem(ALLTRIM(STRTRAN(Prompt,"\<","")))
			IF NOT EMPTY(Message)
				this.Body.AddTagItem("br")
				this.Body.AddItem(ALLTRIM(Message))
			ENDIF
			this.Body.AddTagItem("hr")
		ENDSCAN
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmlobject AS _htmldocument OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: generateobject
		*m: generatestyle
	*</DefinedPropArrayMethod>

	Name = "_htmlobject"
	
	PROCEDURE generate
		LOCAL llSuccessful
		
		IF NOT DODEFAULT() OR VARTYPE(this.oSource)#"O"
			RETURN .F.
		ENDIF
		llSuccessful=this.GenerateObject(this.oSource)
		IF this.lMessageBar
			SET MESSAGE TO
		ENDIF
		RETURN llSuccessful
		
	ENDPROC

	PROCEDURE generateobject
		LPARAMETERS toObject,toParent
		LOCAL oParent,oDivTag,oTag,oTag2,lcBaseClass,lcObjName,llParent,lnCount
		LOCAL llPixels,llPixelsChanged,lcMember,lvValue
		LOCAL laObjects[1],laMembers[1]
		
		IF VARTYPE(toObject)#"O" OR (EMPTY(this.cSourceFile) AND ;
				PEMSTATUS(toObject,"Visible",5) AND ;
				VARTYPE(toObject.Visible)=="L" AND NOT toObject.Visible)
			RETURN .F.
		ENDIF
		lcBaseClass=LOWER(toObject.BaseClass)
		lcObjName=toObject.Name
		IF VARTYPE(toParent)=="O"
			llPixels=.T.
			oParent=toParent
			lcObjName=oParent.ID+"_"+lcObjName
		ELSE
			llParent=.T.
			oParent=this.Body
		ENDIF
		llPixels=(NOT lcBaseClass=="form" OR toObject.ScaleMode=3)
		IF NOT llPixels
			toObject.ScaleMode=3
			llPixelsChanged=PEMSTATUS(toObject,"ScaleMode",0)
		ENDIF
		IF this.lMessageBar
			SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+lcObjName+") ..."
		ENDIF
		oDivTag=oParent.NewTag("div")
		oDivTag.ID="div_"+lcObjName
		oTag=.NULL.
		DO CASE
			CASE lcBaseClass=="checkbox"
				oTag=oDivTag.NewTagNoEnd("input")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				oTag.Type="checkbox"
				oTag.Checked=(NOT EMPTY(toObject.Value))
				oTag.AddItem(toObject.Caption)
				this.GenerateStyle(oTag,toObject)
			CASE lcBaseClass=="combobox" OR lcBaseClass=="listbox"
				oTag=oDivTag.NewTag("select")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				oTag.Size=IIF(lcBaseClass=="listbox",toObject.ListCount,1)
				this.GenerateStyle(oTag,toObject)
				FOR lnCount = 1 TO toObject.ListCount
					oTag2=oTag.AddTagNoEnd("option")
					oTag2.Value=lnCount
					oTag2.AddItem(toObject.List[lnCount])
					this.GenerateStyle(oTag2,toObject)
				ENDFOR
			CASE lcBaseClass=="commandbutton"
				oTag=oDivTag.NewTagNoEnd("input")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				IF EMPTY(toObject.Picture)
					oTag.Type="button"
				ELSE
					oTag.Type="image"
					oTag.Src=toObject.Picture
				ENDIF
				oTag.Value=toObject.Caption
				this.GenerateStyle(oTag,toObject)
			CASE lcBaseClass=="commandgroup"
				oTag=oDivTag.NewTag("div")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				this.GenerateStyle(oTag,toObject)
				FOR lnCount = 1 TO toObject.ButtonCount
					this.GenerateObject(toObject.Buttons[lnCount],oTag)
				ENDFOR
			CASE lcBaseClass=="editbox"
				oTag=oDivTag.NewTag("textarea")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				oTag.AddItem(toObject.Value)
				this.GenerateStyle(oTag,toObject)
			CASE INLIST(lcBaseClass+" ","form ","toolbar ")
				oTag=oDivTag.NewTag("form")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				this.GenerateStyle(oTag,toObject)
				this.Body.bgColor=this.HexColor(toObject.BackColor)
			CASE lcBaseClass=="label"
				oTag=oDivTag.NewTag("span")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				oTag.AddItem(toObject.Caption)
				this.GenerateStyle(oTag,toObject)
			CASE lcBaseClass=="olecontrol"
				oTag=oDivTag.NewTag("object")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				IF PEMSTATUS(toObject,"Height",5)
					oTag.Height=toObject.Height
					oTag.Width=toObject.Width
				ENDIF
				oTag.ClassID="CLSid:"+CHRTRAN(COMCLASSINFO(toObject,4),"{}","")
				IF TYPE("toObject.object")=="O"
					FOR lnCount = 1 TO AMEMBERS(laMembers,toObject.object)
						lcMember=LOWER(laMembers[lnCount])
						IF NOT PEMSTATUS(toObject.object,lcMember,0)
							LOOP
						ENDIF
						lvValue=toObject.object.&lcMember
						IF VARTYPE(lvValue)=="O"
							LOOP
						ENDIF
						IF VARTYPE(lvValue)=="L"
							lvValue=IIF(lvValue,"True","False")
						ENDIF
						oTag2=oTag.AddTagNoEnd("param")
						oTag2.Name=lcMember
						oTag2.Value=TRANSFORM(lvValue)
					ENDFOR
				ENDIF
			CASE lcBaseClass=="optiongroup"
				oTag=oDivTag.NewTag("div")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				this.GenerateStyle(oTag,toObject)
				FOR lnCount = 1 TO toObject.ButtonCount
					oTag2=oTag.AddTagNoEnd("input")
					oTag2.Type="radio"
					oTag2.Value=lnCount
					oTag2.Checked=(toObject.Value=lnCount)
					oTag2.ID=lcObjName
					oTag2.Name=lcObjName
					oTag2.AddItem(toObject.Buttons[lnCount].Caption)
					this.GenerateStyle(oTag2,toObject)
				ENDFOR
			CASE lcBaseClass=="textbox"
				oTag=oDivTag.NewTagNoEnd("input")
				oTag.ID=lcObjName
				oTag.Name=lcObjName
				oTag.Type=IIF(EMPTY(toObject.PasswordChar),"TEXT","PASSWORD")
				oTag.Value=toObject.Value
				IF NOT EMPTY(+toObject.MaxLength)
					oTag.MaxLength=toObject.MaxLength
				ENDIF
				this.GenerateStyle(oTag,toObject)
		ENDCASE
		IF ISNULL(oTag)
			oDivTag.Release
			oParent.AddComment(M_OBJECT_LOC+[ "]+lcObjName+[" (]+lcBaseClass+ ;
					[) ]+M_NOT_SUPPORTED_LOC+[.])
			RETURN .F.
		ENDIF
		IF NOT llParent
			this.GenerateStyle(oDivTag,toObject,.T.)
		ENDIF
		oParent.AddTag(oDivTag)
		oDivTag.AddItem(oTag)
		IF INLIST(lcBaseClass+" ","custom ","container ","formset ","form ","toolbar ")
			FOR lnCount = 1 TO AMEMBERS(laObjects,toObject,2)
				this.GenerateObject(toObject.&laObjects[lnCount],oTag)
			ENDFOR
		ENDIF
		IF NOT llPixels
			IF llPixelsChanged
				toObject.ScaleMode=0
			ELSE
				toObject.ResetToDefault("ScaleMode")
			ENDIF
		ENDIF
		
	ENDPROC

	PROCEDURE generatestyle
		LPARAMETERS toTag,toObject,tlContainer
		LOCAL oStyleTag,lcStyle
		
		oStyleTag=toTag.NewStyleTag()
		IF PEMSTATUS(toObject,"Left",5) AND tlContainer
			oStyleTag.position=IIF(tlContainer,"absolute","relative")+ ;
					"; left:"+TRANSFORM(toObject.Left)+"; "+ ;
					"Top:"+TRANSFORM(toObject.Top)
		ENDIF
		IF NOT tlContainer
			IF PEMSTATUS(toObject,"FontName",5)
				oStyleTag.font_family=toObject.FontName
			ENDIF
			IF PEMSTATUS(toObject,"FontSize",5)
				oStyleTag.font_size=TRANSFORM(toObject.FontSize)+"pt"
			ENDIF
			IF PEMSTATUS(toObject,"ForeColor",5)
				oStyleTag.color=this.HexColor(toObject.ForeColor)
			ENDIF
			IF PEMSTATUS(toObject,"FontBold",5) AND toObject.FontBold
				oStyleTag.Font_weight="bold"
			ENDIF
			IF PEMSTATUS(toObject,"FontItalic",5) AND toObject.FontItalic
				oStyleTag.font_style="italic"
			ENDIF
			IF PEMSTATUS(toObject,"FontUnderline",5) AND toObject.FontUnderline
				oStyleTag.text_decoration="underline"
			ENDIF
			IF PEMSTATUS(toObject,"BackColor",5)
				oStyleTag.background=this.HexColor(toObject.BackColor)
			ENDIF
		ENDIF
		lcStyle=oStyleTag.StyleText
		oStyleTag.Release
		IF EMPTY(lcStyle)
			RETURN .F.
		ENDIF
		toTag.Style=ALLTRIM(lcStyle)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmlreport AS _htmldocument OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: generatereport
		*m: runreport
		*p: cdesignerwindow
		*p: creportfile
		*p: creportfileext
		*p: creportfileext2
	*</DefinedPropArrayMethod>

	cdesignerwindow = Report Designer
	creportfile = 
	creportfileext = frx
	creportfileext2 = frt
	Name = "_htmlreport"
	
	PROCEDURE generate
		LOCAL lcSourceFile,llSuccessful,lnLastSelect,lcAlias
		
		IF NOT DODEFAULT() OR EMPTY(this.cSourceFile)
			RETURN .F.
		ENDIF
		lcSourceFile=ALLTRIM(this.cSourceFile)
		IF NOT FILE(lcSourceFile)
			this.MsgBox(M_FILE_LOC+[ "]+lcSourceFile+[" ]+M_NOT_FOUND_LOC+[.])
			RETURN .F.
		ENDIF
		this.cReportFile = lcSourceFile
		*!*	this.cReportFile=FORCEPATH(LOWER(SYS(2015))+"."+this.cReportFileExt, ;
		*!*			JUSTPATH(lcSourceFile))
		lnLastSelect=SELECT()
		*!*	lcAlias=LOWER(SYS(2015))
		*!*	SELECT 0
		*!*	USE (lcSourceFile) AGAIN SHARED ALIAS (lcAlias)
		*!*	IF NOT USED(lcAlias)
		*!*		SELECT (lnLastSelect)
		*!*		RETURN .F.
		*!*	ENDIF
		IF this.lMessageBar
			SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+lcSourceFile+") ..."
		ENDIF
		*!*	COPY TO (this.cReportFile) FOR NOT DELETED()
		*!*	IF USED(lcAlias)
		*!*		USE IN (lcAlias)
		*!*	ENDIF
		*!*	IF NOT FILE(this.cReportFile)
		*!*		SELECT (lnLastSelect)
		*!*		IF this.lMessageBar
		*!*			SET MESSAGE TO
		*!*		ENDIF
		*!*		RETURN .F.
		*!*	ENDIF
		*!*	SELECT (this.nWorkArea)
		llSuccessful=this.GenerateReport()
		SELECT (lnLastSelect)
		IF this.lMessageBar
			SET MESSAGE TO
		ENDIF
		RETURN llSuccessful
		
	ENDPROC

	PROCEDURE generatereport
		LOCAL lcDesignerWindow,llDesignerWindow
		
		lcDesignerWindow=this.cDesignerWindow+" - "+LOWER(JUSTFNAME(this.cSourceFile))
		llDesignerWindow=WEXIST(lcDesignerWindow)
		IF llDesignerWindow
			RELEASE WINDOW (llDesignerWindow)
		ENDIF
		this.RunReport
		*!*	IF FILE(this.cOutFile)
		*!*		this.Body.bgcolor="white"
		*!*		this.oGenTag=this.Body.AddTag("font")
		*!*		this.oGenTag.Face="Courier New"
		*!*		this.oGenTag.PreTag=this.oGenTag.AddTag("pre")
		*!*		this.oGenTag.PreTag.AddText(FILETOSTR(this.cOutFile))
		*!*	ENDIF
		*!*	ERASE (this.cReportFile)
		*!*	ERASE (FORCEEXT(this.cReportFile,this.cReportFileExt2))
		IF llDesignerWindow
			MODIFY REPORT (this.cSourceFile) NOWAIT
		ENDIF
		
	ENDPROC

	PROCEDURE runreport
		*!*	LOCAL lcScope
		
		*!*	lcScope=this.cScope
		*!*	REPORT FORM (this.cReportFile) &lcScope NOCONSOLE TO FILE (this.cOutFile) ASCII
		LOCAL lcScope, llQuietMode, ox
		
		IF FILE(_REPORTOUTPUT)
		   ox = null
		   DO (_reportoutput) WITH  LISTENER_TYPE_HTML , ox, OUTPUTAPP_LOADTYPE_RELOAD
		   IF ISNULL(ox)
		      RETURN .F.
		   ELSE
		      llQuietMode = ox.QuietMode
		      ox.QuietMode = .T.
		      ox.targetfilename = FORCEEXT(this.coutfile, this.cfileext)
		      lcScope=this.cScope
		      REPORT FORM (this.cReportFile) &lcScope  OBJECT ox
		      ox.QuietMode = llQuietMode
		   ENDIF
		ELSE
		   RETURN .F.
		ENDIF   
				 
				   
		
	ENDPROC

	PROCEDURE savefile
		LPARAMETERS tcOutFile
		* do nothing (NODEFAULT, override)
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmlsaveasdialog AS _form OF "_base.vcx" 		&& Save As HTML dialog.
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="txtOutFile" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="opgShow" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOK" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOutFile" UniqueID="" Timestamp="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: setfont
		*p: llargefont
		*p: osaveashtml
	*</DefinedPropArrayMethod>

	AlwaysOnTop = .T.
	AutoCenter = .T.
	BorderStyle = 2
	Caption = "Save As HTML"
	DataSession = 2
	DoCreate = .T.
	FontName = "MS Sans Serif"
	FontSize = 8
	Height = 120
	HelpContextID = 229996601
	KeyPreview = .T.
	MaxButton = .F.
	MinButton = .F.
	Name = "_htmlsaveasdialog"
	osaveashtml = .NULL.
	ShowTips = .T.
	Width = 358
	WindowType = 1

	ADD OBJECT 'cmdCancel' AS commandbutton WITH ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 276, ;
		Name = "cmdCancel", ;
		TabIndex = 2, ;
		Top = 41, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOK' AS commandbutton WITH ;
		Caption = "OK", ;
		Default = .T., ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 276, ;
		Name = "cmdOK", ;
		TabIndex = 1, ;
		Top = 12, ;
		Width = 75
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdOutFile' AS commandbutton WITH ;
		Caption = "...", ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 327, ;
		Name = "cmdOutFile", ;
		TabIndex = 4, ;
		Top = 85, ;
		Width = 24
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'opgShow' AS optiongroup WITH ;
		AutoSize = .T., ;
		ButtonCount = 3, ;
		Height = 63, ;
		Left = 8, ;
		Name = "opgShow", ;
		TabIndex = 5, ;
		Top = 12, ;
		Value = 1, ;
		Width = 189, ;
		Option1.AutoSize = .T., ;
		Option1.Caption = "\<Save file for later use", ;
		Option1.FontName = "MS Sans Serif", ;
		Option1.FontSize = 8, ;
		Option1.Height = 15, ;
		Option1.Left = 5, ;
		Option1.Name = "optSave", ;
		Option1.Top = 5, ;
		Option1.Value = 1, ;
		Option1.Width = 117, ;
		Option2.AutoSize = .T., ;
		Option2.Caption = "Save and \<edit file", ;
		Option2.FontName = "MS Sans Serif", ;
		Option2.FontSize = 8, ;
		Option2.Height = 15, ;
		Option2.Left = 5, ;
		Option2.Name = "optEdit", ;
		Option2.Top = 24, ;
		Option2.Width = 100, ;
		Option3.AutoSize = .T., ;
		Option3.Caption = "Save file and \<view in web browser", ;
		Option3.FontName = "MS Sans Serif", ;
		Option3.FontSize = 8, ;
		Option3.Height = 15, ;
		Option3.Left = 5, ;
		Option3.Name = "optView", ;
		Option3.Top = 43, ;
		Option3.Width = 179
		*< END OBJECT: BaseClass="optiongroup" />

	ADD OBJECT 'txtOutFile' AS textbox WITH ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Format = "K", ;
		Height = 24, ;
		Left = 8, ;
		Name = "txtOutFile", ;
		ReadOnly = .T., ;
		TabIndex = 3, ;
		TabStop = .F., ;
		Top = 85, ;
		Width = 315
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE Activate
		ACTIVATE SCREEN
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Deactivate
		ACTIVATE SCREEN
		SET MESSAGE TO
		
	ENDPROC

	PROCEDURE Init
		SET TALK OFF
		SET COMPATIBLE OFF
		SET CONFIRM ON
		SET EXACT OFF
		SET EXCLUSIVE OFF
		SET MEMOWIDTH TO 1024
		SET MULTILOCKS ON
		SET SAFETY OFF
		WAIT CLEAR
		this.SetFont
		
	ENDPROC

	PROCEDURE KeyPress
		LPARAMETERS nKeyCode, nShiftAltCtrl
		
		IF nKeyCode=27
			this.Release
		ENDIF
		
	ENDPROC

	PROCEDURE Load
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		SET SAFETY ON
		
	ENDPROC

	PROCEDURE QueryUnload
		this.Enabled=.F.
		this.Visible=.F.
		
	ENDPROC

	PROCEDURE Release
		this.QueryUnload
		
	ENDPROC

	PROCEDURE setfont
		IF FONTMETRIC(1,"MS Sans Serif",8,"")#13 OR ;
				FONTMETRIC(4,"MS Sans Serif",8,"")#2 OR ;
				FONTMETRIC(6,"MS Sans Serif",8,"")#5 OR ;
				FONTMETRIC(7,"MS Sans Serif",8,"")#11
			this.lLargeFont=.T.
			this.SetAll("FontName","Arial")
			RETURN
		ENDIF
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		thisform.oSaveAsHTML.cOutFile=""
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdOK.Click
		thisform.oSaveAsHTML.cOutFile=ALLTRIM(thisform.txtOutFile.Value)
		thisform.oSaveAsHTML.nShow=thisform.opgShow.Value-1
		thisform.Release
		
	ENDPROC

	PROCEDURE cmdOK.Refresh
		this.Enabled=(NOT EMPTY(thisform.txtOutFile.Value))
		
	ENDPROC

	PROCEDURE cmdOutFile.Click
		LOCAL lcFileName
		
		lcFileName=LOWER(GETFILE("htm;html;asp",M_SAVE_LOC,M_SAVE_LOC,0,M_SAVE_AS_LOC))
		IF EMPTY(lcFileName)
			RETURN
		ENDIF
		thisform.txtOutFile.Value=lcFileName
		
	ENDPROC

	PROCEDURE txtOutFile.InteractiveChange
		thisform.cmdOK.Refresh
		
		
	ENDPROC

	PROCEDURE txtOutFile.ProgrammaticChange
		this.InteractiveChange
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmltable AS _htmldocument OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: generatedetailtable
		*m: generatelisttable
		*m: generatetable
		*m: getfieldvalue
		*m: postgeneratetable
		*m: pregeneratetable
		*m: refreshfieldlist
		*p: cpostgeneratetablescript
		*p: cpregeneratetablescript
		*p: csourcetable
		*p: ctdattributes
		*p: cthattributes
		*p: ctrattributes
		*p: lopentable
		*p: nfieldcount
		*p: ntablestyle
		*a: afieldlist[1,0]
	*</DefinedPropArrayMethod>

	cpostgeneratetablescript = 
	cpregeneratetablescript = 
	cscope = ALL
	csourcetable = ""
	ctdattributes = 
	cthattributes = 
	ctrattributes = 
	Name = "_htmltable"
	nfieldcount = 0
	ntablestyle = 0
	
	PROCEDURE generate
		LOCAL lcSourceFile,llSuccessful,lnLastSelect,llView,lcAlias,lnLastRecNo,lnRecNo
		
		IF NOT DODEFAULT() OR EMPTY(this.cSourceFile)
			RETURN .F.
		ENDIF
		lcSourceFile=ALLTRIM(this.cSourceFile)
		lnLastSelect=SELECT()
		lnLastRecNo=IIF(USED() AND NOT EOF(),RECNO(),0)
		llView=("!"$lcSourceFile)
		this.lOpenTable=(llView OR NOT EMPTY(JUSTEXT(lcSourceFile)))
		IF this.lOpenTable
			IF NOT llView AND NOT FILE(lcSourceFile)
				this.MsgBox(M_FILE_LOC+[ "]+lcSourceFile+[" ]+M_NOT_FOUND_LOC+[.])
				RETURN .F.
			ENDIF
			this.cSourceTable=lcSourceFile
			lcAlias=LOWER(SYS(2015))
			SELECT 0
			USE (lcSourceFile) AGAIN SHARED ALIAS (lcAlias)
			IF NOT USED(lcAlias)
				SELECT (lnLastSelect)
				IF USED() AND lnLastRecNo>0
					GO lnLastRecNo
				ENDIF
				RETURN .F.
			ENDIF
			SET FILTER TO NOT DELETED()
			lnRecNo=0
		ELSE
			lcAlias=lcSourceFile
			IF NOT USED(lcAlias)
				this.MsgBox(M_ALIAS_LOC+[ "]+lcAlias+[" ]+M_NOT_FOUND_LOC+[.])
				RETURN .F.
			ENDIF
			this.cSourceTable=LOWER(DBF(lcAlias))
			SELECT (lcAlias)
			lnRecNo=IIF(EOF() OR RECNO()>RECCOUNT(),0,RECNO())
		ENDIF
		this.RefreshFieldList
		IF this.nFieldCount=0
			llSuccessful=.F.
		ELSE
			IF this.lMessageBar
				SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+this.cSourceTable+") ..."
			ENDIF
			this.PreGenerateTable
			llSuccessful=this.GenerateTable()
			IF llSuccessful
				this.PostGenerateTable
				this.GenScript
			ENDIF
		ENDIF
		IF USED(lcAlias)
			IF this.lOpenTable
				USE IN (lcAlias)
			ELSE
				IF USED() AND lnRecNo>0
					GO lnRecNo
				ENDIF
			ENDIF
		ENDIF
		SELECT (lnLastSelect)
		IF USED() AND lnLastRecNo>0
			GO lnLastRecNo
		ENDIF
		IF this.lMessageBar
			SET MESSAGE TO
		ENDIF
		RETURN llSuccessful
		
	ENDPROC

	PROCEDURE generatedetailtable
		LOCAL lcHTML,lcScope,lnCount
		LOCAL lcField,lcFieldValue,lnRecCount,lnRecIndex
		LOCAL lcTRTag,lcTDTag,lcCaption
		
		lcTRTag="<tr"+IIF(EMPTY(this.cTRAttributes),">"," "+this.cTRAttributes+">")
		lcTDTag="<td"+IIF(EMPTY(this.cTDAttributes),">"," "+this.cTDAttributes+">")
		this.oGenTag=this.Body.AddTag("table")
		this.oGenTag.Border=0
		lcHTML=""
		lnRecCount=RECCOUNT()
		lnRecIndex=0
		lcScope=this.cScope
		SCAN &lcScope
			lnRecIndex=lnRecIndex+1
			IF MOD(lnRecIndex,10)=0
				IF this.lMessageBar
					SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+this.cSourceTable+") "+ ;
							ALLTRIM(STR(100*lnRecIndex/lnRecCount))+"% ..."
				ENDIF
			ENDIF
			FOR lnCount = 1 TO this.nFieldCount
				lcField=this.aFieldList[lnCount,1]
				lcCaption=this.aFieldList[lnCount,5]
				lcFieldValue=this.GetFieldValue(lcField,this.aFieldList[lnCount,2], ;
						this.aFieldList[lnCount,3],this.aFieldList[lnCount,4])
				IF ISNULL(lcFieldValue)
					LOOP
				ENDIF
				lcFieldValue=STRTRAN(STRTRAN(STRTRAN(this.ValidText(this.TranslateItem(lcFieldValue)), ;
						CR_LF,CR),LF,CR),CR,"<br>")
				IF EMPTY(lcFieldValue)
					lcFieldValue=this.ValidText(" ")
				ENDIF
				lcHTML=lcHTML+this.EvalText(lcTRTag)+CR_LF+ ;
						this.EvalText(lcTDTag)+ ;
						this.ValidText(this.TranslateItem(lcCaption)+": ")+ ;
						lcFieldValue+"</td>"+CR_LF+ ;
						"</tr>"+CR_LF
			ENDFOR
			lcHTML=lcHTML+this.EvalText(lcTRTag)+CR_LF+ ;
					this.EvalText(lcTDTag)+CR_LF+ ;
					"<hr>"+CR_LF+ ;
					"</td>"+CR_LF+ ;
					"</tr>"+CR_LF
		ENDSCAN
		this.oGenTag.AddItem(lcHTML)
		
	ENDPROC

	PROCEDURE generatelisttable
		LOCAL lcHTML,lcScope,lnCount
		LOCAL lcField,lcFieldValue,lcFieldType,lnRecCount,lnRecIndex
		LOCAL lcTHTag,lcTRTag,lcTDTag,lcCaption
		
		lcTHTag="<th"+IIF(EMPTY(this.cTHAttributes),">"," "+this.cTHAttributes+">")
		lcTRTag="<tr"+IIF(EMPTY(this.cTRAttributes),">"," "+this.cTRAttributes+">")
		lcTDTag="<td"+IIF(EMPTY(this.cTDAttributes),">"," "+this.cTDAttributes+">")
		this.oGenTag=this.Body.AddTag("table")
		this.oGenTag.ID="GenTable"
		this.oGenTag.Border=1
		lcHTML=this.EvalText(lcTRTag)+CR_LF
		FOR lnCount = 1 TO this.nFieldCount
			lcCaption=this.aFieldList[lnCount,5]
			lcFieldType=this.aFieldList[lnCount,2]
			IF NOT INLIST(lcFieldType,"C","M","N","L","D","T","Y","F","B","I","V","Q","W")
				LOOP
			ENDIF
			lcHTML=lcHTML+this.EvalText(lcTHTag)+lcCaption+"</th>"+CR_LF
		ENDFOR
		lcHTML=lcHTML+"</tr>"+CR_LF
		lnRecCount=RECCOUNT()
		lnRecIndex=0
		lcScope=this.cScope
		SCAN &lcScope
			lnRecIndex=lnRecIndex+1
			IF MOD(lnRecIndex,10)=0
				IF this.lMessageBar
					SET MESSAGE TO M_GENERATING_HTML_LOC+":  ("+this.cSourceTable+") "+ ;
							ALLTRIM(STR(100*lnRecIndex/lnRecCount))+"% ..."
				ENDIF
			ENDIF
			lcHTML=lcHTML+this.EvalText(lcTRTag)+CR_LF
			FOR lnCount = 1 TO this.nFieldCount
				lcField=this.aFieldList[lnCount,1]
				lcFieldValue=this.GetFieldValue(lcField,this.aFieldList[lnCount,2], ;
						this.aFieldList[lnCount,3],this.aFieldList[lnCount,4])
				IF ISNULL(lcFieldValue)
					LOOP
				ENDIF
				lcFieldValue=STRTRAN(STRTRAN(STRTRAN(this.ValidText(this.TranslateItem(lcFieldValue)), ;
						CR_LF,CR),LF,CR),CR,"<br>")
				IF EMPTY(lcFieldValue)
					lcFieldValue=this.ValidText(" ")
				ENDIF
				lcHTML=lcHTML+this.EvalText(lcTDTag)+lcFieldValue+"</td>"+CR_LF
			ENDFOR
			lcHTML=lcHTML+"</tr>"+CR_LF
		ENDSCAN
		this.oGenTag.AddItem(lcHTML)
		
	ENDPROC

	PROCEDURE generatetable
		DO CASE
			CASE this.nTableStyle=0
				RETURN this.GenerateListTable()
			CASE this.nTableStyle=1
				RETURN this.GenerateDetailTable()
			OTHERWISE
				RETURN .F.
		ENDCASE
		
	ENDPROC

	PROCEDURE getfieldvalue
		LPARAMETERS tcField,tcFieldType,tnFieldSize,tnDecimals
		
		DO CASE
			CASE tcFieldType=="C"
				RETURN TRIM(EVALUATE(tcField))
			CASE tcFieldType=="M"
				RETURN TRIM(EVALUATE(tcField))
			CASE INLIST(tcFieldType,"L","D","T")
				RETURN TRANSFORM(EVALUATE(tcField))
			CASE INLIST(tcFieldType,"N","Y","F","B")
				IF EMPTY(tnFieldSize)
					RETURN TRANSFORM(EVALUATE(tcField))
				ENDIF
				RETURN ALLTRIM(STR(EVALUATE(tcField),tnFieldSize+tnDecimals,tnDecimals))
			CASE tcFieldType=="I"
				RETURN TRANSFORM(EVALUATE(tcField))
			CASE tcFieldType=="V"
				RETURN EVALUATE(tcField)
			CASE INLIST(tcFieldType,"W","Q")
				RETURN STRCONV(EVALUATE(tcField),13)
		ENDCASE
		RETURN .NULL.
		
	ENDPROC

	PROCEDURE postgeneratetable
		IF EMPTY(this.cPostGenerateTableScript)
			RETURN
		ENDIF
		this.RunCode(this.cPostGenerateTableScript)
		
	ENDPROC

	PROCEDURE pregeneratetable
		IF EMPTY(this.cPreGenerateTableScript)
			RETURN
		ENDIF
		this.RunCode(this.cPreGenerateTableScript)
		
	ENDPROC

	PROCEDURE refreshfieldlist
		LOCAL lcExpression,lcFieldType,lcCaption,lcDBName,lcCursorName,lcLastSetDatabase,lnCount
		
		IF this.nSourceListCount=0
			this.nFieldCount=AFIELDS(laFields)
			DIMENSION this.aFieldList[this.nFieldCount,5]
			lcDBName=CURSORGETPROP("database")
			lcLastSetDatabase=SET("DATABASE")
			IF NOT EMPTY(lcDBName)
				SET DATABASE TO (lcDBName)
			ENDIF
			lcCursorName=CURSORGETPROP("sourcename")
			FOR lnCount = 1 TO this.nFieldCount
				lcExpression=laFields[lnCount,1]
				lcCaption=""
				IF DBUSED(lcDBName)
					lcCaption=DBGETPROP(lcCursorName+"."+laFields[lnCount,1],"field","caption")
				ENDIF
				IF EMPTY(lcCaption)
					lcCaption=PROPER(lcExpression)
				ENDIF
				this.aFieldList[lnCount,1]=lcExpression
				this.aFieldList[lnCount,2]=laFields[lnCount,2]
				this.aFieldList[lnCount,3]=laFields[lnCount,3]
				this.aFieldList[lnCount,4]=laFields[lnCount,4]
				this.aFieldList[lnCount,5]=lcCaption
			ENDFOR
			IF DBUSED(lcDBName)
				IF EMPTY(lcLastSetDatabase)
					SET DATABASE TO
				ELSE
					SET DATABASE TO (lcLastSetDatabase)
				ENDIF
			ENDIF
		ELSE
			this.nFieldCount=this.nSourceListCount
			DIMENSION this.aFieldList[this.nFieldCount,5]
			FOR lnCount = 1 TO this.nFieldCount
				lcExpression=this.aSourceList[lnCount,1]
				lcFieldType=TYPE(lcExpression)
				lcCaption=this.aSourceList[lnCount,2]
				IF EMPTY(lcCaption)
					lcCaption=PROPER(lcExpression)
				ENDIF
				this.aFieldList[lnCount,1]=lcExpression
				this.aFieldList[lnCount,2]=lcFieldType
				this.aFieldList[lnCount,3]=0
				this.aFieldList[lnCount,4]=0
				this.aFieldList[lnCount,5]=lcCaption
			ENDFOR
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _htmltag AS _custom OF "_base.vcx" 		&& HTML tag class.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: addattribute
		*m: addcomment
		*m: addcrlfitem
		*m: addevalitem
		*m: addgenhtmlfield
		*m: additem		&& Adds a new item to a ComboBox or ListBox control, optionally allowing you to specify the item's index.
		*m: addstyletag
		*m: addtag
		*m: addtagitem
		*m: addtagnoend
		*m: addtext
		*m: addxmltag
		*m: clear		&& Clears the contents of a ComboBox or ListBox control.
		*m: coutfile_assign
		*m: createielink
		*m: createoutfile
		*m: deleteoutfile
		*m: deletetempoutfile
		*m: document_access
		*m: document_assign
		*m: evaltext
		*m: filepath
		*m: genscript
		*m: getattributes
		*m: getfile
		*m: getgenhtmlfield
		*m: gethtmlelementtext
		*m: gethtmltext
		*m: getietag
		*m: getitemcollection
		*m: getitemcount
		*m: getitems
		*m: getobjectrefitems
		*m: gettags
		*m: gettagtext
		*m: height_assign
		*m: hexcolor
		*m: htmltext_access
		*m: htmltext_assign
		*m: ietag_access
		*m: ietag_assign
		*m: ie_access
		*m: ie_assign
		*m: inherittag
		*m: item_access
		*m: item_assign
		*m: lielink_access
		*m: lielink_assign
		*m: ltaglowercase_access
		*m: ltaglowercase_assign
		*m: ltaguppercase_access
		*m: ltaguppercase_assign
		*m: msgbox
		*m: name_assign
		*m: navigate
		*m: newstyletag
		*m: newtag
		*m: newtagnoend
		*m: newxmltag
		*m: nitemcount_access
		*m: nitemcount_assign
		*m: oevaltext_access
		*m: refresh		&& Repaints a Form or control and refreshes any values.
		*m: refreshielink
		*m: releaseattributes
		*m: releaseielink
		*m: releaseitems
		*m: releaseobjects
		*m: runcode
		*m: runscript
		*m: savefile
		*m: setitemcount
		*m: setitems
		*m: setproperties
		*m: shellexecute
		*m: show		&& Displays a Form and specifies if the Form is modal or modeless.
		*m: tagname_access
		*m: tagname_assign
		*m: tagtext_access
		*m: tagtext_assign
		*m: this_access
		*m: translateitem
		*m: updatechildalltags
		*m: updatechildtags
		*m: validtext
		*m: viewsource
		*m: width_assign
		*p: cattributes
		*p: cdefaulttagclass
		*p: cdefaulttagclasslibrary
		*p: cevaltextclass
		*p: cevaltextclasslibrary
		*p: cfileext
		*p: cgenhtmlalias
		*p: cgenhtmltable
		*p: cgetfileext
		*p: cieclass
		*p: cindentchar
		*p: cindenttext
		*p: citemcollectionclass
		*p: citemcollectionclasslibrary
		*p: clastgetfileext
		*p: cnorefreshielinktaglist
		*p: coutfile
		*p: cproperties
		*p: cruncodeprogram
		*p: cscope
		*p: csourcefile
		*p: cstyletagclass
		*p: cstyletagclasslibrary
		*p: ctempoutfile
		*p: cxmltagclass
		*p: cxmltagclasslibrary
		*p: document
		*p: htmltext
		*p: ie
		*p: ietag
		*p: lautoevaltext
		*p: lautosetitems
		*p: lemptytag
		*p: lenabled
		*p: lendtag
		*p: lfullendtag
		*p: lhtmlobject
		*p: lielink
		*p: lindent
		*p: litemcrlf
		*p: lnavigatehost
		*p: lrelativepath
		*p: lsortattributes
		*p: ltagcrlf
		*p: ltagdeclaration
		*p: ltaglowercase
		*p: ltaguppercase
		*p: ltranslatespecialchars
		*p: nattributecount
		*p: nindentcharcount
		*p: nindex
		*p: nitemcount
		*p: nmaxtagwidth
		*p: nsourcelistcount
		*p: nworkarea
		*p: oevaltext
		*p: oitemcollection
		*p: oparent
		*p: oproperties
		*p: orecord
		*p: osource
		*p: otopparent
		*p: ouser
		*p: tagname
		*p: tagtext
		*a: aattributes[1,0]
		*a: asourcelist[1,0]
		*a: item[1,0]
	*</DefinedPropArrayMethod>

	PROTECTED lhtmlobject
	cattributes = 
	cdefaulttagclass = _HTMLTag
	cdefaulttagclasslibrary = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_HTML.vcx")
	cevaltextclass = _EvalText
	cevaltextclasslibrary = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_HTML.vcx")
	cfileext = htm
	cgenhtmlalias = 
	cgenhtmltable = (IIF(VERSION(2)=0,"",HOME())+"GenHTML.dbf")
	cgetfileext = htm;html;asp
	cieclass = InternetExplorer.Application
	cindentchar = (CHR(9))
	cindenttext = 
	citemcollectionclass = _ItemCollection
	citemcollectionclasslibrary = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_HTML.vcx")
	clastgetfileext = 
	cnorefreshielinktaglist = 
	coutfile = 
	cproperties = 
	cruncodeprogram = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"RunCode.prg")
	cscope = 
	csourcefile = 
	cstyletagclass = _StyleTag
	cstyletagclasslibrary = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_HTML.vcx")
	ctempoutfile = 
	cxmltagclass = _XMLTag
	cxmltagclasslibrary = (IIF(VERSION(2)=0,"",HOME()+"FFC\")+"_HTML.vcx")
	htmltext = 
	ie = .NULL.
	lautoevaltext = .T.
	lautosetitems = .T.
	lautosetobjectrefs = .T.
	lenabled = .T.
	lendtag = .T.
	lfullendtag = .T.
	lhtmlobject = .T.
	litemcrlf = .T.
	lrelativepath = .T.
	ltagcrlf = .T.
	ltaglowercase = .T.
	ltranslatespecialchars = .T.
	Name = "_htmltag"
	nattributecount = 0
	nindentcharcount = 1
	nindex = 0
	nitemcount = 0
	nmaxtagwidth = 0
	nsourcelistcount = 0
	nworkarea = 0
	oevaltext = .NULL.
	oitemcollection = .NULL.
	oparent = .NULL.
	oproperties = .NULL.
	orecord = .NULL.
	osource = .NULL.
	otopparent = .NULL.
	ouser = .NULL.
	tagname = 
	tagtext = 
	
	PROCEDURE addattribute
		LPARAMETERS tcMember
		LOCAL lcMember,lnCount
		
		IF EMPTY(tcMember)
			RETURN .F.
		ENDIF
		lcMember=ALLTRIM(tcMember)
		FOR lnCount = 1 TO this.nAttributeCount
			IF LOWER(ALLTRIM(this.aAttributes[lnCount]))==LOWER(lcMember)
				RETURN
			ENDIF
		ENDFOR
		this.nAttributeCount=this.nAttributeCount+1
		DIMENSION this.aAttributes[this.nAttributeCount]
		this.aAttributes[this.nAttributeCount]=lcMember
		
	ENDPROC

	PROCEDURE addcomment
		LPARAMETERS tvItem,tnIndex
		LOCAL lcComment
		
		IF VARTYPE(tvItem)=="O"
			RETURN 0
		ENDIF
		lcComment=TRANSFORM(tvItem)
		IF CR$lcComment OR LF$lcComment
			lcComment=CR_LF+lcComment+CR_LF
		ENDIF
		RETURN this.AddItem("<!--"+lcComment+"-->",tnIndex)
		
	ENDPROC

	PROCEDURE addcrlfitem
		LPARAMETERS tvCount,tnIndex
		LOCAL lnCount
		
		lnCount=IIF(VARTYPE(tvCount)=="N",INT(tvCount),1)
		IF lnCount<1
			RETURN 0
		ENDIF
		RETURN this.AddItem(REPLICATE(CR_LF,lnCount),tnIndex)
		
	ENDPROC

	PROCEDURE addevalitem
		LPARAMETERS tcItem,tnIndex
		
		IF VARTYPE(tcItem)=="O" OR EMPTY(tcItem)
			RETURN 0
		ENDIF
		RETURN this.AddItem(EVAL_ITEM+TRANSFORM(tcItem),tnIndex)
		
	ENDPROC

	PROCEDURE addgenhtmlfield
		LPARAMETERS tcExpr,tnIndex,tcID
		LOCAL lvItem
		
		lvItem=this.GetGenHTMLField(tcExpr,tcID)
		IF EMPTY(lvItem)
			RETURN 0
		ENDIF
		RETURN this.AddItem(lvItem,tnIndex)
		
	ENDPROC

	PROCEDURE additem		&& Adds a new item to a ComboBox or ListBox control, optionally allowing you to specify the item's index.
		LPARAMETERS tvItem,tnIndex
		LOCAL lcItem,lnIndex,oItem,lnItem,lcIndentText,lnCount
		LOCAL laItem[1]
		
		IF INLIST(VARTYPE(tvItem),"X","L") OR (VARTYPE(tvItem)=="C" AND tvItem=="")
			RETURN 0
		ENDIF
		lnCount=this.nItemCount+1
		lnIndex=IIF(VARTYPE(tnIndex)=="N",INT(tnIndex),lnCount)
		lnIndex=MAX(MIN(lnIndex,lnCount),1)
		DIMENSION this.Item[lnCount]
		IF lnIndex<lnCount
			DIMENSION laItem[lnCount]
			ACOPY(this.Item,laItem)
			AINS(laItem,lnIndex)
			FOR lnItem = (lnIndex+1) TO lnCount
				oItem=this.Item[lnItem-1]
				laItem[lnItem]=oItem
				IF VARTYPE(oItem)#"O" OR NOT PEMSTATUS(oItem,"lHTMLObject",5)
					LOOP
				ENDIF
				oItem.nIndex=oItem.nIndex+1
			ENDFOR
			ACOPY(laItem,this.Item)
		ENDIF
		lcIndentText=this.cIndentText+REPLICATE(this.cIndentChar,this.nIndentCharCount)
		IF VARTYPE(tvItem)=="O"
			IF PEMSTATUS(tvItem,"lIndent",5) AND tvItem.lIndent
				tvItem.cIndentText=lcIndentText
			ENDIF
			this.Item[lnIndex]=tvItem
			RETURN lnIndex
		ENDIF
		IF this.lIndent AND this.lItemCRLF
			lcItem=lcIndentText
		ELSE
			lcItem=""
		ENDIF
		lcItem=lcItem+TRANSFORM(tvItem)
		this.Item[lnIndex]=lcItem
		RETURN lnIndex
		
	ENDPROC

	PROCEDURE addstyletag
		LPARAMETERS tvTagName,tnIndex
		LOCAL oTag
		
		oTag=this.NewStyleTag(tvTagName)
		IF VARTYPE(oTag)#"O"
			RETURN .NULL.
		ENDIF
		RETURN this.AddTag(oTag)
		
	ENDPROC

	PROCEDURE addtag
		LPARAMETERS tvTagName,tnIndex
		LOCAL oTag,lcVarType
		
		lcVarType=VARTYPE(tvTagName)
		DO CASE
			CASE INLIST(lcVarType,"C","L")
				oTag=this.NewTag(tvTagName)
				IF VARTYPE(oTag)#"O"
					RETURN .NULL.
				ENDIF
				oTag.nIndex=this.AddItem(oTag,tnIndex)
			CASE lcVarType=="O"
				oTag=tvTagName
				oTag.nIndex=this.AddItem(oTag,tnIndex)
			OTHERWISE
				RETURN .NULL.
		ENDCASE
		RETURN oTag
		
	ENDPROC

	PROCEDURE addtagitem
		LPARAMETERS tvItem,tnIndex
		
		IF VARTYPE(tvItem)=="C"
			RETURN this.AddItem("<"+IIF(this.lTagLowerCase,LOWER(ALLTRIM(tvItem)), ;
					UPPER(ALLTRIM(tvItem)))+">",tnIndex)
		ENDIF
		RETURN this.AddItem(tvItem,tnIndex)
		
	ENDPROC

	PROCEDURE addtagnoend
		LPARAMETERS tvTagName,tnIndex
		LOCAL oTag
		
		oTag=this.NewTagNoEnd(tvTagName)
		IF VARTYPE(oTag)#"O"
			RETURN .NULL.
		ENDIF
		RETURN this.AddTag(oTag,tnIndex)
		
	ENDPROC

	PROCEDURE addtext
		LPARAMETERS tcText,tnIndex
		
		IF VARTYPE(tcText)#"C" OR EMPTY(tcText)
			RETURN 0
		ENDIF
		RETURN this.AddItem(this.ValidText(tcText),tnIndex)
		
	ENDPROC

	PROCEDURE addxmltag
		LPARAMETERS tvTagName,tnIndex
		LOCAL oTag
		
		oTag=this.NewXMLTag(tvTagName)
		IF VARTYPE(oTag)#"O"
			RETURN .NULL.
		ENDIF
		RETURN this.AddTag(oTag)
		
	ENDPROC

	PROCEDURE clear		&& Clears the contents of a ComboBox or ListBox control.
		WAIT CLEAR
		this.ReleaseAttributes
		this.ReleaseItems
		this.TagName=""
		
	ENDPROC

	PROCEDURE coutfile_assign
		LPARAMETERS vNewVal
		LOCAL lcOutFile
		
		lcOutFile=ALLTRIM(m.vNewVal)
		IF EMPTY(JUSTEXT(lcOutFile))
			lcOutFile=FORCEEXT(lcOutFile,"htm")
		ENDIF
		this.cOutFile=lcOutFile
		
	ENDPROC

	PROCEDURE createielink
		LPARAMETERS tlShow
		LOCAL oIE
		
		this.ReleaseIELink
		oIE=NEWOBJECT(this.cIEClass)
		IF VARTYPE(oIE)#"O"
			this.IE=.NULL.
			RETURN .F.
		ENDIF
		this.IE=oIE
		IF tlShow
			this.Show
		ENDIF
		
	ENDPROC

	PROCEDURE createoutfile
		LPARAMETERS tcOutFile
		LOCAL lcOutFile
		
		IF EMPTY(tcOutFile)
			this.cTempOutFile=FORCEEXT(SYS(2023)+"\"+LOWER(SYS(2015)),this.cFileExt)
			this.cOutFile=this.cTempOutFile
		ENDIF
		lcOutFile=ALLTRIM(this.cOutFile)
		IF NOT this.SaveFile(lcOutFile) OR EMPTY(SYS(2000,lcOutFile))
			RETURN ""
		ENDIF
		RETURN ALLTRIM(lcOutFile)
		
	ENDPROC

	PROCEDURE deleteoutfile
		IF EMPTY(this.cOutFile) OR NOT FILE(this.cOutFile)
			RETURN .F.
		ENDIF
		ERASE (this.cOutFile)
		IF FILE(this.cOutFile)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE deletetempoutfile
		IF EMPTY(this.cTempOutFile) OR NOT FILE(this.cTempOutFile)
			RETURN .F.
		ENDIF
		ERASE (this.cTempOutFile)
		IF FILE(this.cTempOutFile)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Destroy
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		this.Clear
		this.ReleaseObjects
		this.ReleaseIELink
		this.DeleteTempOutFile
		
	ENDPROC

	PROCEDURE document_access
		IF ISNULL(this.IE) OR TYPE("this.IE.Document")#"O"
			RETURN .NULL.
		ENDIF
		RETURN this.IE.Document
		
	ENDPROC

	PROCEDURE document_assign
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE Error
		LPARAMETERS nError, cMethod, nLine
		LOCAL lcMethod
		EXTERNAL ARRAY __RunCodeError
		
		IF nError=1426 OR nError=1945
			RETURN
		ENDIF
		lcMethod=LOWER(ALLTRIM(cMethod))
		IF lcMethod=="runcode"
			RETURN __RunCodeError(ERROR(),0,"RunCode","",MESSAGE())
		ENDIF
		IF NOT DODEFAULT(nError, cMethod, nLine)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE evaltext
		LPARAMETERS tcText
		
		RETURN this.oEvalText.EvalText(tcText)
		
	ENDPROC

	PROCEDURE filepath
		LPARAMETERS tcFileName
		
		IF VARTYPE(tcFileName)#"C" OR EMPTY(tcFileName)
			RETURN ""
		ENDIF
		IF this.lRelativePath
			RETURN LOWER(SYS(2014,tcFileName,this.cOutFile))
		ENDIF
		RETURN LOWER(FULLPATH(tcFileName,this.cOutFile))
		
	ENDPROC

	PROCEDURE genscript
		IF TYPE("this.oRecord.GenScript")#"C"
			RETURN .F.
		ENDIF
		RETURN this.RunCode(this.oRecord.GenScript,.F.,.T.)
		
	ENDPROC

	PROCEDURE getattributes
		LPARAMETERS tnTagWidthOffset
		LOCAL lnTagWidthOffset,lcAttribute,lcAttributes,lcAttributes2,lcAttrib
		LOCAL lnMaxTagWidth,lnCount,lcVarType,lcDelimiter
		LOCAL llTagDeclaration,llTagDeclarationAdded
		
		lnTagWidthOffset=IIF(VARTYPE(tnTagWidthOffset)=="N",tnTagWidthOffset,0)
		lnMaxTagWidth=this.nMaxTagWidth-lnTagWidthOffset
		lcAttributes=""
		llTagDeclaration=this.lTagDeclaration
		llTagDeclarationAdded=.F.
		lcDeclarationIndent=";"+IIF(this.lItemCRLF,CR_LF+this.cIndentChar+this.cIndentText," ")
		IF this.lSortAttributes
			ASORT(this.aAttributes)
		ENDIF
		FOR lnCount = 1 TO this.nAttributeCount
			lcAttrib=this.aAttributes[lnCount]
			DO CASE
				CASE this.lTagLowerCase
					lcAttrib=LOWER(lcAttrib)
				CASE this.lTagUpperCase
					lcAttrib=LOWER(lcAttrib)
			ENDCASE
			tvAttribValue=EVALUATE("this."+this.aAttributes[lnCount])
			lcVarType=VARTYPE(tvAttribValue)
			IF LEFT(lcAttrib,1)=="_"
				lcAttrib=SUBSTR(lcAttrib,2)
			ENDIF
			DO CASE
				CASE INLIST(lcVarType,"O","X")
					LOOP
				CASE llTagDeclaration
					lcAttrib=STRTRAN(lcAttrib,"_","-")
					IF llTagDeclarationAdded
						lcAttrib=lcDeclarationIndent+lcAttrib
					ELSE
						llTagDeclarationAdded=.T.
					ENDIF
					IF lcVarType=="L"
						lcAttribute=lcAttrib+" "
					ELSE
						tvAttribValue=TRANSFORM(tvAttribValue)
						lcAttribute=lcAttrib+": "+tvAttribValue
					ENDIF
				CASE lcVarType=="L"
					IF NOT tvAttribValue
						LOOP
					ENDIF
					lcAttribute=lcAttrib
				CASE lcVarType=="T"
					lcAttribute=lcAttrib+[="]+TRANSFORM(tvAttribValue)+["]
				CASE lcVarType#"C"
					lcAttribute=lcAttrib+"="+TRANSFORM(tvAttribValue)
				OTHERWISE
					tvAttribValue=TRANSFORM(tvAttribValue)
					lcDelimiter=IIF(["]$tvAttribValue,['],["])
					lcAttribute=lcAttrib+"="+lcDelimiter+tvAttribValue+lcDelimiter
			ENDCASE
			IF llTagDeclaration
				lcAttributes2=ALLTRIM(lcAttributes+lcAttribute)
			ELSE
				lcAttributes2=ALLTRIM(lcAttributes+" "+lcAttribute)
			ENDIF
			IF this.nMaxTagWidth=0 OR LEN(lcAttributes2)<=lnMaxTagWidth
				lcAttributes=lcAttributes2
			ELSE
				lcAttributes=ALLTRIM(lcAttributes+CR_LF+" "+lcAttribute)
				lnMaxTagWidth=lnMaxTagWidth+this.nMaxTagWidth
			ENDIF
		ENDFOR
		IF this.lAutoEvalText AND VARTYPE(lcAttributes)=="C" AND ;
				"{{"$lcAttributes AND "}}"$lcAttributes
			lcAttributes=this.EvalText(lcAttributes)
		ENDIF
		RETURN ALLTRIM(lcAttributes)
		
	ENDPROC

	PROCEDURE getfile
		LPARAMETERS tcFileExt
		LOCAL lcFileExt
		
		IF EMPTY(tcFileExt) OR VARTYPE(tcFileExt)#"C"
			lcFileExt=this.cGetFileExt
			IF NOT EMPTY(this.cLastGetFileExt)
				lcFileExt=this.cLastGetFileExt+STRTRAN(";"+lcFileExt,";"+this.cLastGetFileExt,"")
			ENDIF
		ELSE
			lcFileExt=LOWER(ALLTRIM(tcFileExt))
		ENDIF
		RETURN LOWER(PUTFILE(M_SAVE_LOC,"",lcFileExt))
		
	ENDPROC

	PROCEDURE getgenhtmlfield
		LPARAMETERS tcExpr,tcID
		LOCAL lcID,lcExpr,lvResult,llGenHTMLUsed,lcAlias,lnLastSelect,lnLastRecNo
		
		IF EMPTY(this.cGenHTMLAlias) AND this#this.oParent
			RETURN this.oParent.GetGenHTMLField(tcExpr,tcID)
		ENDIF
		lvResult=.NULL.
		IF VARTYPE(tcExpr)#"C" OR EMPTY(tcExpr)
			RETURN lvResult
		ENDIF
		lcExpr=LOWER(ALLTRIM(tcExpr))
		lcID=IIF(VARTYPE(tcID)#"C","",LOWER(ALLTRIM(tcID)))
		lnLastSelect=SELECT()
		lcAlias=this.cGenHTMLAlias
		IF USED(lcAlias)
			llGenHTMLUsed=.T.
			SELECT (lcAlias)
		ELSE
			llGenHTMLUsed=.F.
			IF EMPTY(this.cGenHTMLTable) OR NOT FILE(this.cGenHTMLTable)
				RETURN lvResult
			ENDIF
			SELECT 0
			USE (this.cGenHTMLTable) AGAIN SHARED
			SET FILTER TO NOT DELETED()
			LOCATE
		ENDIF
		lnLastRecNo=IIF(EOF() OR RECNO()>RECCOUNT(),0,RECNO())
		IF lnLastRecNo>0 AND TYPE(tcExpr)#"U"
			IF NOT EMPTY(lcID)
				LOCATE FOR LOWER(ALLTRIM(ID))==lcID
			ENDIF
			lvResult=IIF(EOF(),"",TRANSFORM(EVALUATE(lcExpr)))
		ENDIF
		IF llGenHTMLUsed
			IF lnLastRecNo>0
				GO lnLastRecNo
			ENDIF
		ELSE
			USE
		ENDIF
		SELECT (lnLastSelect)
		RETURN lvResult
		
	ENDPROC

	PROCEDURE gethtmlelementtext
		LPARAMETERS tvItem
		LOCAL lcHTMLText,lvItem,lcVarType,lnEvalItemLen
		
		IF ISNULL(tvItem)
			RETURN ""
		ENDIF
		lvItem=tvItem
		lcVarType=VARTYPE(lvItem)
		lnEvalItemLen=LEN(EVAL_ITEM)
		IF lcVarType=="C" AND LEFT(lvItem,lnEvalItemLen)==EVAL_ITEM
			lvItem=EVALUATE(SUBSTR(lvItem,lnEvalItemLen+1))
			lcVarType=VARTYPE(lvItem)
			IF lcVarType=="O"
				RETURN this.GetHTMLElementText(lvItem)
			ENDIF
		ENDIF
		IF lcVarType=="X"
			RETURN ""
		ENDIF
		IF lcVarType=="O"
			IF NOT PEMSTATUS(lvItem,"lHTMLObject",5)
				IF PEMSTATUS(lvItem,"HTMLText",5)
					lcHTMLText=lvItem.HTMLText
					IF VARTYPE(lcHTMLText)=="C"
						RETURN lcHTMLText
					ENDIF
				ENDIF
				RETURN ""
			ENDIF
			RETURN lvItem.HTMLText
		ENDIF
		lcHTMLText=TRANSFORM(lvItem)
		IF this.lAutoEvalText AND VARTYPE(lcHTMLText)=="C" AND ;
				"{{"$lcHTMLText AND "}}"$lcHTMLText
			lcHTMLText=this.EvalText(lcHTMLText)
		ENDIF
		lcHTMLText=this.TranslateItem(lcHTMLText)
		IF this.lItemCRLF
			lcHTMLText=lcHTMLText+CR_LF
		ENDIF
		IF this.lAutoEvalText AND VARTYPE(lcHTMLText)=="C" AND ;
				"{{"$lcHTMLText AND "}}"$lcHTMLText
			lcHTMLText=this.EvalText(lcHTMLText)
		ENDIF
		RETURN lcHTMLText
		
	ENDPROC

	PROCEDURE gethtmltext
		LOCAL lcHTMLText,lcSubHTMLText,lcTagName,lcTagText,lcIndentText,llTagDeclaration,llSubText
		
		IF NOT this.lEnabled
			RETURN ""
		ENDIF
		llTagDeclaration=this.lTagDeclaration
		lcIndentText=IIF(this.lTagCRLF,this.cIndentText,"")
		lcTagName=this.TagName
		lcTagText=this.TagText
		lcHTMLText=lcIndentText
		DO CASE
			CASE llTagDeclaration
				IF NOT EMPTY(lcTagName) OR NOT EMPTY(lcTagText)
					DO CASe
						CASE EMPTY(lcTagName)
							lcHTMLText=lcHTMLText+lcTagText
						CASE this.lItemCRLF
							lcHTMLText=lcHTMLText+ALLTRIM(lcTagName+CR_LF+this.cIndentChar+"{"+lcTagText)
						OTHERWISE
							lcHTMLText=lcHTMLText+ALLTRIM(lcTagName+" {"+lcTagText)
					ENDCASE
				ENDIF
			CASE lcTagName=="!--"
				lcHTMLText=lcHTMLText+"<"+lcTagName+lcTagText
			CASE NOT EMPTY(lcTagName) OR NOT EMPTY(lcTagText)
				IF EMPTY(lcTagName)
					lcHTMLText=lcHTMLText+"<"+lcTagText
				ELSE
					IF EMPTY(lcTagText)
						lcHTMLText=lcHTMLText+"<"+lcTagName
					ELSE
						lcHTMLText=lcHTMLText+"<"+lcTagName+" "+lcTagText
					ENDIF
					IF this.lEmptyTag AND NOT this.lEndTag
						lcHTMLText=lcHTMLText+"/"
					ENDIF
				ENDIF
				lcHTMLText=lcHTMLText+">"
		ENDCASE
		IF NOT llTagDeclaration AND this.lTagCRLF AND this.lItemCRLF AND NOT EMPTY(lcHTMLText)
			lcHTMLText=lcHTMLText+CR_LF
		ENDIF
		lcSubHTMLText=this.GetObjectRefItems()+this.GetItems()
		llSubText=(NOT EMPTY(lcSubHTMLText))
		IF llSubText
			IF NOT llTagDeclaration AND NOT EMPTY(lcHTMLText) AND NOT EMPTY(lcSubHTMLText) AND ;
					this.lTagCRLF AND NOT this.lItemCRLF AND ;
					LEFT(STRTRAN(lcSubHTMLText,this.cIndentChar,""),1)=="<"
				lcHTMLText=lcHTMLText+CR_LF
			ENDIF
			lcHTMLText=lcHTMLText+lcSubHTMLText
		ENDIF
		IF ALLTRIM(STRTRAN(lcHTMLText,this.cIndentChar,""))=="<>"
			RETURN ""
		ENDIF
		IF llTagDeclaration
			IF EMPTY(lcHTMLText)
				RETURN lcHTMLText
			ENDIF
			IF NOT EMPTY(lcTagName)
				IF this.lTagCRLF
					lcHTMLText=lcHTMLText+"}"+CR_LF
				ELSE
					lcHTMLText=lcHTMLText+"}"
				ENDIF
			ENDIF
			RETURN lcHTMLText
		ENDIF
		IF EMPTY(lcTagName)
			RETURN lcHTMLText
		ENDIF
		IF this.lEndTag
			IF lcTagName=="!--"
				lcHTMLText=lcHTMLText+lcIndentText+"-->"
			ELSE
				DO CASE
					CASE NOT llSubText AND NOT this.lFullEndTag AND RIGHT(lcHTMLText,1)==">"
						lcHTMLText=LEFT(lcHTMLText,LEN(lcHTMLText)-1)+"/>"
					CASE RIGHT(lcHTMLText,2)==CR_LF
						lcHTMLText=lcHTMLText+lcIndentText+"</"+lcTagName+">"
					OTHERWISE
						lcHTMLText=lcHTMLText+"</"+lcTagName+">"
				ENDCASE
			ENDIF
			IF this.lTagCRLF AND NOT EMPTY(lcHTMLText)
				lcHTMLText=lcHTMLText+CR_LF
			ENDIF
		ENDIF
		RETURN lcHTMLText
		
	ENDPROC

	PROCEDURE getietag
		LPARAMETERS tvID
		LOCAL lcID,oDocument,oTag,lcVarType
		
		oDocument=this.Document
		IF VARTYPE(oDocument)#"O"
			RETURN .NULL.
		ENDIF
		lcVarType=VARTYPE(tvID)
		DO CASE
			CASE lcVarType=="O"
				lcID=IIF(PEMSTATUS(tvID,"ID",5),ALLTRIM(tvID.ID),"")
			CASE lcVarType=="L" OR EMPTY(tvID)
				lcID=this.ID
			CASE lcVarType=="C"
				lcID=ALLTRIM(tvID)
			OTHERWISE
				RETURN .NULL.
		ENDCASE
		IF VARTYPE(lcID)#"C" OR EMPTY(lcID)
			RETURN .NULL.
		ENDIF
		oTag=oDocument.All(lcID)
		RETURN oTag
		
	ENDPROC

	PROCEDURE getitemcollection
		IF this.lRelease
			RETURN .NULL.
		ENDIF
		IF VARTYPE(this.oItemCollection)#"O"
			this.oItemCollection=NEWOBJECT(this.cItemCollectionClass, ;
					this.cItemCollectionClassLibrary,"",this)
		ENDIF
		RETURN this.oItemCollection
		
	ENDPROC

	PROCEDURE getitemcount
		LOCAL lnCount
		
		lnCount=ALEN(this.Item)
		IF lnCount=1 AND INLIST(VARTYPE(this.Item[1]),"X","L")
			lnCount=0
		ENDIF
		RETURN lnCount
		
	ENDPROC

	PROCEDURE getitems
		LOCAL lcHTMLText,lcHTMLElementText,lnCount
		
		lcHTMLText=""
		FOR lnCount = 1 TO this.nItemCount
			lcHTMLElementText=this.GetHTMLElementText(this.Item[lnCount])
			lcHTMLText=lcHTMLText+lcHTMLElementText
		ENDFOR
		RETURN lcHTMLText
		
	ENDPROC

	PROCEDURE getobjectrefitems
		LOCAL lcHTMLText,lcHTMLElementText,lcObjName,lnCount
		
		lcHTMLText=""
		FOR lnCount = 1 TO this.nObjectRefCount
			lcObjName=this.aObjectRefs[lnCount,1]
			lcHTMLElementText=this.GetHTMLElementText(EVALUATE("this."+lcObjName))
			lcHTMLText=lcHTMLText+lcHTMLElementText
		ENDFOR
		RETURN lcHTMLText
		
	ENDPROC

	PROCEDURE gettags
		LPARAMETERS tcTagName,tlTagDeclaration
		LOCAL oAllTags,lcTagName
		
		oAllTags=this.NewTag(.F.,.T.)
		IF VARTYPE(oAllTags)#"O"
			RETURN .NULL.
		ENDIF
		lcTagName=IIF(EMPTY(tcTagName),"",ALLTRIM(tcTagName))
		this.UpdateChildAllTags(oAllTags,lcTagName,tlTagDeclaration)
		RETURN oAllTags
		
	ENDPROC

	PROCEDURE gettagtext
		LOCAL lcTagText,lcTagText2,lcAttributes,lcTagName,lnTagWidthOffset
		
		lcAttributes=ALLTRIM(this.cAttributes)
		lcTagName=ALLTRIM(this.TagName+" ")
		lnTagWidthOffset=LEN(lcAttributes)+LEN(lcTagName)
		lcTagText=this.GetAttributes()
		IF EMPTY(lcAttributes)
			RETURN lcTagText
		ENDIF
		lcTagText2=ALLTRIM(lcTagText+" "+lcAttributes)
		IF this.nMaxTagWidth=0 OR LEN(lcTagText2)<=(this.nMaxTagWidth-lnTagWidthOffset)
			RETURN lcTagText2
		ENDIF
		RETURN ALLTRIM(lcTagText+CR_LF+" "+lcAttributes)
		
	ENDPROC

	PROCEDURE height_assign
		LPARAMETERS vNewVal
		
		this.AddAttribute("Height")
		this.Height=m.vNewVal
		
	ENDPROC

	PROCEDURE hexcolor
		LPARAMETERS tnColor
		LOCAL lcRed,lcGreen,lcBlue
		
		IF VARTYPE(tnColor)#"N"
			RETURN ""
		ENDIF
		lcRed=RIGHT(TRANSFORM(MOD(tnColor,256),"@0"),2)
		lcGreen=RIGHT(TRANSFORM(MOD(INT(tnColor/256),256),"@0"),2)
		lcBlue=RIGHT(TRANSFORM(INT(tnColor/65536),"@0"),2)
		RETURN "#"+lcRed+lcGreen+lcBlue
		
	ENDPROC

	PROCEDURE htmltext_access
		RETURN this.GetHTMLText()
		
	ENDPROC

	PROCEDURE htmltext_assign
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE ietag_access
		RETURN this.GetIETag()
		
	ENDPROC

	PROCEDURE ietag_assign
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE ie_access
		IF ISNULL(this.IE)
			RETURN .NULL.
		ENDIF
		IF TYPE("this.IE.Visible")#"L" OR VARTYPE(this.IE)#"O"
			this.IE=.NULL.
			RETURN .NULL.
		ENDIF
		RETURN this.IE
		
	ENDPROC

	PROCEDURE ie_assign
		LPARAMETERS vNewVal
		LOCAL oIE,oItem,lnCount
		
		this.IE=m.vNewVal
		oIE=this.IE
		IF this.lRelease
			RETURN
		ENDIF
		FOR lnCount = 1 TO this.nItemCount
			oItem=this.Item[lnCount]
			IF VARTYPE(oItem)#"O" OR NOT PEMSTATUS(oItem,"lHTMLObject",5) OR oItem=this
				LOOP
			ENDIF
			oItem.IE=oIE
		ENDFOR
		
	ENDPROC

	PROCEDURE inherittag
		LPARAMETERS toChild,toParent
		
		IF VARTYPE(toChild)#"O" OR VARTYPE(toParent)#"O"
			RETURN .F.
		ENDIF
		toChild.oParent=toParent
		toChild.oTopParent=toParent.oTopParent
		toChild.lTagDeclaration=toParent.lTagDeclaration
		toChild.lTagLowerCase=toParent.lTagLowerCase
		toChild.lTagUpperCase=toParent.lTagUpperCase
		toChild.lTagCRLF=toParent.lTagCRLF
		toChild.lItemCRLF=toParent.lItemCRLF
		toChild.cIndentChar=toParent.cIndentChar
		toChild.cIndentText=toParent.cIndentText
		toChild.lIndent=toParent.lIndent
		toChild.nMaxTagWidth=toParent.nMaxTagWidth
		toChild.cGenHTMLTable=toParent.cGenHTMLTable
		toChild.cGenHTMLAlias=toParent.cGenHTMLAlias
		toChild.lAutoEvalText=toParent.lAutoEvalText
		toChild.lTranslateSpecialChars=toParent.lTranslateSpecialChars
		toChild.IE=toParent.IE
		
	ENDPROC

	PROCEDURE Init
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		this.oTopParent=this
		IF this.lAutoSetItems
			this.SetItems
		ENDIF
		
	ENDPROC

	PROCEDURE item_access
		LPARAMETERS nIndex
		
		IF VARTYPE(m.nIndex)#"N"
			RETURN this.GetItemCollection()
		ENDIF
		RETURN this.Item[m.nIndex]
		
	ENDPROC

	PROCEDURE item_assign
		LPARAMETERS vNewVal,nIndex
		
		IF VARTYPE(m.nIndex)#"N"
			RETURN this.GetItemCollection()
		ENDIF
		this.Item[m.nIndex]=m.vNewVal
		
	ENDPROC

	PROCEDURE lielink_access
		RETURN (VARTYPE(this.IE)=="O")
		
	ENDPROC

	PROCEDURE lielink_assign
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE ltaglowercase_access
		RETURN (this.lTagLowerCase AND NOT this.lTagUpperCase)
		
	ENDPROC

	PROCEDURE ltaglowercase_assign
		LPARAMETERS vNewVal
		
		IF m.vNewVal AND this.lTagUpperCase
			this.lTagUpperCase=.F.
		ENDIF
		this.lTagLowerCase=m.vNewVal
		
	ENDPROC

	PROCEDURE ltaguppercase_access
		RETURN this.lTagUpperCase
		
	ENDPROC

	PROCEDURE ltaguppercase_assign
		LPARAMETERS vNewVal
		
		IF m.vNewVal AND this.lTagLowerCase
			this.lTagLowerCase=.F.
		ENDIF
		this.lTagUpperCase=m.vNewVal
		
	ENDPROC

	PROCEDURE msgbox
		LPARAMETERS tcMessage,tnType
		LOCAL lnType,lnResult,lnLastSelect
		
		lnType=IIF(VARTYPE(tnType)=="N",tnType,48)
		lnLastSelect=SELECT()
		SELECT 0
		WAIT CLEAR
		lnResult=MESSAGEBOX(tcMessage,lnType,M_GENHTML_LOC)
		WAIT CLEAR
		SELECT (lnLastSelect)
		RETURN lnResult
		
	ENDPROC

	PROCEDURE name_assign
		LPARAMETERS vNewVal
		
		this.AddAttribute("Name")
		this.Name=m.vNewVal
		
	ENDPROC

	PROCEDURE navigate
		LPARAMETERS tcURL,tlShow
		LOCAL lcURL,oIE
		
		IF NOT this.lIELink
			RETURN .F.
		ENDIF
		lcURL=IIF(VARTYPE(tcURL)=="C",ALLTRIM(tcURL),"")
		oIE=this.IE
		IF this.lNavigateHost
			IF TYPE("oIE.oHost")#"O"
				RETURN .F.
			ENDIF
			oIE=this.IE.oHost
		ENDIF
		IF EMPTY(lcURL)
			oIE.GoHome
		ELSE
			oIE.Navigate(lcURL)
		ENDIF
		IF tlShow
			oIE.Visible=.T.
		ENDIF
		
	ENDPROC

	PROCEDURE newstyletag
		LPARAMETERS tcTagName
		
		RETURN this.NewTag(tcTagName,.T.,this.cStyleTagClass,this.cStyleTagClassLibrary)
		
	ENDPROC

	PROCEDURE newtag
		LPARAMETERS tcTagName,tlNoInherit,tcTagClass,tcTagClassLibrary
		LOCAL oTag,lcTagClass,lcTagClassLibrary
		
		lcTagClass=IIF(EMPTY(tcTagClass),this.cDefaultTagClass,tcTagClass)
		lcTagClassLibrary=IIF(EMPTY(tcTagClassLibrary),this.cDefaultTagClassLibrary,tcTagClassLibrary)
		oTag=NEWOBJECT(lcTagClass,lcTagClassLibrary)
		IF VARTYPE(oTag)#"O"
			RETURN .NULL.
		ENDIF
		IF VARTYPE(tcTagName)=="C" AND NOT EMPTY(tcTagName)
			oTag.TagName=tcTagName
		ENDIF
		IF NOT tlNoInherit
			this.InheritTag(oTag,this)
		ENDIF
		RETURN oTag
		
	ENDPROC

	PROCEDURE newtagnoend
		LPARAMETERS tcTagName,tlNoInherit
		LOCAL oTag
		
		oTag=this.NewTag(tcTagName,tlNoInherit)
		IF VARTYPE(oTag)#"O"
			RETURN oTag
		ENDIF
		oTag.lEndTag=.F.
		RETURN oTag
		
	ENDPROC

	PROCEDURE newxmltag
		LPARAMETERS tcTagName
		
		RETURN this.NewTag(tcTagName,.T.,this.cXMLTagClass,this.cXMLTagClassLibrary)
		
	ENDPROC

	PROCEDURE nitemcount_access
		RETURN this.GetItemCount()
		
	ENDPROC

	PROCEDURE nitemcount_assign
		LPARAMETERS vNewVal
		
		RETURN this.SetItemCount(m.vNewVal)
		
	ENDPROC

	PROCEDURE oevaltext_access
		IF VARTYPE(this.oEvalText)#"O"
			this.oEvalText=NEWOBJECT(this.cEvalTextClass,this.cEvalTextClassLibrary)
		ENDIF
		RETURN this.oEvalText
		
	ENDPROC

	PROCEDURE refresh		&& Repaints a Form or control and refreshes any values.
		this.RefreshIELink
		
	ENDPROC

	PROCEDURE refreshielink
		LOCAL oIETag
		
		IF NOT this.lIELink
			RETURN .F.
		ENDIF
		oIETag=this.IETag
		IF VARTYPE(oIETag)#"O" OR TYPE("oIETag.TagName")#"C" OR ;
				ATC(oIETag.TagName+",",ALLTRIM(this.cNoRefreshIELinkTagList)+",")>0
			IF EMPTY(this.cOutFile)
				IF VARTYPE(this.oParent)=="O" AND this#this.oParent
					RETURN this.oParent.RefreshIELink()
				ENDIF
				RETURN .F.
			ENDIF
			IF NOT this.SaveFile()
				RETURN .F.
			ENDIF
			RETURN this.Navigate(this.cOutFile)
		ENDIF
		oIETag.OuterHTML=this.HTMLText
		
	ENDPROC

	PROCEDURE release
		this.Clear
		this.ReleaseObjects
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE releaseattributes
		LOCAL lcAttrib,tvAttribValue,lnCount
		
		FOR lnCount = 1 TO this.nAttributeCount
			lcAttrib=this.aAttributes[lnCount]
			this.aAttributes[lnCount]=.NULL.
			IF VARTYPE(lcAttrib)#"C" OR EMPTY(lcAttrib) OR NOT PEMSTATUS(this,lcAttrib,4)
				this.aAttributes[lnCount]=.NULL.
				LOOP
			ENDIF
			tvAttribValue=EVALUATE("this."+lcAttrib)
			IF VARTYPE(tvAttribValue)#"O" OR NOT PEMSTATUS(tvAttribValue,"lHTMLObject",5) OR ;
					tvAttribValue=this
				this.&lcAttrib=.NULL.
				LOOP
			ENDIF
			tvAttribValue.Release
			tvAttribValue=.NULL.
			this.&lcAttrib=.NULL.
		ENDFOR
		this.nAttributeCount=0
		DIMENSION this.aAttributes[1]
		this.aAttributes=.NULL.
		
	ENDPROC

	PROCEDURE releaseielink
		LPARAMETERS tlQuitIE
		
		IF NOT this.lIELink
			RETURN .F.
		ENDIF
		IF tlQuitIE AND NOT PEMSTATUS(this.IE,"AddProperty",5)
			this.IE.Quit
		ENDIF
		this.IE=.NULL.
		
	ENDPROC

	PROCEDURE releaseitems
		LOCAL oItem,lnCount
		
		FOR lnCount = 1 TO ALEN(this.Item)
			oItem=this.Item[lnCount]
			IF VARTYPE(oItem)#"O" OR NOT PEMSTATUS(oItem,"lHTMLObject",5) OR oItem=this
				LOOP
			ENDIF
			this.Item[lnCount].Release
			this.Item[lnCount]=.NULL.
		ENDFOR
		DIMENSION this.Item[1]
		this.Item[1]=.NULL.
		
	ENDPROC

	PROCEDURE releaseobjects
		this.oHost=.NULL.
		this.oTopParent=.NULL.
		this.oParent=.NULL.
		this.oRecord=.NULL.
		this.oSource=.NULL.
		this.oUser=.NULL.
		this.oEvalText=.NULL.
		this.oProperties=.NULL.
		this.oItemCollection=.NULL.
		
	ENDPROC

	PROCEDURE runcode
		LPARAMETERS tcCode,tlFile,__tlIgnoreErrors
		
		DO (this.cRunCodeProgram) WITH (tcCode),(tlFile),(__tlIgnoreErrors)
		RETURN
		
		*-- Dummy lines for adding files to project.
		DO RunCode.prg
		
	ENDPROC

	PROCEDURE runscript
		LPARAMETERS tcID
		LOCAL lcCode
		
		lcCode=this.GetGenHTMLField("Script",tcID)
		IF EMPTY(lcCode)
			RETURN .F.
		ENDIF
		RETURN this.RunCode(lcCode)
		
	ENDPROC

	PROCEDURE savefile
		LPARAMETERS tcOutFile
		LOCAL lcOutFile,lcHTMLText
		
		lcOutFile=ALLTRIM(IIF(VARTYPE(tcOutFile)=="C",tcOutFile,this.cOutFile))
		IF EMPTY(lcOutFile)
			lcOutFile=this.GetFile()
			IF EMPTY(lcOutFile)
				RETURN .F.
			ENDIF
			IF EMPTY(JUSTEXT(lcOutFile))
				lcOutFile=FORCEEXT(lcOutFile,this.cFileExt)
			ENDIF
			this.cOutFile=lcOutFile
		ENDIF
		IF EMPTY(JUSTEXT(lcOutFile))
			lcOutFile=FORCEEXT(lcOutFile,this.cFileExt)
			this.cOutFile=lcOutFile
		ENDIF
		lcHTMLText=this.HTMLText
		IF EMPTY(lcHTMLText)
			RETURN .F.
		ENDIF
		RETURN (STRTOFILE(lcHTMLText,lcOutFile)>0)
		
	ENDPROC

	PROCEDURE sethost
		this.oHost=this
		
	ENDPROC

	PROCEDURE setitemcount
		LPARAMETERS tnNewCount
		LOCAL lnOldItemCount,lnNewItemCount,lnCount
		
		lnOldItemCount=this.nItemCount
		lnNewItemCount=MAX(INT(tnNewCount),0)
		IF lnNewItemCount=0
			DIMENSION this.Item[1]
			this.Item=.NULL.
			RETURN
		ENDIF
		DIMENSION this.Item[lnNewItemCount]
		IF lnNewItemCount>lnOldItemCount
			FOR lnCount = (lnOldItemCount+1) TO lnNewItemCount
				this.Item[lnCount]=.NULL.
			ENDFOR
		ENDIF
		
	ENDPROC

	PROCEDURE setitems
	ENDPROC

	PROCEDURE setproperties
		LPARAMETERS tcProperties
		LOCAL lcProperties,lnAtPos,lnAtPos2,lcProperty,lcProperty2,lcValue,lvValue,lvOldValue
		LOCAL lcMemLine,lnMemLine,lnMemLineCount,lcVarType
		LOCAL laMemLines[1]
		PRIVATE oTHIS
		
		IF this.lRelease OR VARTYPE(tcProperties)#"C" OR EMPTY(tcProperties)
			RETURN
		ENDIF
		lcProperties=tcProperties
		oTHIS=this
		lnMemLineCount=ALINES(laMemLines,lcProperties)
		FOR lnMemLine = 1 TO lnMemLineCount
			lcMemLine=laMemLines[lnMemLine]
			IF EMPTY(lcMemLine) OR LEFT(lcMemLine,1)=="*"
				LOOP
			ENDIF
			lnAtPos=AT("=",lcMemLine)
			IF lnAtPos=0 OR ATC("oTHIS.",lcMemLine)>0
				&lcMemLine
				LOOP
			ENDIF
			lcProperty=ALLTRIM(LEFT(lcMemLine,lnAtPos-1))
			lnAtPos2=AT("[",lcProperty)
			IF lnAtPos2=0
				lnAtPos2=AT("(",lcProperty)
				IF lnAtPos2>0
					lcProperty=STRTRAN(STRTRAN(lcProperty,"(","["),")","]")
				ENDIF
			ENDIF
			lcProperty2=IIF(lnAtPos2=0,lcProperty,ALLTRIM(LEFT(lcProperty,lnAtPos2-1)))
			IF EMPTY(lcProperty2) OR (NOT "."$lcProperty2 AND NOT ","$lcProperty2 AND ;
					(PEMSTATUS(this,lcProperty2,5) AND (PEMSTATUS(this,lcProperty2,1) OR ;
					PEMSTATUS(this,lcProperty2,2) OR ;
					NOT PEMSTATUS(this,lcProperty2,3)=="Property")))
				LOOP
			ENDIF
			lvOldValue=this.&lcProperty
			lcVarType=VARTYPE(lvOldValue)
			lcValue=ALLTRIM(SUBSTR(lcMemLine,lnAtPos+1))
			DO CASE
				CASE LEFT(lcValue,1)=="(" AND RIGHT(lcValue,1)==")"
					lvValue=EVALUATE(SUBSTR(lcValue,2,LEN(lcValue)-2))
				CASE lcVarType=="C"
					lvValue=lcValue
				CASE lcVarType=="N"
					lvValue=VAL(lcValue)
				CASE lcVarType=="L"
					lvValue=EVALUATE(lcValue)
					lvValue=(TYPE("lvValue")=="L" AND lvValue)
				OTHERWISE
					lvValue=lcValue
			ENDCASE
			this.&lcProperty=lvValue
			LOOP
		ENDFOR
		oTHIS=.NULL.
		
	ENDPROC

	PROCEDURE shellexecute
		LPARAMETERS tcFileName,tcWorkDir,tcOperation,tcParams
		LOCAL lcFileName,lcWorkDir,lcOperation,lcParams
		
		IF EMPTY(tcFileName)
			RETURN -1
		ENDIF
		lcFileName=ALLTRIM(tcFileName)
		lcWorkDir=IIF(TYPE("tcWorkDir")="C",ALLTRIM(tcWorkDir),"")
		lcOperation=IIF(TYPE("tcOperation")="C" AND NOT EMPTY(tcOperation),ALLTRIM(tcOperation),"Open")
		lcParams=IIF(TYPE("tcParams")="C" AND NOT EMPTY(tcParams),ALLTRIM(tcParams),"")
		
		DECLARE INTEGER ShellExecute ;
			    IN SHELL32.DLL ;
			    INTEGER nWinHandle,;
			    STRING cOperation,;   
			    STRING cFileName,;
			    STRING cParameters,;
			    STRING cDirectory,;
			    INTEGER nShowWindow
		RETURN ShellExecute(0,lcOperation,lcFileName,lcParams,lcWorkDir,1)
		
	ENDPROC

	PROCEDURE show		&& Displays a Form and specifies if the Form is modal or modeless.
		LOCAL lcOutFile
		
		lcOutFile=this.CreateOutFile(this.cOutFile)
		IF EMPTY(lcOutFile)
			RETURN .F.
		ENDIF
		IF TYPE("this.IE.Visible")=="L"
			this.Navigate(lcOutFile,.T.)
		ELSE
			this.ShellExecute(lcOutFile)
		ENDIF
		
	ENDPROC

	PROCEDURE tagname_access
		LOCAL lcTagName
		
		lcTagName=this.TagName
		IF this.lTagLowerCase
			lcTagName=LOWER(ALLTRIM(lcTagName))
		ELSE
			IF this.lTagUpperCase
				lcTagName=UPPER(ALLTRIM(lcTagName))
			ENDIF
		ENDIF
		IF this.lAutoEvalText AND VARTYPE(lcTagName)=="C" AND ;
				"{{"$lcTagName AND "}}"$lcTagName
			lcTagName=this.EvalText(lcTagName)
		ENDIF
		RETURN ALLTRIM(lcTagName)
		
	ENDPROC

	PROCEDURE tagname_assign
		LPARAMETERS vNewVal
		
		IF VARTYPE(m.vNewVal)#"C"
			ERROR 1732
			RETURN
		ENDIF
		this.TagName=m.vNewVal
		
	ENDPROC

	PROCEDURE tagtext_access
		RETURN this.GetTagText()
		
	ENDPROC

	PROCEDURE tagtext_assign
		LPARAMETERS vNewVal
		
		ERROR 1743
		
	ENDPROC

	PROCEDURE this_access
		LPARAMETERS cMember
		
		IF PEMSTATUS(this,cMember,5)
			RETURN this
		ENDIF
		this.AddProperty(cMember,.NULL.)
		IF PEMSTATUS(this,cMember,5)
			this.AddAttribute(cMember)
		ENDIF
		RETURN this
		
	ENDPROC

	PROCEDURE translateitem
		LPARAMETERS tcItem
		
		IF VARTYPE(tcItem)#"C"
			RETURN ""
		ENDIF
		RETURN tcItem
		
	ENDPROC

	PROCEDURE updatechildalltags
		LPARAMETERS toAllTags,tcTagName,tlTagDeclaration
		LOCAL lcTagName,oItem,oTag,lnCount
		
		lcTagName=ALLTRIM(tcTagName)
		FOR lnCount = 1 TO this.nItemCount
			oItem=this.Item[lnCount]
			IF VARTYPE(oItem)#"O" OR NOT PEMSTATUS(oItem,"lHTMLObject",5) OR oItem=this
				LOOP
			ENDIF
			IF (EMPTY(lcTagName) OR LOWER(oItem.TagName)==LOWER(lcTagName)) AND ;
					oItem.lTagDeclaration=tlTagDeclaration
				oTag=toAllTags.AddTag(oItem)
			ENDIF
			oItem.UpdateChildAllTags(toAllTags,lcTagName,tlTagDeclaration)
		ENDFOR
		
	ENDPROC

	PROCEDURE updatechildtags
		LPARAMETERS tcProperty
		LOCAL lcProperty,oItem,lnCount
		
		IF this.lRelease
			RETURN .F.
		ENDIF
		lcProperty=IIF(VARTYPE(tcProperty)=="C",ALLTRIM(tcProperty),"")
		IF NOT EMPTY(lcProperty) AND NOT PEMSTATUS(this,lcProperty,5)
			RETURN .F.
		ENDIF
		FOR lnCount = 1 TO this.nItemCount
			oItem=this.Item[lnCount]
			IF VARTYPE(oItem)#"O" OR NOT PEMSTATUS(oItem,"lHTMLObject",5) OR oItem=this
				LOOP
			ENDIF
			IF EMPTY(lcProperty)
				this.InheritTag(oItem,this)
			ELSE
				oItem.&lcProperty=this.&lcProperty
			ENDIF
			oItem.UpdateChildTags(lcProperty)
		ENDFOR
		
	ENDPROC

	PROCEDURE validtext
		LPARAMETERS tcText
		
		IF VARTYPE(tcText)#"C"
			RETURN ""
		ENDIF
		IF NOT this.lTranslateSpecialChars
			RETURN tcText
		ENDIF
		RETURN STRTRAN(STRTRAN(STRTRAN(STRTRAN(tcText, ;
				[-],[&ndash;]),[<],[&lt;]),[>],[&gt;]),[ ],[&nbsp;])
		
	ENDPROC

	PROCEDURE viewsource
		LPARAMETERS tlNoWait,tlNoEdit
		LOCAL lcOutFile
		
		lcOutFile=this.CreateOutFile(this.cOutFile)
		IF EMPTY(lcOutFile)
			RETURN .F.
		ENDIF
		IF tlNoWait
			IF tlNoEdit
				MODIFY FILE (lcOutFile) NOEDIT NOWAIT IN SCREEN
			ELSE
				MODIFY FILE (lcOutFile) NOWAIT IN SCREEN
			ENDIF
			RETURN
		ENDIF
		IF tlNoEdit
			MODIFY FILE (lcOutFile) NOEDIT IN SCREEN
		ELSE
			MODIFY FILE (lcOutFile) IN SCREEN
		ENDIF
		IF lcOutFile==this.cTempOutFile
			this.DeleteTempOutFile
			this.cOutFile=""
		ENDIF
		
	ENDPROC

	PROCEDURE width_assign
		LPARAMETERS vNewVal
		
		this.AddAttribute("Width")
		this.Width=m.vNewVal
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _itemcollection AS _custom OF "_base.vcx" 		&& Items collection class.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: count_access
		*m: count_assign
		*m: getitemcount
		*m: length_access
		*m: length_assign
		*m: setitemcount
		*p: count
		*p: length
	*</DefinedPropArrayMethod>

	count = 0
	lautosetobjectrefs = .T.
	length = 0
	Name = "_itemcollection"
	
	PROCEDURE count_access
		RETURN this.GetItemCount()
		
	ENDPROC

	PROCEDURE count_assign
		LPARAMETERS vNewVal
		
		RETURN this.SetItemCount(vNewVal)
		
	ENDPROC

	PROCEDURE getitemcount
		RETURN this.oHost.nItemCount
		
	ENDPROC

	PROCEDURE Init
		LPARAMETERS toHost
		
		IF NOT DODEFAULT()
			RETURN .F.
		ENDIF
		IF VARTYPE(toHost)=="O"
			this.oHost=toHost
		ENDIF
		
	ENDPROC

	PROTECTED PROCEDURE length_access
		RETURN this.GetItemCount()
		
	ENDPROC

	PROTECTED PROCEDURE length_assign
		LPARAMETERS vNewVal
		
		RETURN this.SetItemCount(m.vNewVal)
		
	ENDPROC

	PROCEDURE setitemcount
		LPARAMETERS tnNewCount
		
		RETURN this.oHost.SetItemCount(tnNewCount)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _styletag AS _htmltag OF "_html.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: classname_access
		*m: classname_assign
		*m: styletext_access
		*m: styletext_assign
		*p: classname
		*p: styletext
	*</DefinedPropArrayMethod>

	cfileext = css
	cgetfileext = css;htm;html;asp
	classname = 
	lendtag = .F.
	litemcrlf = .F.
	ltagdeclaration = .T.
	ltranslatespecialchars = .F.
	Name = "_styletag"
	styletext = 
	
	PROCEDURE classname_access
		RETURN this.TagName
		
	ENDPROC

	PROCEDURE classname_assign
		LPARAMETERS vNewVal
		
		this.TagName=m.vNewVal
		
	ENDPROC

	PROCEDURE styletext_access
		RETURN this.HTMLText
		
	ENDPROC

	PROCEDURE styletext_assign
		LPARAMETERS m.vNewVal
		
		ERROR 1743
		
	ENDPROC

ENDDEFINE

DEFINE CLASS _xmltag AS _htmltag OF "_html.vcx" 		&& XML tag class.
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "_html.h"
	*<DefinedPropArrayMethod>
		*m: xmltext_access
		*m: xmltext_assign
		*p: lxmlobject
		*p: xmltext
	*</DefinedPropArrayMethod>

	cfileext = xml
	cgetfileext = xml;htm;html;asp
	lfullendtag = .F.
	lindent = .T.
	litemcrlf = .F.
	ltranslatespecialchars = .F.
	lxmlobject = .T.
	Name = "_xmltag"
	xmltext = 
	
	PROCEDURE xmltext_access
		RETURN this.HTMLText
		
	ENDPROC

	PROCEDURE xmltext_assign
		LPARAMETERS m.vNewVal
		
		ERROR 1743
		
	ENDPROC

ENDDEFINE
